//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFramework_Core_SocketPackWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UFramework.Core.SocketPack), typeof(System.Object));
		L.RegFunction("AllocateReader", new LuaCSFunction(AllocateReader));
		L.RegFunction("AllocateWriter", new LuaCSFunction(AllocateWriter));
		L.RegFunction("Recycle", new LuaCSFunction(Recycle));
		L.RegFunction("OnRecycle", new LuaCSFunction(OnRecycle));
		L.RegFunction("WriteBuffer", new LuaCSFunction(WriteBuffer));
		L.RegFunction("PackSendData", new LuaCSFunction(PackSendData));
		L.RegFunction("Unpack", new LuaCSFunction(Unpack));
		L.RegFunction("New", new LuaCSFunction(_CreateUFramework_Core_SocketPack));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("HEADER_SIZE", new LuaCSFunction(get_HEADER_SIZE), null);
		L.RegVar("cmd", new LuaCSFunction(get_cmd), null);
		L.RegVar("session", new LuaCSFunction(get_session), null);
		L.RegVar("protocal", new LuaCSFunction(get_protocal), null);
		L.RegVar("luaRawData", new LuaCSFunction(get_luaRawData), null);
		L.RegVar("rawDataSize", new LuaCSFunction(get_rawDataSize), null);
		L.RegVar("header", new LuaCSFunction(get_header), null);
		L.RegVar("isRecycled", new LuaCSFunction(get_isRecycled), new LuaCSFunction(set_isRecycled));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUFramework_Core_SocketPack(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UFramework.Core.SocketPack obj = new UFramework.Core.SocketPack();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UFramework.Core.SocketPack.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AllocateReader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UFramework.Core.ProtocalType arg0 = (UFramework.Core.ProtocalType)ToLua.CheckObject(L, 1, TypeTraits<UFramework.Core.ProtocalType>.type);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				UFramework.Core.SocketPack o = UFramework.Core.SocketPack.AllocateReader(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UFramework.Core.ProtocalType arg0 = (UFramework.Core.ProtocalType)ToLua.CheckObject(L, 1, TypeTraits<UFramework.Core.ProtocalType>.type);
				UFramework.Core.FixedByteArray arg1 = (UFramework.Core.FixedByteArray)ToLua.CheckObject<UFramework.Core.FixedByteArray>(L, 2);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
				UFramework.Core.SocketPack o = UFramework.Core.SocketPack.AllocateReader(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UFramework.Core.SocketPack.AllocateReader");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AllocateWriter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Core.ProtocalType arg0 = (UFramework.Core.ProtocalType)ToLua.CheckObject(L, 1, TypeTraits<UFramework.Core.ProtocalType>.type);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 2);
			UFramework.Core.SocketPack o = UFramework.Core.SocketPack.AllocateWriter(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Recycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)ToLua.CheckObject<UFramework.Core.SocketPack>(L, 1);
			obj.Recycle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRecycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)ToLua.CheckObject<UFramework.Core.SocketPack>(L, 1);
			obj.OnRecycle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)ToLua.CheckObject<UFramework.Core.SocketPack>(L, 1);
			LuaByteBuffer arg0 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 2));
			obj.WriteBuffer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PackSendData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)ToLua.CheckObject<UFramework.Core.SocketPack>(L, 1);
			obj.PackSendData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unpack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)ToLua.CheckObject<UFramework.Core.SocketPack>(L, 1);
			obj.Unpack();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HEADER_SIZE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UFramework.Core.SocketPack.HEADER_SIZE);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cmd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)o;
			int ret = obj.cmd;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cmd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_session(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)o;
			int ret = obj.session;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index session on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_protocal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)o;
			UFramework.Core.ProtocalType ret = obj.protocal;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index protocal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaRawData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)o;
			LuaInterface.LuaByteBuffer ret = obj.luaRawData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaRawData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rawDataSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)o;
			int ret = obj.rawDataSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rawDataSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_header(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)o;
			UFramework.Core.FixedByteArray ret = obj.header;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index header on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isRecycled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)o;
			bool ret = obj.isRecycled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isRecycled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isRecycled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Core.SocketPack obj = (UFramework.Core.SocketPack)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isRecycled = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isRecycled on a nil value");
		}
	}
}

