//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFramework_Network_PackTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UFramework.Network.PackType));
		L.RegVar("Binary", new LuaCSFunction(get_Binary), null);
		L.RegVar("SizeBinary", new LuaCSFunction(get_SizeBinary), null);
		L.RegVar("SizeHeaderBinary", new LuaCSFunction(get_SizeHeaderBinary), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<UFramework.Network.PackType>.Check = CheckType;
		StackTraits<UFramework.Network.PackType>.Push = Push;
	}

	static void Push(IntPtr L, UFramework.Network.PackType arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_UFramework_Network_PackType = typeof(UFramework.Network.PackType);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_UFramework_Network_PackType, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Binary(IntPtr L)
	{
		ToLua.Push(L, UFramework.Network.PackType.Binary);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SizeBinary(IntPtr L)
	{
		ToLua.Push(L, UFramework.Network.PackType.SizeBinary);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SizeHeaderBinary(IntPtr L)
	{
		ToLua.Push(L, UFramework.Network.PackType.SizeHeaderBinary);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		UFramework.Network.PackType o = (UFramework.Network.PackType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

