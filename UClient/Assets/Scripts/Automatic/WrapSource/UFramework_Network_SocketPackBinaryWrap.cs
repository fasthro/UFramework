//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFramework_Network_SocketPackBinaryWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UFramework.Network.SocketPackBinary), typeof(UFramework.Network.SocketPack));
		L.RegFunction("ReadString", new LuaCSFunction(ReadString));
		L.RegFunction("New", new LuaCSFunction(_CreateUFramework_Network_SocketPackBinary));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("protocal", new LuaCSFunction(get_protocal), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUFramework_Network_SocketPackBinary(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UFramework.Network.SocketPackBinary obj = new UFramework.Network.SocketPackBinary();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UFramework.Network.SocketPackBinary.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UFramework.Network.SocketPackBinary obj = (UFramework.Network.SocketPackBinary)ToLua.CheckObject<UFramework.Network.SocketPackBinary>(L, 1);
				string o = obj.ReadString();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UFramework.Network.SocketPackBinary obj = (UFramework.Network.SocketPackBinary)ToLua.CheckObject<UFramework.Network.SocketPackBinary>(L, 1);
				System.Text.Encoding arg0 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 2);
				string o = obj.ReadString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UFramework.Network.SocketPackBinary.ReadString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_protocal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Network.SocketPackBinary obj = (UFramework.Network.SocketPackBinary)o;
			UFramework.Network.ProtocalType ret = obj.protocal;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index protocal on a nil value");
		}
	}
}

