//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFramework_Network_ProtocalTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UFramework.Network.ProtocalType));
		L.RegVar("Binary", new LuaCSFunction(get_Binary), null);
		L.RegVar("LinearBinary", new LuaCSFunction(get_LinearBinary), null);
		L.RegVar("PBC", new LuaCSFunction(get_PBC), null);
		L.RegVar("Protobuf", new LuaCSFunction(get_Protobuf), null);
		L.RegVar("Sproto", new LuaCSFunction(get_Sproto), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<UFramework.Network.ProtocalType>.Check = CheckType;
		StackTraits<UFramework.Network.ProtocalType>.Push = Push;
	}

	static void Push(IntPtr L, UFramework.Network.ProtocalType arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_UFramework_Network_ProtocalType = typeof(UFramework.Network.ProtocalType);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_UFramework_Network_ProtocalType, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Binary(IntPtr L)
	{
		ToLua.Push(L, UFramework.Network.ProtocalType.Binary);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LinearBinary(IntPtr L)
	{
		ToLua.Push(L, UFramework.Network.ProtocalType.LinearBinary);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PBC(IntPtr L)
	{
		ToLua.Push(L, UFramework.Network.ProtocalType.PBC);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Protobuf(IntPtr L)
	{
		ToLua.Push(L, UFramework.Network.ProtocalType.Protobuf);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Sproto(IntPtr L)
	{
		ToLua.Push(L, UFramework.Network.ProtocalType.Sproto);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		UFramework.Network.ProtocalType o = (UFramework.Network.ProtocalType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

