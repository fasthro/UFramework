//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFramework_Network_SocketPackLinearBinaryWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UFramework.Network.SocketPackLinearBinary), typeof(UFramework.Network.SocketPack));
		L.RegFunction("WriteByte", new LuaCSFunction(WriteByte));
		L.RegFunction("WriteBytes", new LuaCSFunction(WriteBytes));
		L.RegFunction("WriteInt", new LuaCSFunction(WriteInt));
		L.RegFunction("WriteUint", new LuaCSFunction(WriteUint));
		L.RegFunction("WriteShort", new LuaCSFunction(WriteShort));
		L.RegFunction("WriteUshort", new LuaCSFunction(WriteUshort));
		L.RegFunction("WriteLong", new LuaCSFunction(WriteLong));
		L.RegFunction("WriteUlong", new LuaCSFunction(WriteUlong));
		L.RegFunction("WriteBoolean", new LuaCSFunction(WriteBoolean));
		L.RegFunction("WriteFloat", new LuaCSFunction(WriteFloat));
		L.RegFunction("WriteDouble", new LuaCSFunction(WriteDouble));
		L.RegFunction("WriteString", new LuaCSFunction(WriteString));
		L.RegFunction("WriteUnicodeString", new LuaCSFunction(WriteUnicodeString));
		L.RegFunction("ReadByte", new LuaCSFunction(ReadByte));
		L.RegFunction("ReadBytes", new LuaCSFunction(ReadBytes));
		L.RegFunction("ReadInt", new LuaCSFunction(ReadInt));
		L.RegFunction("ReadUint", new LuaCSFunction(ReadUint));
		L.RegFunction("ReadShort", new LuaCSFunction(ReadShort));
		L.RegFunction("ReadUshort", new LuaCSFunction(ReadUshort));
		L.RegFunction("ReadLong", new LuaCSFunction(ReadLong));
		L.RegFunction("ReadUlong", new LuaCSFunction(ReadUlong));
		L.RegFunction("ReadBoolean", new LuaCSFunction(ReadBoolean));
		L.RegFunction("ReadFloat", new LuaCSFunction(ReadFloat));
		L.RegFunction("ReadDouble", new LuaCSFunction(ReadDouble));
		L.RegFunction("ReadString", new LuaCSFunction(ReadString));
		L.RegFunction("ReadUnicodeString", new LuaCSFunction(ReadUnicodeString));
		L.RegFunction("New", new LuaCSFunction(_CreateUFramework_Network_SocketPackLinearBinary));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("protocal", new LuaCSFunction(get_protocal), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUFramework_Network_SocketPackLinearBinary(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UFramework.Network.SocketPackLinearBinary obj = new UFramework.Network.SocketPackLinearBinary();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UFramework.Network.SocketPackLinearBinary.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.WriteBytes(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.WriteBytes(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UFramework.Network.SocketPackLinearBinary.WriteBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteUint(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			short arg0 = (short)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteShort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUshort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			ushort arg0 = (ushort)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteUshort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.WriteUlong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WriteBoolean(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFloat(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUnicodeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteUnicodeString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			byte o = obj.ReadByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			byte[] o = obj.ReadBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			int o = obj.ReadInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			uint o = obj.ReadUint();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			short o = obj.ReadShort();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUshort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			ushort o = obj.ReadUshort();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			long o = obj.ReadLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			ulong o = obj.ReadUlong();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			bool o = obj.ReadBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			float o = obj.ReadFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			string o = obj.ReadString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUnicodeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)ToLua.CheckObject<UFramework.Network.SocketPackLinearBinary>(L, 1);
			string o = obj.ReadUnicodeString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_protocal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Network.SocketPackLinearBinary obj = (UFramework.Network.SocketPackLinearBinary)o;
			UFramework.Network.ProtocalType ret = obj.protocal;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index protocal on a nil value");
		}
	}
}

