//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFramework_Network_SocketChannelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UFramework.Network.SocketChannel), typeof(System.Object));
		L.RegFunction("OnSocketConnected", new LuaCSFunction(OnSocketConnected));
		L.RegFunction("OnSocketDisconnected", new LuaCSFunction(OnSocketDisconnected));
		L.RegFunction("OnSocketReceive", new LuaCSFunction(OnSocketReceive));
		L.RegFunction("OnSocketException", new LuaCSFunction(OnSocketException));
		L.RegFunction("Connect", new LuaCSFunction(Connect));
		L.RegFunction("Send", new LuaCSFunction(Send));
		L.RegFunction("Disconnect", new LuaCSFunction(Disconnect));
		L.RegFunction("Redirect", new LuaCSFunction(Redirect));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("New", new LuaCSFunction(_CreateUFramework_Network_SocketChannel));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("packQueue", new LuaCSFunction(get_packQueue), null);
		L.RegVar("channelId", new LuaCSFunction(get_channelId), null);
		L.RegVar("isConnected", new LuaCSFunction(get_isConnected), null);
		L.RegVar("isRedirecting", new LuaCSFunction(get_isRedirecting), null);
		L.RegVar("protocalType", new LuaCSFunction(get_protocalType), null);
		L.RegVar("packType", new LuaCSFunction(get_packType), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUFramework_Network_SocketChannel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				UFramework.Network.ProtocalType arg1 = (UFramework.Network.ProtocalType)ToLua.CheckObject(L, 2, TypeTraits<UFramework.Network.ProtocalType>.type);
				UFramework.Network.ISocketChannelListener arg2 = (UFramework.Network.ISocketChannelListener)ToLua.CheckObject<UFramework.Network.ISocketChannelListener>(L, 3);
				UFramework.Network.SocketChannel obj = new UFramework.Network.SocketChannel(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				UFramework.Network.ProtocalType arg1 = (UFramework.Network.ProtocalType)ToLua.CheckObject(L, 2, TypeTraits<UFramework.Network.ProtocalType>.type);
				UFramework.Network.ISocketChannelListener arg2 = (UFramework.Network.ISocketChannelListener)ToLua.CheckObject<UFramework.Network.ISocketChannelListener>(L, 3);
				UFramework.Network.PackType arg3 = (UFramework.Network.PackType)ToLua.CheckObject(L, 4, TypeTraits<UFramework.Network.PackType>.type);
				UFramework.Network.SocketChannel obj = new UFramework.Network.SocketChannel(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UFramework.Network.SocketChannel.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSocketConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			obj.OnSocketConnected();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSocketDisconnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			obj.OnSocketDisconnected();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSocketReceive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			UFramework.Network.SocketPack arg0 = (UFramework.Network.SocketPack)ToLua.CheckObject<UFramework.Network.SocketPack>(L, 2);
			obj.OnSocketReceive(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSocketException(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			System.Net.Sockets.SocketError arg0 = (System.Net.Sockets.SocketError)ToLua.CheckObject(L, 2, TypeTraits<System.Net.Sockets.SocketError>.type);
			obj.OnSocketException(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.Connect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			UFramework.Network.SocketPack arg0 = (UFramework.Network.SocketPack)ToLua.CheckObject<UFramework.Network.SocketPack>(L, 2);
			obj.Send(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Disconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			obj.Disconnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Redirect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.Redirect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)ToLua.CheckObject<UFramework.Network.SocketChannel>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_packQueue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)o;
			UFramework.Core.DoubleQueue<UFramework.Network.SocketPack> ret = obj.packQueue;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index packQueue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_channelId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)o;
			int ret = obj.channelId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index channelId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)o;
			bool ret = obj.isConnected;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isConnected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isRedirecting(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)o;
			bool ret = obj.isRedirecting;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isRedirecting on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_protocalType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)o;
			UFramework.Network.ProtocalType ret = obj.protocalType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index protocalType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_packType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.Network.SocketChannel obj = (UFramework.Network.SocketChannel)o;
			UFramework.Network.PackType ret = obj.packType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index packType on a nil value");
		}
	}
}

