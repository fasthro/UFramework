//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFramework_BaseUnityBehaviourBindLuaWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UFramework.BaseUnityBehaviourBindLua), typeof(UFramework.BaseUnityBehaviour));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("luaTable", new LuaCSFunction(get_luaTable), new LuaCSFunction(set_luaTable));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.BaseUnityBehaviourBindLua obj = (UFramework.BaseUnityBehaviourBindLua)ToLua.CheckObject<UFramework.BaseUnityBehaviourBindLua>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaTable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.BaseUnityBehaviourBindLua obj = (UFramework.BaseUnityBehaviourBindLua)o;
			LuaInterface.LuaTable ret = obj.luaTable;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaTable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaTable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.BaseUnityBehaviourBindLua obj = (UFramework.BaseUnityBehaviourBindLua)o;
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.luaTable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaTable on a nil value");
		}
	}
}

