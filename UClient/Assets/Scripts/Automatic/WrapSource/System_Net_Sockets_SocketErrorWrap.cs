//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_Sockets_SocketErrorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(System.Net.Sockets.SocketError));
		L.RegVar("Success", new LuaCSFunction(get_Success), null);
		L.RegVar("SocketError", new LuaCSFunction(get_SocketError), null);
		L.RegVar("Interrupted", new LuaCSFunction(get_Interrupted), null);
		L.RegVar("AccessDenied", new LuaCSFunction(get_AccessDenied), null);
		L.RegVar("Fault", new LuaCSFunction(get_Fault), null);
		L.RegVar("InvalidArgument", new LuaCSFunction(get_InvalidArgument), null);
		L.RegVar("TooManyOpenSockets", new LuaCSFunction(get_TooManyOpenSockets), null);
		L.RegVar("WouldBlock", new LuaCSFunction(get_WouldBlock), null);
		L.RegVar("InProgress", new LuaCSFunction(get_InProgress), null);
		L.RegVar("AlreadyInProgress", new LuaCSFunction(get_AlreadyInProgress), null);
		L.RegVar("NotSocket", new LuaCSFunction(get_NotSocket), null);
		L.RegVar("DestinationAddressRequired", new LuaCSFunction(get_DestinationAddressRequired), null);
		L.RegVar("MessageSize", new LuaCSFunction(get_MessageSize), null);
		L.RegVar("ProtocolType", new LuaCSFunction(get_ProtocolType), null);
		L.RegVar("ProtocolOption", new LuaCSFunction(get_ProtocolOption), null);
		L.RegVar("ProtocolNotSupported", new LuaCSFunction(get_ProtocolNotSupported), null);
		L.RegVar("SocketNotSupported", new LuaCSFunction(get_SocketNotSupported), null);
		L.RegVar("OperationNotSupported", new LuaCSFunction(get_OperationNotSupported), null);
		L.RegVar("ProtocolFamilyNotSupported", new LuaCSFunction(get_ProtocolFamilyNotSupported), null);
		L.RegVar("AddressFamilyNotSupported", new LuaCSFunction(get_AddressFamilyNotSupported), null);
		L.RegVar("AddressAlreadyInUse", new LuaCSFunction(get_AddressAlreadyInUse), null);
		L.RegVar("AddressNotAvailable", new LuaCSFunction(get_AddressNotAvailable), null);
		L.RegVar("NetworkDown", new LuaCSFunction(get_NetworkDown), null);
		L.RegVar("NetworkUnreachable", new LuaCSFunction(get_NetworkUnreachable), null);
		L.RegVar("NetworkReset", new LuaCSFunction(get_NetworkReset), null);
		L.RegVar("ConnectionAborted", new LuaCSFunction(get_ConnectionAborted), null);
		L.RegVar("ConnectionReset", new LuaCSFunction(get_ConnectionReset), null);
		L.RegVar("NoBufferSpaceAvailable", new LuaCSFunction(get_NoBufferSpaceAvailable), null);
		L.RegVar("IsConnected", new LuaCSFunction(get_IsConnected), null);
		L.RegVar("NotConnected", new LuaCSFunction(get_NotConnected), null);
		L.RegVar("Shutdown", new LuaCSFunction(get_Shutdown), null);
		L.RegVar("TimedOut", new LuaCSFunction(get_TimedOut), null);
		L.RegVar("ConnectionRefused", new LuaCSFunction(get_ConnectionRefused), null);
		L.RegVar("HostDown", new LuaCSFunction(get_HostDown), null);
		L.RegVar("HostUnreachable", new LuaCSFunction(get_HostUnreachable), null);
		L.RegVar("ProcessLimit", new LuaCSFunction(get_ProcessLimit), null);
		L.RegVar("SystemNotReady", new LuaCSFunction(get_SystemNotReady), null);
		L.RegVar("VersionNotSupported", new LuaCSFunction(get_VersionNotSupported), null);
		L.RegVar("NotInitialized", new LuaCSFunction(get_NotInitialized), null);
		L.RegVar("Disconnecting", new LuaCSFunction(get_Disconnecting), null);
		L.RegVar("TypeNotFound", new LuaCSFunction(get_TypeNotFound), null);
		L.RegVar("HostNotFound", new LuaCSFunction(get_HostNotFound), null);
		L.RegVar("TryAgain", new LuaCSFunction(get_TryAgain), null);
		L.RegVar("NoRecovery", new LuaCSFunction(get_NoRecovery), null);
		L.RegVar("NoData", new LuaCSFunction(get_NoData), null);
		L.RegVar("IOPending", new LuaCSFunction(get_IOPending), null);
		L.RegVar("OperationAborted", new LuaCSFunction(get_OperationAborted), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<System.Net.Sockets.SocketError>.Check = CheckType;
		StackTraits<System.Net.Sockets.SocketError>.Push = Push;
	}

	static void Push(IntPtr L, System.Net.Sockets.SocketError arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_System_Net_Sockets_SocketError = typeof(System.Net.Sockets.SocketError);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_System_Net_Sockets_SocketError, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Success(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Success);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketError(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.SocketError);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Interrupted(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Interrupted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AccessDenied(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AccessDenied);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Fault(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Fault);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InvalidArgument(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.InvalidArgument);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TooManyOpenSockets(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.TooManyOpenSockets);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WouldBlock(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.WouldBlock);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InProgress(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.InProgress);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AlreadyInProgress(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AlreadyInProgress);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotSocket(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NotSocket);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DestinationAddressRequired(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.DestinationAddressRequired);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MessageSize(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.MessageSize);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolType(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProtocolType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolOption(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProtocolOption);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProtocolNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.SocketNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OperationNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.OperationNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolFamilyNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProtocolFamilyNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressFamilyNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AddressFamilyNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressAlreadyInUse(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AddressAlreadyInUse);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressNotAvailable(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AddressNotAvailable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetworkDown(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NetworkDown);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetworkUnreachable(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NetworkUnreachable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetworkReset(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NetworkReset);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionAborted(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ConnectionAborted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionReset(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ConnectionReset);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoBufferSpaceAvailable(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NoBufferSpaceAvailable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsConnected(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.IsConnected);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotConnected(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NotConnected);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Shutdown(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Shutdown);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TimedOut(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.TimedOut);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionRefused(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ConnectionRefused);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HostDown(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.HostDown);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HostUnreachable(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.HostUnreachable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProcessLimit(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProcessLimit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SystemNotReady(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.SystemNotReady);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VersionNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.VersionNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotInitialized(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NotInitialized);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Disconnecting(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Disconnecting);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TypeNotFound(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.TypeNotFound);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HostNotFound(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.HostNotFound);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TryAgain(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.TryAgain);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoRecovery(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NoRecovery);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoData(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NoData);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IOPending(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.IOPending);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OperationAborted(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.OperationAborted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		System.Net.Sockets.SocketError o = (System.Net.Sockets.SocketError)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

