//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFramework_AppConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UFramework.AppConfig), typeof(System.Object));
		L.RegFunction("Serialize", new LuaCSFunction(Serialize));
		L.RegFunction("New", new LuaCSFunction(_CreateUFramework_AppConfig));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("version", new LuaCSFunction(get_version), new LuaCSFunction(set_version));
		L.RegVar("isDevelopmentVersion", new LuaCSFunction(get_isDevelopmentVersion), new LuaCSFunction(set_isDevelopmentVersion));
		L.RegVar("useAPKExpansionFiles", new LuaCSFunction(get_useAPKExpansionFiles), new LuaCSFunction(set_useAPKExpansionFiles));
		L.RegVar("appEnvironmentType", new LuaCSFunction(get_appEnvironmentType), new LuaCSFunction(set_appEnvironmentType));
		L.RegVar("versionBaseURL", new LuaCSFunction(get_versionBaseURL), new LuaCSFunction(set_versionBaseURL));
		L.RegVar("logLevel", new LuaCSFunction(get_logLevel), new LuaCSFunction(set_logLevel));
		L.RegVar("useSystemLanguage", new LuaCSFunction(get_useSystemLanguage), new LuaCSFunction(set_useSystemLanguage));
		L.RegVar("defaultLanguage", new LuaCSFunction(get_defaultLanguage), new LuaCSFunction(set_defaultLanguage));
		L.RegVar("supportedLanguages", new LuaCSFunction(get_supportedLanguages), new LuaCSFunction(set_supportedLanguages));
		L.RegVar("useFairyGUI", new LuaCSFunction(get_useFairyGUI), new LuaCSFunction(set_useFairyGUI));
		L.RegVar("designResolutionX", new LuaCSFunction(get_designResolutionX), new LuaCSFunction(set_designResolutionX));
		L.RegVar("designResolutionY", new LuaCSFunction(get_designResolutionY), new LuaCSFunction(set_designResolutionY));
		L.RegVar("uiDirectory", new LuaCSFunction(get_uiDirectory), new LuaCSFunction(set_uiDirectory));
		L.RegVar("package", new LuaCSFunction(get_package), new LuaCSFunction(set_package));
		L.RegVar("assigned", new LuaCSFunction(get_assigned), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUFramework_AppConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UFramework.AppConfig obj = new UFramework.AppConfig();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UFramework.AppConfig.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Serialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)ToLua.CheckObject<UFramework.AppConfig>(L, 1);
			obj.Serialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_version(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			int ret = obj.version;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index version on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isDevelopmentVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			bool ret = obj.isDevelopmentVersion;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isDevelopmentVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useAPKExpansionFiles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			bool ret = obj.useAPKExpansionFiles;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useAPKExpansionFiles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_appEnvironmentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			UFramework.AppEnvironmentType ret = obj.appEnvironmentType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index appEnvironmentType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_versionBaseURL(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			string ret = obj.versionBaseURL;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index versionBaseURL on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			UFramework.LogLevel ret = obj.logLevel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logLevel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useSystemLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			bool ret = obj.useSystemLanguage;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useSystemLanguage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			UnityEngine.SystemLanguage ret = obj.defaultLanguage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index defaultLanguage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportedLanguages(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			System.Collections.Generic.List<UnityEngine.SystemLanguage> ret = obj.supportedLanguages;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index supportedLanguages on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useFairyGUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			bool ret = obj.useFairyGUI;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useFairyGUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_designResolutionX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			int ret = obj.designResolutionX;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index designResolutionX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_designResolutionY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			int ret = obj.designResolutionY;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index designResolutionY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uiDirectory(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			string ret = obj.uiDirectory;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uiDirectory on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_package(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			string ret = obj.package;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index package on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_assigned(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			UFramework.Core.SerializableAssigned ret = obj.assigned;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assigned on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_version(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.version = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index version on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isDevelopmentVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isDevelopmentVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isDevelopmentVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useAPKExpansionFiles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useAPKExpansionFiles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useAPKExpansionFiles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_appEnvironmentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			UFramework.AppEnvironmentType arg0 = (UFramework.AppEnvironmentType)ToLua.CheckObject(L, 2, TypeTraits<UFramework.AppEnvironmentType>.type);
			obj.appEnvironmentType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index appEnvironmentType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_versionBaseURL(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.versionBaseURL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index versionBaseURL on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			UFramework.LogLevel arg0 = (UFramework.LogLevel)ToLua.CheckObject(L, 2, TypeTraits<UFramework.LogLevel>.type);
			obj.logLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logLevel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useSystemLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useSystemLanguage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useSystemLanguage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			UnityEngine.SystemLanguage arg0 = (UnityEngine.SystemLanguage)ToLua.CheckObject(L, 2, TypeTraits<UnityEngine.SystemLanguage>.type);
			obj.defaultLanguage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index defaultLanguage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_supportedLanguages(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			System.Collections.Generic.List<UnityEngine.SystemLanguage> arg0 = (System.Collections.Generic.List<UnityEngine.SystemLanguage>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<UnityEngine.SystemLanguage>>.type);
			obj.supportedLanguages = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index supportedLanguages on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useFairyGUI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useFairyGUI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useFairyGUI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_designResolutionX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.designResolutionX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index designResolutionX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_designResolutionY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.designResolutionY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index designResolutionY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uiDirectory(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.uiDirectory = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uiDirectory on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_package(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UFramework.AppConfig obj = (UFramework.AppConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.package = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index package on a nil value");
		}
	}
}

