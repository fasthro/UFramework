// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lockstep.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lockstep.Message {

  /// <summary>Holder for reflection information generated from lockstep.proto</summary>
  public static partial class LockstepReflection {

    #region Descriptor
    /// <summary>File descriptor for lockstep.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LockstepReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5sb2Nrc3RlcC5wcm90bxIQTG9ja3N0ZXAuTWVzc2FnZSItCgpMU01WZWN0",
            "b3IzEgkKAXgYASABKAESCQoBeRgCIAEoARIJCgF6GAMgASgBIjMKCUxTTVBs",
            "YXllchILCgN1aWQYASABKAMSCwoDb2lkGAIgASgFEgwKBG5hbWUYAyABKAki",
            "SgoITFNNSW5wdXQSCwoDb2lkGAEgASgFEjEKC21vdmVtZW50RGlyGAIgASgL",
            "MhwuTG9ja3N0ZXAuTWVzc2FnZS5MU01WZWN0b3IzIkQKCExTTUZyYW1lEgwK",
            "BHRpY2sYASABKAUSKgoGaW5wdXRzGAIgAygLMhouTG9ja3N0ZXAuTWVzc2Fn",
            "ZS5MU01JbnB1dCIvCg9TZXJ2ZXJFeGNlcHRpb24SCwoDY21kGAEgASgFEg8K",
            "B3Nlc3Npb24YAiABKAUiHAoNSGFuZHNoYWtlX0MyUxILCgN1aWQYASABKAMi",
            "IwoNSGFuZHNoYWtlX1MyQxISCgpyZXN1bHRDb2RlGAEgASgFIg8KDUVudGVy",
            "Um9vbV9DMlMiDwoNRW50ZXJSb29tX1MyQyIYCglSZWFkeV9DMlMSCwoDdWlk",
            "GAEgASgDIgsKCVJlYWR5X1MyQyIuCghQaW5nX0MyUxILCgNvaWQYASABKAUS",
            "FQoNc2VuZFRpbWVzdGFtcBgCIAEoAyI/CghQaW5nX1MyQxIVCg1zZW5kVGlt",
            "ZXN0YW1wGAEgASgDEhwKFHRpbWVTaW5jZVNlcnZlclN0YXJ0GAIgASgDIksK",
            "DUdhbWVTdGFydF9TMkMSDAoEc2VlZBgBIAEoBRIsCgdwbGF5ZXJzGAIgAygL",
            "MhsuTG9ja3N0ZXAuTWVzc2FnZS5MU01QbGF5ZXIiNgoJRnJhbWVfUzJDEikK",
            "BWZyYW1lGAEgASgLMhouTG9ja3N0ZXAuTWVzc2FnZS5MU01GcmFtZSI2CglG",
            "cmFtZV9DMlMSKQoFZnJhbWUYAiABKAsyGi5Mb2Nrc3RlcC5NZXNzYWdlLkxT",
            "TUZyYW1lYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.LSMVector3), global::Lockstep.Message.LSMVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.LSMPlayer), global::Lockstep.Message.LSMPlayer.Parser, new[]{ "Uid", "Oid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.LSMInput), global::Lockstep.Message.LSMInput.Parser, new[]{ "Oid", "MovementDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.LSMFrame), global::Lockstep.Message.LSMFrame.Parser, new[]{ "Tick", "Inputs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.ServerException), global::Lockstep.Message.ServerException.Parser, new[]{ "Cmd", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.Handshake_C2S), global::Lockstep.Message.Handshake_C2S.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.Handshake_S2C), global::Lockstep.Message.Handshake_S2C.Parser, new[]{ "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.EnterRoom_C2S), global::Lockstep.Message.EnterRoom_C2S.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.EnterRoom_S2C), global::Lockstep.Message.EnterRoom_S2C.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.Ready_C2S), global::Lockstep.Message.Ready_C2S.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.Ready_S2C), global::Lockstep.Message.Ready_S2C.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.Ping_C2S), global::Lockstep.Message.Ping_C2S.Parser, new[]{ "Oid", "SendTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.Ping_S2C), global::Lockstep.Message.Ping_S2C.Parser, new[]{ "SendTimestamp", "TimeSinceServerStart" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.GameStart_S2C), global::Lockstep.Message.GameStart_S2C.Parser, new[]{ "Seed", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.Frame_S2C), global::Lockstep.Message.Frame_S2C.Parser, new[]{ "Frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lockstep.Message.Frame_C2S), global::Lockstep.Message.Frame_C2S.Parser, new[]{ "Frame" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LSMVector3 : pb::IMessage<LSMVector3> {
    private static readonly pb::MessageParser<LSMVector3> _parser = new pb::MessageParser<LSMVector3>(() => new LSMVector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LSMVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMVector3(LSMVector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMVector3 Clone() {
      return new LSMVector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LSMVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LSMVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LSMVector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LSMPlayer : pb::IMessage<LSMPlayer> {
    private static readonly pb::MessageParser<LSMPlayer> _parser = new pb::MessageParser<LSMPlayer>(() => new LSMPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LSMPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMPlayer(LSMPlayer other) : this() {
      uid_ = other.uid_;
      oid_ = other.oid_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMPlayer Clone() {
      return new LSMPlayer(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 2;
    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { return oid_; }
      set {
        oid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LSMPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LSMPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Oid != other.Oid) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Oid != 0) hash ^= Oid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Oid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Oid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Oid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LSMPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Oid != 0) {
        Oid = other.Oid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            Oid = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LSMInput : pb::IMessage<LSMInput> {
    private static readonly pb::MessageParser<LSMInput> _parser = new pb::MessageParser<LSMInput>(() => new LSMInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LSMInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMInput(LSMInput other) : this() {
      oid_ = other.oid_;
      MovementDir = other.movementDir_ != null ? other.MovementDir.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMInput Clone() {
      return new LSMInput(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { return oid_; }
      set {
        oid_ = value;
      }
    }

    /// <summary>Field number for the "movementDir" field.</summary>
    public const int MovementDirFieldNumber = 2;
    private global::Lockstep.Message.LSMVector3 movementDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lockstep.Message.LSMVector3 MovementDir {
      get { return movementDir_; }
      set {
        movementDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LSMInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LSMInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (!object.Equals(MovementDir, other.MovementDir)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oid != 0) hash ^= Oid.GetHashCode();
      if (movementDir_ != null) hash ^= MovementDir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (movementDir_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MovementDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (movementDir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MovementDir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LSMInput other) {
      if (other == null) {
        return;
      }
      if (other.Oid != 0) {
        Oid = other.Oid;
      }
      if (other.movementDir_ != null) {
        if (movementDir_ == null) {
          movementDir_ = new global::Lockstep.Message.LSMVector3();
        }
        MovementDir.MergeFrom(other.MovementDir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            if (movementDir_ == null) {
              movementDir_ = new global::Lockstep.Message.LSMVector3();
            }
            input.ReadMessage(movementDir_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LSMFrame : pb::IMessage<LSMFrame> {
    private static readonly pb::MessageParser<LSMFrame> _parser = new pb::MessageParser<LSMFrame>(() => new LSMFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LSMFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMFrame(LSMFrame other) : this() {
      tick_ = other.tick_;
      inputs_ = other.inputs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LSMFrame Clone() {
      return new LSMFrame(this);
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private int tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lockstep.Message.LSMInput> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(18, global::Lockstep.Message.LSMInput.Parser);
    private readonly pbc::RepeatedField<global::Lockstep.Message.LSMInput> inputs_ = new pbc::RepeatedField<global::Lockstep.Message.LSMInput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lockstep.Message.LSMInput> Inputs {
      get { return inputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LSMFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LSMFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tick != other.Tick) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tick != 0) hash ^= Tick.GetHashCode();
      hash ^= inputs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tick);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LSMFrame other) {
      if (other == null) {
        return;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      inputs_.Add(other.inputs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tick = input.ReadInt32();
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------->>>> 101 &lt;&lt;&lt;&lt;----------
  /// #[S2C][101]#
  /// </summary>
  public sealed partial class ServerException : pb::IMessage<ServerException> {
    private static readonly pb::MessageParser<ServerException> _parser = new pb::MessageParser<ServerException>(() => new ServerException());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerException> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerException() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerException(ServerException other) : this() {
      cmd_ = other.cmd_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerException Clone() {
      return new ServerException(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private int cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private int session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerException);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerException other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Session != 0) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cmd);
      }
      if (Session != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cmd);
      }
      if (Session != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerException other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Session != 0) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cmd = input.ReadInt32();
            break;
          }
          case 16: {
            Session = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------->>>> 901 &lt;&lt;&lt;&lt;----------
  /// > 握手
  /// #[C2S][901]#
  /// </summary>
  public sealed partial class Handshake_C2S : pb::IMessage<Handshake_C2S> {
    private static readonly pb::MessageParser<Handshake_C2S> _parser = new pb::MessageParser<Handshake_C2S>(() => new Handshake_C2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Handshake_C2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake_C2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake_C2S(Handshake_C2S other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake_C2S Clone() {
      return new Handshake_C2S(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Handshake_C2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Handshake_C2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Handshake_C2S other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// #[S2C][901]#
  /// </summary>
  public sealed partial class Handshake_S2C : pb::IMessage<Handshake_S2C> {
    private static readonly pb::MessageParser<Handshake_S2C> _parser = new pb::MessageParser<Handshake_S2C>(() => new Handshake_S2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Handshake_S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake_S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake_S2C(Handshake_S2C other) : this() {
      resultCode_ = other.resultCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake_S2C Clone() {
      return new Handshake_S2C(this);
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private int resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Handshake_S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Handshake_S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResultCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Handshake_S2C other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------->>>> 902 &lt;&lt;&lt;&lt;----------
  /// > 进入房间
  /// #[C2S][902]#
  /// </summary>
  public sealed partial class EnterRoom_C2S : pb::IMessage<EnterRoom_C2S> {
    private static readonly pb::MessageParser<EnterRoom_C2S> _parser = new pb::MessageParser<EnterRoom_C2S>(() => new EnterRoom_C2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoom_C2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom_C2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom_C2S(EnterRoom_C2S other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom_C2S Clone() {
      return new EnterRoom_C2S(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoom_C2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoom_C2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoom_C2S other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// #[S2C][902]#
  /// </summary>
  public sealed partial class EnterRoom_S2C : pb::IMessage<EnterRoom_S2C> {
    private static readonly pb::MessageParser<EnterRoom_S2C> _parser = new pb::MessageParser<EnterRoom_S2C>(() => new EnterRoom_S2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoom_S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom_S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom_S2C(EnterRoom_S2C other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom_S2C Clone() {
      return new EnterRoom_S2C(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoom_S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoom_S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoom_S2C other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// ---------->>>> 903 &lt;&lt;&lt;&lt;----------
  /// > 准备
  /// #[C2S][903]#
  /// </summary>
  public sealed partial class Ready_C2S : pb::IMessage<Ready_C2S> {
    private static readonly pb::MessageParser<Ready_C2S> _parser = new pb::MessageParser<Ready_C2S>(() => new Ready_C2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ready_C2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ready_C2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ready_C2S(Ready_C2S other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ready_C2S Clone() {
      return new Ready_C2S(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ready_C2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ready_C2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ready_C2S other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// #[S2C][903]#
  /// </summary>
  public sealed partial class Ready_S2C : pb::IMessage<Ready_S2C> {
    private static readonly pb::MessageParser<Ready_S2C> _parser = new pb::MessageParser<Ready_S2C>(() => new Ready_S2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ready_S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ready_S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ready_S2C(Ready_S2C other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ready_S2C Clone() {
      return new Ready_S2C(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ready_S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ready_S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ready_S2C other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// ---------->>>> 940 &lt;&lt;&lt;&lt;----------
  ///  Ping
  /// #[C2S][940]#
  /// </summary>
  public sealed partial class Ping_C2S : pb::IMessage<Ping_C2S> {
    private static readonly pb::MessageParser<Ping_C2S> _parser = new pb::MessageParser<Ping_C2S>(() => new Ping_C2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping_C2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_C2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_C2S(Ping_C2S other) : this() {
      oid_ = other.oid_;
      sendTimestamp_ = other.sendTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_C2S Clone() {
      return new Ping_C2S(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { return oid_; }
      set {
        oid_ = value;
      }
    }

    /// <summary>Field number for the "sendTimestamp" field.</summary>
    public const int SendTimestampFieldNumber = 2;
    private long sendTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTimestamp {
      get { return sendTimestamp_; }
      set {
        sendTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping_C2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping_C2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (SendTimestamp != other.SendTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oid != 0) hash ^= Oid.GetHashCode();
      if (SendTimestamp != 0L) hash ^= SendTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (SendTimestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (SendTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTimestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping_C2S other) {
      if (other == null) {
        return;
      }
      if (other.Oid != 0) {
        Oid = other.Oid;
      }
      if (other.SendTimestamp != 0L) {
        SendTimestamp = other.SendTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            SendTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// #[S2C][940]#
  /// </summary>
  public sealed partial class Ping_S2C : pb::IMessage<Ping_S2C> {
    private static readonly pb::MessageParser<Ping_S2C> _parser = new pb::MessageParser<Ping_S2C>(() => new Ping_S2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping_S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_S2C(Ping_S2C other) : this() {
      sendTimestamp_ = other.sendTimestamp_;
      timeSinceServerStart_ = other.timeSinceServerStart_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_S2C Clone() {
      return new Ping_S2C(this);
    }

    /// <summary>Field number for the "sendTimestamp" field.</summary>
    public const int SendTimestampFieldNumber = 1;
    private long sendTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTimestamp {
      get { return sendTimestamp_; }
      set {
        sendTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timeSinceServerStart" field.</summary>
    public const int TimeSinceServerStartFieldNumber = 2;
    private long timeSinceServerStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeSinceServerStart {
      get { return timeSinceServerStart_; }
      set {
        timeSinceServerStart_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping_S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping_S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendTimestamp != other.SendTimestamp) return false;
      if (TimeSinceServerStart != other.TimeSinceServerStart) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SendTimestamp != 0L) hash ^= SendTimestamp.GetHashCode();
      if (TimeSinceServerStart != 0L) hash ^= TimeSinceServerStart.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SendTimestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SendTimestamp);
      }
      if (TimeSinceServerStart != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeSinceServerStart);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SendTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTimestamp);
      }
      if (TimeSinceServerStart != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeSinceServerStart);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping_S2C other) {
      if (other == null) {
        return;
      }
      if (other.SendTimestamp != 0L) {
        SendTimestamp = other.SendTimestamp;
      }
      if (other.TimeSinceServerStart != 0L) {
        TimeSinceServerStart = other.TimeSinceServerStart;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SendTimestamp = input.ReadInt64();
            break;
          }
          case 16: {
            TimeSinceServerStart = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------->>>> 950 &lt;&lt;&lt;&lt;----------
  ///  模拟开始
  /// #[S2C][950]#
  /// </summary>
  public sealed partial class GameStart_S2C : pb::IMessage<GameStart_S2C> {
    private static readonly pb::MessageParser<GameStart_S2C> _parser = new pb::MessageParser<GameStart_S2C>(() => new GameStart_S2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStart_S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart_S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart_S2C(GameStart_S2C other) : this() {
      seed_ = other.seed_;
      players_ = other.players_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart_S2C Clone() {
      return new GameStart_S2C(this);
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 1;
    private int seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lockstep.Message.LSMPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Lockstep.Message.LSMPlayer.Parser);
    private readonly pbc::RepeatedField<global::Lockstep.Message.LSMPlayer> players_ = new pbc::RepeatedField<global::Lockstep.Message.LSMPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lockstep.Message.LSMPlayer> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStart_S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStart_S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seed != other.Seed) return false;
      if(!players_.Equals(other.players_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seed != 0) hash ^= Seed.GetHashCode();
      hash ^= players_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seed);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStart_S2C other) {
      if (other == null) {
        return;
      }
      if (other.Seed != 0) {
        Seed = other.Seed;
      }
      players_.Add(other.players_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seed = input.ReadInt32();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------->>>> 951 &lt;&lt;&lt;&lt;----------
  ///  服务器下推帧
  /// #[S2C][951]#
  /// </summary>
  public sealed partial class Frame_S2C : pb::IMessage<Frame_S2C> {
    private static readonly pb::MessageParser<Frame_S2C> _parser = new pb::MessageParser<Frame_S2C>(() => new Frame_S2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame_S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame_S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame_S2C(Frame_S2C other) : this() {
      Frame = other.frame_ != null ? other.Frame.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame_S2C Clone() {
      return new Frame_S2C(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private global::Lockstep.Message.LSMFrame frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lockstep.Message.LSMFrame Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame_S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame_S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Frame, other.Frame)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frame_ != null) hash ^= Frame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (frame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Frame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame_S2C other) {
      if (other == null) {
        return;
      }
      if (other.frame_ != null) {
        if (frame_ == null) {
          frame_ = new global::Lockstep.Message.LSMFrame();
        }
        Frame.MergeFrom(other.Frame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (frame_ == null) {
              frame_ = new global::Lockstep.Message.LSMFrame();
            }
            input.ReadMessage(frame_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------->>>> 952 &lt;&lt;&lt;&lt;----------
  ///  客户端上传帧
  /// #[C2S][952]#
  /// </summary>
  public sealed partial class Frame_C2S : pb::IMessage<Frame_C2S> {
    private static readonly pb::MessageParser<Frame_C2S> _parser = new pb::MessageParser<Frame_C2S>(() => new Frame_C2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame_C2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lockstep.Message.LockstepReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame_C2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame_C2S(Frame_C2S other) : this() {
      Frame = other.frame_ != null ? other.Frame.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame_C2S Clone() {
      return new Frame_C2S(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 2;
    private global::Lockstep.Message.LSMFrame frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lockstep.Message.LSMFrame Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame_C2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame_C2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Frame, other.Frame)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frame_ != null) hash ^= Frame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (frame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Frame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame_C2S other) {
      if (other == null) {
        return;
      }
      if (other.frame_ != null) {
        if (frame_ == null) {
          frame_ = new global::Lockstep.Message.LSMFrame();
        }
        Frame.MergeFrom(other.Frame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (frame_ == null) {
              frame_ = new global::Lockstep.Message.LSMFrame();
            }
            input.ReadMessage(frame_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
