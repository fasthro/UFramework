// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NBSGame.PB {

  /// <summary>Holder for reflection information generated from Common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for Common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDb21tb24ucHJvdG8SCk5CU0dhbWUuUEIi/QMKC1Ryb29wRGV0YWlsEg8K",
            "B3Ryb29wSWQYASABKAMSFAoMb2ZmaWNlclByb0lkGAIgASgFEhEKCWFybXlD",
            "bGFzcxgDIAEoBRISCgphcm15QW1vdW50GAQgASgFEhUKDWFybXlBbW91bnRN",
            "YXgYBSABKAUSDgoGc3RhdHVzGAYgASgFEhQKDG1hcmNoTWlzc2lvbhgHIAEo",
            "BRIOCgZjZWxsSWQYCCABKAUSDgoGYWN0aW9uGAkgASgFEhgKEGFjdGlvbkZp",
            "bmlzaFRpbWUYCiABKAMSDQoFc3BlZWQYCyABKAMSFwoPbWFyY2hGaW5pc2hU",
            "aW1lGAwgASgDEg4KBm1vcmFsZRgNIAEoBRIRCgltb3JhbGVNYXgYDiABKAUS",
            "DQoFdmlnb3IYDyABKAUSEAoIdmlnb3JNYXgYECABKAUSEAoIdmlnb3JNaW4Y",
            "ESABKAUSEwoLc3RhcnRDZWxsSWQYEiABKAUSEwoLc3RhcnRSZWdpb24YEyAB",
            "KAUSEQoJZW5kQ2VsbElkGBQgASgFEhEKCWVuZFJlZ2lvbhgVIAEoBRIPCgdp",
            "c1dvdW5kGBYgASgIEhsKE2NvbnNjcmlwdEZpbmlzaFRpbWUYFyABKAMSFAoM",
            "YmVsb25nQ2l0eUlkGBggASgDEhcKD3dvdW5kQXJteUFtb3VudBgZIAEoBSKk",
            "AgoQT3RoZXJUcm9vcERldGFpbBIQCghwbGF5ZXJJZBgBIAEoAxISCgpwbGF5",
            "ZXJOYW1lGAIgASgJEg4KBnN0YXR1cxgDIAEoBRIUCgxtYXJjaE1pc3Npb24Y",
            "BCABKAUSDgoGYWN0aW9uGAUgASgFEhMKC3N0YXJ0Q2VsbElkGAYgASgFEhMK",
            "C3N0YXJ0UmVnaW9uGAcgASgFEhEKCWVuZENlbGxJZBgIIAEoBRIRCgllbmRS",
            "ZWdpb24YCSABKAUSDwoHdHJvb3BJZBgKIAEoAxIOCgZjZWxsSWQYCyABKAUS",
            "EAoIcmVsYXRpb24YDCABKAUSGAoQYWN0aW9uRmluaXNoVGltZRgNIAEoAxIX",
            "Cg9tYXJjaEZpbmlzaFRpbWUYDiABKAMiSAoIVHJhbnNmZXISDgoGdGFyZ2V0",
            "GAEgASgJEgsKA3RhYhgCIAEoCRIPCgdjb250ZW50GAMgASgJEg4KBmNpdHlJ",
            "ZBgEIAEoAyI7CgxDb21tb25SZXdhcmQSDAoEdHlwZRgBIAEoBRINCgVwcm9J",
            "ZBgCIAEoBRIOCgZhbW91bnQYAyABKAUi0AEKD0VxdWlwbWVudFJld2FyZBIN",
            "CgVwcm9JZBgBIAEoBRIOCgZhdHRhY2sYAiABKAESFAoMaW50ZWxsaWdlbmNl",
            "GAMgASgBEhIKCmxlYWRlcnNoaXAYBCABKAESDQoFc3BlZWQYBSABKAESEAoI",
            "cG9saXRpY3MYBiABKAESEAoIY2hhcmlzbWEYByABKAESFAoMZmlyc3RTa2ls",
            "bElkGAggASgFEhUKDXNlY29uZFNraWxsSWQYCSABKAUSFAoMdGhpcmRTa2ls",
            "bElkGAogASgFIqEBCgpSZXdhcmRJbmZvEjQKD2VxdWlwbWVudFJld2FyZBgB",
            "IAMoCzIbLk5CU0dhbWUuUEIuRXF1aXBtZW50UmV3YXJkEiwKCml0ZW1SZXdh",
            "cmQYAiADKAsyGC5OQlNHYW1lLlBCLkNvbW1vblJld2FyZBIvCg1tZXNzYWdl",
            "UmV3YXJkGAMgAygLMhguTkJTR2FtZS5QQi5Db21tb25SZXdhcmQipQIKB01z",
            "Z0l0ZW0SLgoKcGxheWVySW5mbxgBIAEoCzIaLk5CU0dhbWUuUEIuQ2hhdFBs",
            "YXllckluZm8SEQoJdGltZXN0YW1wGAIgASgDEgwKBHR5cGUYAyABKAUSDwoH",
            "Y29udGVudBgEIAEoCRIqCgpvY2N1cHlUZXh0GAUgASgLMhYuTkJTR2FtZS5Q",
            "Qi5Db21tb25UZXh0Ei4KCnNoYXJlVHJvb3AYBiABKAsyGi5OQlNHYW1lLlBC",
            "LlNoYXJlVHJvb3BJbmZvEjAKC3NoYXJlUmVwb3J0GAcgASgLMhsuTkJTR2Ft",
            "ZS5QQi5TaGFyZVJlcG9ydEluZm8SKgoKc3lzdGVtVGV4dBgIIAEoCzIWLk5C",
            "U0dhbWUuUEIuQ29tbW9uVGV4dCJZCg5TaGFyZVRyb29wSW5mbxIUCgx0cm9v",
            "cFNoYXJlSWQYASABKAMSMQoLb2ZmaWNlckluZm8YAiADKAsyHC5OQlNHYW1l",
            "LlBCLlNoYXJlT2ZmaWNlckluZm8i0QEKD1NoYXJlUmVwb3J0SW5mbxIQCghy",
            "ZXBvcnRJZBgBIAEoAxIMCgRzaWRlGAIgASgFEhYKDmxlZnRQbGF5ZXJOYW1l",
            "GAMgASgJEjUKD2xlZnRPZmZpY2VySW5mbxgEIAEoCzIcLk5CU0dhbWUuUEIu",
            "U2hhcmVPZmZpY2VySW5mbxIXCg9yaWdodFBsYXllck5hbWUYBSABKAkSNgoQ",
            "cmlnaHRPZmZpY2VySW5mbxgGIAEoCzIcLk5CU0dhbWUuUEIuU2hhcmVPZmZp",
            "Y2VySW5mbyJmChBTaGFyZU9mZmljZXJJbmZvEg0KBXByb0lkGAEgASgFEg8K",
            "B3F1YWxpdHkYAiABKAUSDQoFbGV2ZWwYAyABKAUSEQoJc3RhckxldmVsGAQg",
            "ASgFEhAKCHBvc2l0aW9uGAUgASgFIoABCg5DaGF0UGxheWVySW5mbxIQCghw",
            "bGF5ZXJJZBgBIAEoAxIMCgRuYW1lGAIgASgJEg4KBmF2YXRhchgDIAEoBRIO",
            "CgZyZWdpb24YBCABKAUSFAoMYWxsaWFuY2VOYW1lGAUgASgJEhgKEGFsbGlh",
            "bmNlUG9zaXRpb24YBiABKAUingIKElZpZXdBcHBvaW50T2ZmaWNlchIRCglv",
            "ZmZpY2VySWQYASABKAMSFAoMb2ZmaWNlclByb0lkGAIgASgFEhAKCHBvbGl0",
            "aWNzGAMgASgBEhAKCGNoYXJpc21hGAQgASgBEhAKCHNraWxsSWQxGAUgASgF",
            "EhMKC3NraWxsTGV2ZWwxGAYgASgFEhAKCHNraWxsSWQyGAcgASgFEhMKC3Nr",
            "aWxsTGV2ZWwyGAggASgFEhAKCHNraWxsSWQzGAkgASgFEhMKC3NraWxsTGV2",
            "ZWwzGAogASgFEhYKDmFkZGl0aW9uVmFsdWUxGAsgASgBEhYKDmFkZGl0aW9u",
            "VmFsdWUyGAwgASgBEhYKDmFkZGl0aW9uVmFsdWUzGA0gASgBIkoKCkNvbW1v",
            "blRleHQSDwoHdGV4dEtleRgBIAEoBRIrCgZwYXJhbXMYAiADKAsyGy5OQlNH",
            "YW1lLlBCLkNvbW1vblRleHRQYXJhbSJPCg9Db21tb25UZXh0UGFyYW0SLQoE",
            "dHlwZRgBIAEoDjIfLk5CU0dhbWUuUEIuQ29tbW9uVGV4dFBhcmFtVHlwZRIN",
            "CgV2YWx1ZRgCIAEoCSLRAgoNVHJvb3BJbmZvTGlzdBIPCgd0cm9vcElkGAEg",
            "ASgDEgwKBHNvcnQYAiABKAUSDwoHZmFjdGlvbhgDIAEoBRINCgVwcm9JZBgE",
            "IAEoBRIQCghpc0F3YWtlbhgFIAEoCBIPCgdxdWFsaXR5GAYgASgFEhEKCXN0",
            "YXJMZXZlbBgHIAEoBRINCgVsZXZlbBgIIAEoBRIRCglhcm15Q2xhc3MYCiAB",
            "KAUSEgoKYXJteUFtb3VudBgLIAEoBRIXCg90d29PZmZpY2VyUHJvSWQYDiAB",
            "KAUSGQoRdGhyZWVPZmZpY2VyUHJvSWQYDyABKAUSEgoKaXNUcm9vcEV4cBgQ",
            "IAEoCBIbChNjb25zY3JpcHRGaW5pc2hUaW1lGBEgASgDEhcKD3dvdW5kRmlu",
            "aXNoVGltZRgSIAEoAxIXCg92aWdvckVub3VnaFRpbWUYEyABKAMqrwMKE0Nv",
            "bW1vblRleHRQYXJhbVR5cGUSCgoGQ09NTU9OEAASFwoTQkFUVExFX09GRklD",
            "RVJfSU5GTxABEgsKB1RFQ0hfSUQQAhIMCghTS0lMTF9JRBADEgsKB0ZBQ1RJ",
            "T04QBBILCgdBUk1ZX0lEEAUSFQoRT0ZGSUNFUl9BVFRSSUJVVEUQBhILCgdC",
            "VUZGX0lEEAcSCwoHVE9XTl9JRBAIEg0KCVRPV05fVFlQRRAJEhUKEUFMTElB",
            "TkNFX1BPU0lUSU9OEAoSCgoGUkVHSU9OEAsSCwoHQ0VMTF9JRBAMEg4KCk9G",
            "RklDRVJfSUQQDRIMCghOUENfSU5GTxAOEgsKB0lURU1fSUQQDxIUChBPRkZJ",
            "Q0VSX0lEX0NPTE9SEBASFwoTQlVGRl9BVFRSSUJVVEVfVFlQRRAREhEKDVJF",
            "U09VUkNFX1RZUEUQEhIUChBFUVVJUE1FTlRfUFJPX0lEEBMSCgoGR0VOREVS",
            "EBQSDQoJQlVGRl9UWVBFEBUSDgoKQVJNWV9DTEFTUxAWEg8KC01BVEVSSUFM",
            "X0lEEBcSDwoLQlVJTERJTkdfSUQQGEI2CiRjb20ucmhlYS5wSUlJLmdhbWUu",
            "Y29yZS5jbWQucHJvdG9jb2xCDkNvbW1vblByb3RvY29sYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NBSGame.PB.CommonTextParamType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.TroopDetail), global::NBSGame.PB.TroopDetail.Parser, new[]{ "TroopId", "OfficerProId", "ArmyClass", "ArmyAmount", "ArmyAmountMax", "Status", "MarchMission", "CellId", "Action", "ActionFinishTime", "Speed", "MarchFinishTime", "Morale", "MoraleMax", "Vigor", "VigorMax", "VigorMin", "StartCellId", "StartRegion", "EndCellId", "EndRegion", "IsWound", "ConscriptFinishTime", "BelongCityId", "WoundArmyAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.OtherTroopDetail), global::NBSGame.PB.OtherTroopDetail.Parser, new[]{ "PlayerId", "PlayerName", "Status", "MarchMission", "Action", "StartCellId", "StartRegion", "EndCellId", "EndRegion", "TroopId", "CellId", "Relation", "ActionFinishTime", "MarchFinishTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.Transfer), global::NBSGame.PB.Transfer.Parser, new[]{ "Target", "Tab", "Content", "CityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.CommonReward), global::NBSGame.PB.CommonReward.Parser, new[]{ "Type", "ProId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.EquipmentReward), global::NBSGame.PB.EquipmentReward.Parser, new[]{ "ProId", "Attack", "Intelligence", "Leadership", "Speed", "Politics", "Charisma", "FirstSkillId", "SecondSkillId", "ThirdSkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.RewardInfo), global::NBSGame.PB.RewardInfo.Parser, new[]{ "EquipmentReward", "ItemReward", "MessageReward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.MsgItem), global::NBSGame.PB.MsgItem.Parser, new[]{ "PlayerInfo", "Timestamp", "Type", "Content", "OccupyText", "ShareTroop", "ShareReport", "SystemText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.ShareTroopInfo), global::NBSGame.PB.ShareTroopInfo.Parser, new[]{ "TroopShareId", "OfficerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.ShareReportInfo), global::NBSGame.PB.ShareReportInfo.Parser, new[]{ "ReportId", "Side", "LeftPlayerName", "LeftOfficerInfo", "RightPlayerName", "RightOfficerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.ShareOfficerInfo), global::NBSGame.PB.ShareOfficerInfo.Parser, new[]{ "ProId", "Quality", "Level", "StarLevel", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.ChatPlayerInfo), global::NBSGame.PB.ChatPlayerInfo.Parser, new[]{ "PlayerId", "Name", "Avatar", "Region", "AllianceName", "AlliancePosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.ViewAppointOfficer), global::NBSGame.PB.ViewAppointOfficer.Parser, new[]{ "OfficerId", "OfficerProId", "Politics", "Charisma", "SkillId1", "SkillLevel1", "SkillId2", "SkillLevel2", "SkillId3", "SkillLevel3", "AdditionValue1", "AdditionValue2", "AdditionValue3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.CommonText), global::NBSGame.PB.CommonText.Parser, new[]{ "TextKey", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.CommonTextParam), global::NBSGame.PB.CommonTextParam.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.TroopInfoList), global::NBSGame.PB.TroopInfoList.Parser, new[]{ "TroopId", "Sort", "Faction", "ProId", "IsAwaken", "Quality", "StarLevel", "Level", "ArmyClass", "ArmyAmount", "TwoOfficerProId", "ThreeOfficerProId", "IsTroopExp", "ConscriptFinishTime", "WoundFinishTime", "VigorEnoughTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CommonTextParamType {
    /// <summary>
    /// 直接替换文本
    /// </summary>
    [pbr::OriginalName("COMMON")] Common = 0,
    /// <summary>
    /// 战斗军官信息，该类型值为“军官原型id|攻守方|兵种id”
    /// </summary>
    [pbr::OriginalName("BATTLE_OFFICER_INFO")] BattleOfficerInfo = 1,
    /// <summary>
    /// 科技id找名称
    /// </summary>
    [pbr::OriginalName("TECH_ID")] TechId = 2,
    /// <summary>
    /// 技能id找名称
    /// </summary>
    [pbr::OriginalName("SKILL_ID")] SkillId = 3,
    /// <summary>
    /// 军官阵营
    /// </summary>
    [pbr::OriginalName("FACTION")] Faction = 4,
    /// <summary>
    /// 兵种id找名称
    /// </summary>
    [pbr::OriginalName("ARMY_ID")] ArmyId = 5,
    /// <summary>
    /// 军官属性 1-武力 2-智力 3-統率 4-速度
    /// </summary>
    [pbr::OriginalName("OFFICER_ATTRIBUTE")] OfficerAttribute = 6,
    /// <summary>
    /// buffid找名称
    /// </summary>
    [pbr::OriginalName("BUFF_ID")] BuffId = 7,
    /// <summary>
    /// 据点id找名称
    /// </summary>
    [pbr::OriginalName("TOWN_ID")] TownId = 8,
    /// <summary>
    /// 据点类型找类型名称
    /// </summary>
    [pbr::OriginalName("TOWN_TYPE")] TownType = 9,
    /// <summary>
    /// 军团职位名称
    /// </summary>
    [pbr::OriginalName("ALLIANCE_POSITION")] AlliancePosition = 10,
    /// <summary>
    /// 洲名称
    /// </summary>
    [pbr::OriginalName("REGION")] Region = 11,
    /// <summary>
    /// 地图单元id转坐标
    /// </summary>
    [pbr::OriginalName("CELL_ID")] CellId = 12,
    /// <summary>
    /// 军官id转军官名
    /// </summary>
    [pbr::OriginalName("OFFICER_ID")] OfficerId = 13,
    /// <summary>
    /// NPC信息 该类型值为“npc类型|npcid|npc等级”
    /// </summary>
    [pbr::OriginalName("NPC_INFO")] NpcInfo = 14,
    /// <summary>
    /// 道具ID
    /// </summary>
    [pbr::OriginalName("ITEM_ID")] ItemId = 15,
    /// <summary>
    /// 军官id转军官名，按照品质显示不同颜色名字
    /// </summary>
    [pbr::OriginalName("OFFICER_ID_COLOR")] OfficerIdColor = 16,
    /// <summary>
    /// buff控制军官属性名称 1-統率 2-武力 3-智力 4-速度 5-会心 6-奇谋 7-主动战法几率 8-主动战法造成伤害 9-主动战法承受伤害 10-突击战法几率 11-突击战法造成伤害 12-突击战法受到伤害 13-造成兵刃伤害 14-造成谋略伤害 15-承受兵刃伤害 16-承受兵刃伤害 17-自带战法发动几率 18-战斗获取经验 19-会心效果伤害率 20-奇谋效果伤害率
    /// </summary>
    [pbr::OriginalName("BUFF_ATTRIBUTE_TYPE")] BuffAttributeType = 17,
    /// <summary>
    /// 资源类型，对应通用奖励里面类型为3的文字对应
    /// </summary>
    [pbr::OriginalName("RESOURCE_TYPE")] ResourceType = 18,
    /// <summary>
    /// 装备原型id，查找名称
    /// </summary>
    [pbr::OriginalName("EQUIPMENT_PRO_ID")] EquipmentProId = 19,
    /// <summary>
    /// 性别(0:男,1:女)
    /// </summary>
    [pbr::OriginalName("GENDER")] Gender = 20,
    /// <summary>
    /// buff类型
    /// </summary>
    [pbr::OriginalName("BUFF_TYPE")] BuffType = 21,
    /// <summary>
    /// 兵种类型找名称
    /// </summary>
    [pbr::OriginalName("ARMY_CLASS")] ArmyClass = 22,
    /// <summary>
    /// 材料原型id
    /// </summary>
    [pbr::OriginalName("MATERIAL_ID")] MaterialId = 23,
    /// <summary>
    /// 建筑id找名称
    /// </summary>
    [pbr::OriginalName("BUILDING_ID")] BuildingId = 24,
  }

  #endregion

  #region Messages
  public sealed partial class TroopDetail : pb::IMessage<TroopDetail> {
    private static readonly pb::MessageParser<TroopDetail> _parser = new pb::MessageParser<TroopDetail>(() => new TroopDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroopDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopDetail(TroopDetail other) : this() {
      troopId_ = other.troopId_;
      officerProId_ = other.officerProId_;
      armyClass_ = other.armyClass_;
      armyAmount_ = other.armyAmount_;
      armyAmountMax_ = other.armyAmountMax_;
      status_ = other.status_;
      marchMission_ = other.marchMission_;
      cellId_ = other.cellId_;
      action_ = other.action_;
      actionFinishTime_ = other.actionFinishTime_;
      speed_ = other.speed_;
      marchFinishTime_ = other.marchFinishTime_;
      morale_ = other.morale_;
      moraleMax_ = other.moraleMax_;
      vigor_ = other.vigor_;
      vigorMax_ = other.vigorMax_;
      vigorMin_ = other.vigorMin_;
      startCellId_ = other.startCellId_;
      startRegion_ = other.startRegion_;
      endCellId_ = other.endCellId_;
      endRegion_ = other.endRegion_;
      isWound_ = other.isWound_;
      conscriptFinishTime_ = other.conscriptFinishTime_;
      belongCityId_ = other.belongCityId_;
      woundArmyAmount_ = other.woundArmyAmount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopDetail Clone() {
      return new TroopDetail(this);
    }

    /// <summary>Field number for the "troopId" field.</summary>
    public const int TroopIdFieldNumber = 1;
    private long troopId_;
    /// <summary>
    /// 部队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "officerProId" field.</summary>
    public const int OfficerProIdFieldNumber = 2;
    private int officerProId_;
    /// <summary>
    /// 部队名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfficerProId {
      get { return officerProId_; }
      set {
        officerProId_ = value;
      }
    }

    /// <summary>Field number for the "armyClass" field.</summary>
    public const int ArmyClassFieldNumber = 3;
    private int armyClass_;
    /// <summary>
    /// 兵种类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArmyClass {
      get { return armyClass_; }
      set {
        armyClass_ = value;
      }
    }

    /// <summary>Field number for the "armyAmount" field.</summary>
    public const int ArmyAmountFieldNumber = 4;
    private int armyAmount_;
    /// <summary>
    /// 总带数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArmyAmount {
      get { return armyAmount_; }
      set {
        armyAmount_ = value;
      }
    }

    /// <summary>Field number for the "armyAmountMax" field.</summary>
    public const int ArmyAmountMaxFieldNumber = 5;
    private int armyAmountMax_;
    /// <summary>
    /// 带兵上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArmyAmountMax {
      get { return armyAmountMax_; }
      set {
        armyAmountMax_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private int status_;
    /// <summary>
    /// 部队状态(0待命，1行军，2停留，3调动，4驻守)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "marchMission" field.</summary>
    public const int MarchMissionFieldNumber = 7;
    private int marchMission_;
    /// <summary>
    /// 行军任务(-1无任务,0停留,1攻占,2攻城,3调动,4驻守,5扫荡,6屯田,7讨伐,8剿灭,9解救,10去撤退,11去回撤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarchMission {
      get { return marchMission_; }
      set {
        marchMission_ = value;
      }
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 8;
    private int cellId_;
    /// <summary>
    /// 部队所处坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 9;
    private int action_;
    /// <summary>
    /// 部队行为(-1无行为,0占领,1攻城,2战平,3阻挡,4屯田,5移动)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "actionFinishTime" field.</summary>
    public const int ActionFinishTimeFieldNumber = 10;
    private long actionFinishTime_;
    /// <summary>
    /// 部队行为结束时间点(-1：无行为)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActionFinishTime {
      get { return actionFinishTime_; }
      set {
        actionFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 11;
    private long speed_;
    /// <summary>
    /// 移动一格所用时间(-1：无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "marchFinishTime" field.</summary>
    public const int MarchFinishTimeFieldNumber = 12;
    private long marchFinishTime_;
    /// <summary>
    /// 行军结束时间点(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarchFinishTime {
      get { return marchFinishTime_; }
      set {
        marchFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "morale" field.</summary>
    public const int MoraleFieldNumber = 13;
    private int morale_;
    /// <summary>
    /// 士气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Morale {
      get { return morale_; }
      set {
        morale_ = value;
      }
    }

    /// <summary>Field number for the "moraleMax" field.</summary>
    public const int MoraleMaxFieldNumber = 14;
    private int moraleMax_;
    /// <summary>
    /// 士气上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoraleMax {
      get { return moraleMax_; }
      set {
        moraleMax_ = value;
      }
    }

    /// <summary>Field number for the "vigor" field.</summary>
    public const int VigorFieldNumber = 15;
    private int vigor_;
    /// <summary>
    /// 体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vigor {
      get { return vigor_; }
      set {
        vigor_ = value;
      }
    }

    /// <summary>Field number for the "vigorMax" field.</summary>
    public const int VigorMaxFieldNumber = 16;
    private int vigorMax_;
    /// <summary>
    /// 体力上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VigorMax {
      get { return vigorMax_; }
      set {
        vigorMax_ = value;
      }
    }

    /// <summary>Field number for the "vigorMin" field.</summary>
    public const int VigorMinFieldNumber = 17;
    private int vigorMin_;
    /// <summary>
    /// 最少出征体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VigorMin {
      get { return vigorMin_; }
      set {
        vigorMin_ = value;
      }
    }

    /// <summary>Field number for the "startCellId" field.</summary>
    public const int StartCellIdFieldNumber = 18;
    private int startCellId_;
    /// <summary>
    /// 起点坐标(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartCellId {
      get { return startCellId_; }
      set {
        startCellId_ = value;
      }
    }

    /// <summary>Field number for the "startRegion" field.</summary>
    public const int StartRegionFieldNumber = 19;
    private int startRegion_;
    /// <summary>
    /// 起点州(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartRegion {
      get { return startRegion_; }
      set {
        startRegion_ = value;
      }
    }

    /// <summary>Field number for the "endCellId" field.</summary>
    public const int EndCellIdFieldNumber = 20;
    private int endCellId_;
    /// <summary>
    /// 终点坐标(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndCellId {
      get { return endCellId_; }
      set {
        endCellId_ = value;
      }
    }

    /// <summary>Field number for the "endRegion" field.</summary>
    public const int EndRegionFieldNumber = 21;
    private int endRegion_;
    /// <summary>
    /// 终点州(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRegion {
      get { return endRegion_; }
      set {
        endRegion_ = value;
      }
    }

    /// <summary>Field number for the "isWound" field.</summary>
    public const int IsWoundFieldNumber = 22;
    private bool isWound_;
    /// <summary>
    /// 是否重伤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWound {
      get { return isWound_; }
      set {
        isWound_ = value;
      }
    }

    /// <summary>Field number for the "conscriptFinishTime" field.</summary>
    public const int ConscriptFinishTimeFieldNumber = 23;
    private long conscriptFinishTime_;
    /// <summary>
    /// 征兵结束时间点(-1为无征兵)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConscriptFinishTime {
      get { return conscriptFinishTime_; }
      set {
        conscriptFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "belongCityId" field.</summary>
    public const int BelongCityIdFieldNumber = 24;
    private long belongCityId_;
    /// <summary>
    /// 归属城市id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BelongCityId {
      get { return belongCityId_; }
      set {
        belongCityId_ = value;
      }
    }

    /// <summary>Field number for the "woundArmyAmount" field.</summary>
    public const int WoundArmyAmountFieldNumber = 25;
    private int woundArmyAmount_;
    /// <summary>
    /// 伤兵数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WoundArmyAmount {
      get { return woundArmyAmount_; }
      set {
        woundArmyAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroopDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroopDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TroopId != other.TroopId) return false;
      if (OfficerProId != other.OfficerProId) return false;
      if (ArmyClass != other.ArmyClass) return false;
      if (ArmyAmount != other.ArmyAmount) return false;
      if (ArmyAmountMax != other.ArmyAmountMax) return false;
      if (Status != other.Status) return false;
      if (MarchMission != other.MarchMission) return false;
      if (CellId != other.CellId) return false;
      if (Action != other.Action) return false;
      if (ActionFinishTime != other.ActionFinishTime) return false;
      if (Speed != other.Speed) return false;
      if (MarchFinishTime != other.MarchFinishTime) return false;
      if (Morale != other.Morale) return false;
      if (MoraleMax != other.MoraleMax) return false;
      if (Vigor != other.Vigor) return false;
      if (VigorMax != other.VigorMax) return false;
      if (VigorMin != other.VigorMin) return false;
      if (StartCellId != other.StartCellId) return false;
      if (StartRegion != other.StartRegion) return false;
      if (EndCellId != other.EndCellId) return false;
      if (EndRegion != other.EndRegion) return false;
      if (IsWound != other.IsWound) return false;
      if (ConscriptFinishTime != other.ConscriptFinishTime) return false;
      if (BelongCityId != other.BelongCityId) return false;
      if (WoundArmyAmount != other.WoundArmyAmount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (OfficerProId != 0) hash ^= OfficerProId.GetHashCode();
      if (ArmyClass != 0) hash ^= ArmyClass.GetHashCode();
      if (ArmyAmount != 0) hash ^= ArmyAmount.GetHashCode();
      if (ArmyAmountMax != 0) hash ^= ArmyAmountMax.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (MarchMission != 0) hash ^= MarchMission.GetHashCode();
      if (CellId != 0) hash ^= CellId.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (ActionFinishTime != 0L) hash ^= ActionFinishTime.GetHashCode();
      if (Speed != 0L) hash ^= Speed.GetHashCode();
      if (MarchFinishTime != 0L) hash ^= MarchFinishTime.GetHashCode();
      if (Morale != 0) hash ^= Morale.GetHashCode();
      if (MoraleMax != 0) hash ^= MoraleMax.GetHashCode();
      if (Vigor != 0) hash ^= Vigor.GetHashCode();
      if (VigorMax != 0) hash ^= VigorMax.GetHashCode();
      if (VigorMin != 0) hash ^= VigorMin.GetHashCode();
      if (StartCellId != 0) hash ^= StartCellId.GetHashCode();
      if (StartRegion != 0) hash ^= StartRegion.GetHashCode();
      if (EndCellId != 0) hash ^= EndCellId.GetHashCode();
      if (EndRegion != 0) hash ^= EndRegion.GetHashCode();
      if (IsWound != false) hash ^= IsWound.GetHashCode();
      if (ConscriptFinishTime != 0L) hash ^= ConscriptFinishTime.GetHashCode();
      if (BelongCityId != 0L) hash ^= BelongCityId.GetHashCode();
      if (WoundArmyAmount != 0) hash ^= WoundArmyAmount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TroopId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TroopId);
      }
      if (OfficerProId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OfficerProId);
      }
      if (ArmyClass != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ArmyClass);
      }
      if (ArmyAmount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ArmyAmount);
      }
      if (ArmyAmountMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ArmyAmountMax);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Status);
      }
      if (MarchMission != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MarchMission);
      }
      if (CellId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CellId);
      }
      if (Action != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Action);
      }
      if (ActionFinishTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ActionFinishTime);
      }
      if (Speed != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Speed);
      }
      if (MarchFinishTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(MarchFinishTime);
      }
      if (Morale != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Morale);
      }
      if (MoraleMax != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MoraleMax);
      }
      if (Vigor != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Vigor);
      }
      if (VigorMax != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(VigorMax);
      }
      if (VigorMin != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(VigorMin);
      }
      if (StartCellId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(StartCellId);
      }
      if (StartRegion != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(StartRegion);
      }
      if (EndCellId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(EndCellId);
      }
      if (EndRegion != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(EndRegion);
      }
      if (IsWound != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsWound);
      }
      if (ConscriptFinishTime != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(ConscriptFinishTime);
      }
      if (BelongCityId != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(BelongCityId);
      }
      if (WoundArmyAmount != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(WoundArmyAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (OfficerProId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfficerProId);
      }
      if (ArmyClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArmyClass);
      }
      if (ArmyAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArmyAmount);
      }
      if (ArmyAmountMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArmyAmountMax);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (MarchMission != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarchMission);
      }
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (ActionFinishTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActionFinishTime);
      }
      if (Speed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Speed);
      }
      if (MarchFinishTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MarchFinishTime);
      }
      if (Morale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Morale);
      }
      if (MoraleMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoraleMax);
      }
      if (Vigor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vigor);
      }
      if (VigorMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VigorMax);
      }
      if (VigorMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VigorMin);
      }
      if (StartCellId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartCellId);
      }
      if (StartRegion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartRegion);
      }
      if (EndCellId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndCellId);
      }
      if (EndRegion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndRegion);
      }
      if (IsWound != false) {
        size += 2 + 1;
      }
      if (ConscriptFinishTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ConscriptFinishTime);
      }
      if (BelongCityId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BelongCityId);
      }
      if (WoundArmyAmount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WoundArmyAmount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroopDetail other) {
      if (other == null) {
        return;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      if (other.OfficerProId != 0) {
        OfficerProId = other.OfficerProId;
      }
      if (other.ArmyClass != 0) {
        ArmyClass = other.ArmyClass;
      }
      if (other.ArmyAmount != 0) {
        ArmyAmount = other.ArmyAmount;
      }
      if (other.ArmyAmountMax != 0) {
        ArmyAmountMax = other.ArmyAmountMax;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.MarchMission != 0) {
        MarchMission = other.MarchMission;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.ActionFinishTime != 0L) {
        ActionFinishTime = other.ActionFinishTime;
      }
      if (other.Speed != 0L) {
        Speed = other.Speed;
      }
      if (other.MarchFinishTime != 0L) {
        MarchFinishTime = other.MarchFinishTime;
      }
      if (other.Morale != 0) {
        Morale = other.Morale;
      }
      if (other.MoraleMax != 0) {
        MoraleMax = other.MoraleMax;
      }
      if (other.Vigor != 0) {
        Vigor = other.Vigor;
      }
      if (other.VigorMax != 0) {
        VigorMax = other.VigorMax;
      }
      if (other.VigorMin != 0) {
        VigorMin = other.VigorMin;
      }
      if (other.StartCellId != 0) {
        StartCellId = other.StartCellId;
      }
      if (other.StartRegion != 0) {
        StartRegion = other.StartRegion;
      }
      if (other.EndCellId != 0) {
        EndCellId = other.EndCellId;
      }
      if (other.EndRegion != 0) {
        EndRegion = other.EndRegion;
      }
      if (other.IsWound != false) {
        IsWound = other.IsWound;
      }
      if (other.ConscriptFinishTime != 0L) {
        ConscriptFinishTime = other.ConscriptFinishTime;
      }
      if (other.BelongCityId != 0L) {
        BelongCityId = other.BelongCityId;
      }
      if (other.WoundArmyAmount != 0) {
        WoundArmyAmount = other.WoundArmyAmount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TroopId = input.ReadInt64();
            break;
          }
          case 16: {
            OfficerProId = input.ReadInt32();
            break;
          }
          case 24: {
            ArmyClass = input.ReadInt32();
            break;
          }
          case 32: {
            ArmyAmount = input.ReadInt32();
            break;
          }
          case 40: {
            ArmyAmountMax = input.ReadInt32();
            break;
          }
          case 48: {
            Status = input.ReadInt32();
            break;
          }
          case 56: {
            MarchMission = input.ReadInt32();
            break;
          }
          case 64: {
            CellId = input.ReadInt32();
            break;
          }
          case 72: {
            Action = input.ReadInt32();
            break;
          }
          case 80: {
            ActionFinishTime = input.ReadInt64();
            break;
          }
          case 88: {
            Speed = input.ReadInt64();
            break;
          }
          case 96: {
            MarchFinishTime = input.ReadInt64();
            break;
          }
          case 104: {
            Morale = input.ReadInt32();
            break;
          }
          case 112: {
            MoraleMax = input.ReadInt32();
            break;
          }
          case 120: {
            Vigor = input.ReadInt32();
            break;
          }
          case 128: {
            VigorMax = input.ReadInt32();
            break;
          }
          case 136: {
            VigorMin = input.ReadInt32();
            break;
          }
          case 144: {
            StartCellId = input.ReadInt32();
            break;
          }
          case 152: {
            StartRegion = input.ReadInt32();
            break;
          }
          case 160: {
            EndCellId = input.ReadInt32();
            break;
          }
          case 168: {
            EndRegion = input.ReadInt32();
            break;
          }
          case 176: {
            IsWound = input.ReadBool();
            break;
          }
          case 184: {
            ConscriptFinishTime = input.ReadInt64();
            break;
          }
          case 192: {
            BelongCityId = input.ReadInt64();
            break;
          }
          case 200: {
            WoundArmyAmount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OtherTroopDetail : pb::IMessage<OtherTroopDetail> {
    private static readonly pb::MessageParser<OtherTroopDetail> _parser = new pb::MessageParser<OtherTroopDetail>(() => new OtherTroopDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherTroopDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherTroopDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherTroopDetail(OtherTroopDetail other) : this() {
      playerId_ = other.playerId_;
      playerName_ = other.playerName_;
      status_ = other.status_;
      marchMission_ = other.marchMission_;
      action_ = other.action_;
      startCellId_ = other.startCellId_;
      startRegion_ = other.startRegion_;
      endCellId_ = other.endCellId_;
      endRegion_ = other.endRegion_;
      troopId_ = other.troopId_;
      cellId_ = other.cellId_;
      relation_ = other.relation_;
      actionFinishTime_ = other.actionFinishTime_;
      marchFinishTime_ = other.marchFinishTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherTroopDetail Clone() {
      return new OtherTroopDetail(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    /// <summary>
    /// 玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    /// 部队状态(0待命，1行军，2停留，3调动，4驻守)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "marchMission" field.</summary>
    public const int MarchMissionFieldNumber = 4;
    private int marchMission_;
    /// <summary>
    /// 行军任务(-1无任务,0停留,1攻占,2攻城,3调动,4驻守,5扫荡,6屯田,7讨伐,8剿灭,9解救,10去撤退,11去回撤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarchMission {
      get { return marchMission_; }
      set {
        marchMission_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 5;
    private int action_;
    /// <summary>
    /// 部队行为(-1无行为,0占领,1攻城,2战平,3阻挡,4屯田,5移动)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "startCellId" field.</summary>
    public const int StartCellIdFieldNumber = 6;
    private int startCellId_;
    /// <summary>
    /// 起点坐标(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartCellId {
      get { return startCellId_; }
      set {
        startCellId_ = value;
      }
    }

    /// <summary>Field number for the "startRegion" field.</summary>
    public const int StartRegionFieldNumber = 7;
    private int startRegion_;
    /// <summary>
    /// 起点州(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartRegion {
      get { return startRegion_; }
      set {
        startRegion_ = value;
      }
    }

    /// <summary>Field number for the "endCellId" field.</summary>
    public const int EndCellIdFieldNumber = 8;
    private int endCellId_;
    /// <summary>
    /// 终点坐标(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndCellId {
      get { return endCellId_; }
      set {
        endCellId_ = value;
      }
    }

    /// <summary>Field number for the "endRegion" field.</summary>
    public const int EndRegionFieldNumber = 9;
    private int endRegion_;
    /// <summary>
    /// 终点州(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRegion {
      get { return endRegion_; }
      set {
        endRegion_ = value;
      }
    }

    /// <summary>Field number for the "troopId" field.</summary>
    public const int TroopIdFieldNumber = 10;
    private long troopId_;
    /// <summary>
    /// 部队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 11;
    private int cellId_;
    /// <summary>
    /// 当前位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    /// <summary>Field number for the "relation" field.</summary>
    public const int RelationFieldNumber = 12;
    private int relation_;
    /// <summary>
    /// 关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Relation {
      get { return relation_; }
      set {
        relation_ = value;
      }
    }

    /// <summary>Field number for the "actionFinishTime" field.</summary>
    public const int ActionFinishTimeFieldNumber = 13;
    private long actionFinishTime_;
    /// <summary>
    /// 部队行为结束时间点(-1：无行为)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActionFinishTime {
      get { return actionFinishTime_; }
      set {
        actionFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "marchFinishTime" field.</summary>
    public const int MarchFinishTimeFieldNumber = 14;
    private long marchFinishTime_;
    /// <summary>
    /// 行军结束时间点(-1:无行军)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarchFinishTime {
      get { return marchFinishTime_; }
      set {
        marchFinishTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherTroopDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherTroopDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (PlayerName != other.PlayerName) return false;
      if (Status != other.Status) return false;
      if (MarchMission != other.MarchMission) return false;
      if (Action != other.Action) return false;
      if (StartCellId != other.StartCellId) return false;
      if (StartRegion != other.StartRegion) return false;
      if (EndCellId != other.EndCellId) return false;
      if (EndRegion != other.EndRegion) return false;
      if (TroopId != other.TroopId) return false;
      if (CellId != other.CellId) return false;
      if (Relation != other.Relation) return false;
      if (ActionFinishTime != other.ActionFinishTime) return false;
      if (MarchFinishTime != other.MarchFinishTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (MarchMission != 0) hash ^= MarchMission.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (StartCellId != 0) hash ^= StartCellId.GetHashCode();
      if (StartRegion != 0) hash ^= StartRegion.GetHashCode();
      if (EndCellId != 0) hash ^= EndCellId.GetHashCode();
      if (EndRegion != 0) hash ^= EndRegion.GetHashCode();
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (CellId != 0) hash ^= CellId.GetHashCode();
      if (Relation != 0) hash ^= Relation.GetHashCode();
      if (ActionFinishTime != 0L) hash ^= ActionFinishTime.GetHashCode();
      if (MarchFinishTime != 0L) hash ^= MarchFinishTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (MarchMission != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MarchMission);
      }
      if (Action != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Action);
      }
      if (StartCellId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StartCellId);
      }
      if (StartRegion != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartRegion);
      }
      if (EndCellId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EndCellId);
      }
      if (EndRegion != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EndRegion);
      }
      if (TroopId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TroopId);
      }
      if (CellId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CellId);
      }
      if (Relation != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Relation);
      }
      if (ActionFinishTime != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(ActionFinishTime);
      }
      if (MarchFinishTime != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(MarchFinishTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (MarchMission != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarchMission);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (StartCellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartCellId);
      }
      if (StartRegion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRegion);
      }
      if (EndCellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndCellId);
      }
      if (EndRegion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndRegion);
      }
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      if (Relation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Relation);
      }
      if (ActionFinishTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActionFinishTime);
      }
      if (MarchFinishTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MarchFinishTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherTroopDetail other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.MarchMission != 0) {
        MarchMission = other.MarchMission;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.StartCellId != 0) {
        StartCellId = other.StartCellId;
      }
      if (other.StartRegion != 0) {
        StartRegion = other.StartRegion;
      }
      if (other.EndCellId != 0) {
        EndCellId = other.EndCellId;
      }
      if (other.EndRegion != 0) {
        EndRegion = other.EndRegion;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
      if (other.Relation != 0) {
        Relation = other.Relation;
      }
      if (other.ActionFinishTime != 0L) {
        ActionFinishTime = other.ActionFinishTime;
      }
      if (other.MarchFinishTime != 0L) {
        MarchFinishTime = other.MarchFinishTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 32: {
            MarchMission = input.ReadInt32();
            break;
          }
          case 40: {
            Action = input.ReadInt32();
            break;
          }
          case 48: {
            StartCellId = input.ReadInt32();
            break;
          }
          case 56: {
            StartRegion = input.ReadInt32();
            break;
          }
          case 64: {
            EndCellId = input.ReadInt32();
            break;
          }
          case 72: {
            EndRegion = input.ReadInt32();
            break;
          }
          case 80: {
            TroopId = input.ReadInt64();
            break;
          }
          case 88: {
            CellId = input.ReadInt32();
            break;
          }
          case 96: {
            Relation = input.ReadInt32();
            break;
          }
          case 104: {
            ActionFinishTime = input.ReadInt64();
            break;
          }
          case 112: {
            MarchFinishTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transfer : pb::IMessage<Transfer> {
    private static readonly pb::MessageParser<Transfer> _parser = new pb::MessageParser<Transfer>(() => new Transfer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transfer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transfer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transfer(Transfer other) : this() {
      target_ = other.target_;
      tab_ = other.tab_;
      content_ = other.content_;
      cityId_ = other.cityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transfer Clone() {
      return new Transfer(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private string target_ = "";
    /// <summary>
    /// 跳转目标(-1为无跳转，直接显示内容文字)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tab" field.</summary>
    public const int TabFieldNumber = 2;
    private string tab_ = "";
    /// <summary>
    /// tab页(可以为空)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tab {
      get { return tab_; }
      set {
        tab_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    /// <summary>
    /// 内容(文字或者具体焦点索引)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cityId" field.</summary>
    public const int CityIdFieldNumber = 4;
    private long cityId_;
    /// <summary>
    /// cityId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transfer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transfer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Target != other.Target) return false;
      if (Tab != other.Tab) return false;
      if (Content != other.Content) return false;
      if (CityId != other.CityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (Tab.Length != 0) hash ^= Tab.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (CityId != 0L) hash ^= CityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Target.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Target);
      }
      if (Tab.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tab);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (CityId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (Tab.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tab);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (CityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transfer other) {
      if (other == null) {
        return;
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      if (other.Tab.Length != 0) {
        Tab = other.Tab;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.CityId != 0L) {
        CityId = other.CityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Target = input.ReadString();
            break;
          }
          case 18: {
            Tab = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            CityId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonReward : pb::IMessage<CommonReward> {
    private static readonly pb::MessageParser<CommonReward> _parser = new pb::MessageParser<CommonReward>(() => new CommonReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReward(CommonReward other) : this() {
      type_ = other.type_;
      proId_ = other.proId_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReward Clone() {
      return new CommonReward(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 类型(0-角色;1-道具;2-装备;3-资源;4-军官;5-材料;6-将池)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "proId" field.</summary>
    public const int ProIdFieldNumber = 2;
    private int proId_;
    /// <summary>
    /// 原型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProId {
      get { return proId_; }
      set {
        proId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private int amount_;
    /// <summary>
    /// 数量(数量为-1时不显示数量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ProId != other.ProId) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ProId != 0) hash ^= ProId.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (ProId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ProId);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ProId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonReward other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ProId != 0) {
        ProId = other.ProId;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            ProId = input.ReadInt32();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipmentReward : pb::IMessage<EquipmentReward> {
    private static readonly pb::MessageParser<EquipmentReward> _parser = new pb::MessageParser<EquipmentReward>(() => new EquipmentReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentReward(EquipmentReward other) : this() {
      proId_ = other.proId_;
      attack_ = other.attack_;
      intelligence_ = other.intelligence_;
      leadership_ = other.leadership_;
      speed_ = other.speed_;
      politics_ = other.politics_;
      charisma_ = other.charisma_;
      firstSkillId_ = other.firstSkillId_;
      secondSkillId_ = other.secondSkillId_;
      thirdSkillId_ = other.thirdSkillId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentReward Clone() {
      return new EquipmentReward(this);
    }

    /// <summary>Field number for the "proId" field.</summary>
    public const int ProIdFieldNumber = 1;
    private int proId_;
    /// <summary>
    /// 原型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProId {
      get { return proId_; }
      set {
        proId_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 2;
    private double attack_;
    /// <summary>
    /// 无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "intelligence" field.</summary>
    public const int IntelligenceFieldNumber = 3;
    private double intelligence_;
    /// <summary>
    /// 无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Intelligence {
      get { return intelligence_; }
      set {
        intelligence_ = value;
      }
    }

    /// <summary>Field number for the "leadership" field.</summary>
    public const int LeadershipFieldNumber = 4;
    private double leadership_;
    /// <summary>
    /// 无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Leadership {
      get { return leadership_; }
      set {
        leadership_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private double speed_;
    /// <summary>
    /// 无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "politics" field.</summary>
    public const int PoliticsFieldNumber = 6;
    private double politics_;
    /// <summary>
    /// 无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Politics {
      get { return politics_; }
      set {
        politics_ = value;
      }
    }

    /// <summary>Field number for the "charisma" field.</summary>
    public const int CharismaFieldNumber = 7;
    private double charisma_;
    /// <summary>
    /// 无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Charisma {
      get { return charisma_; }
      set {
        charisma_ = value;
      }
    }

    /// <summary>Field number for the "firstSkillId" field.</summary>
    public const int FirstSkillIdFieldNumber = 8;
    private int firstSkillId_;
    /// <summary>
    /// 第1技能id,无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstSkillId {
      get { return firstSkillId_; }
      set {
        firstSkillId_ = value;
      }
    }

    /// <summary>Field number for the "secondSkillId" field.</summary>
    public const int SecondSkillIdFieldNumber = 9;
    private int secondSkillId_;
    /// <summary>
    /// 第2技能id,无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondSkillId {
      get { return secondSkillId_; }
      set {
        secondSkillId_ = value;
      }
    }

    /// <summary>Field number for the "thirdSkillId" field.</summary>
    public const int ThirdSkillIdFieldNumber = 10;
    private int thirdSkillId_;
    /// <summary>
    /// 第3技能id,无数值为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThirdSkillId {
      get { return thirdSkillId_; }
      set {
        thirdSkillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipmentReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipmentReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProId != other.ProId) return false;
      if (Attack != other.Attack) return false;
      if (Intelligence != other.Intelligence) return false;
      if (Leadership != other.Leadership) return false;
      if (Speed != other.Speed) return false;
      if (Politics != other.Politics) return false;
      if (Charisma != other.Charisma) return false;
      if (FirstSkillId != other.FirstSkillId) return false;
      if (SecondSkillId != other.SecondSkillId) return false;
      if (ThirdSkillId != other.ThirdSkillId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProId != 0) hash ^= ProId.GetHashCode();
      if (Attack != 0D) hash ^= Attack.GetHashCode();
      if (Intelligence != 0D) hash ^= Intelligence.GetHashCode();
      if (Leadership != 0D) hash ^= Leadership.GetHashCode();
      if (Speed != 0D) hash ^= Speed.GetHashCode();
      if (Politics != 0D) hash ^= Politics.GetHashCode();
      if (Charisma != 0D) hash ^= Charisma.GetHashCode();
      if (FirstSkillId != 0) hash ^= FirstSkillId.GetHashCode();
      if (SecondSkillId != 0) hash ^= SecondSkillId.GetHashCode();
      if (ThirdSkillId != 0) hash ^= ThirdSkillId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProId);
      }
      if (Attack != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Attack);
      }
      if (Intelligence != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Intelligence);
      }
      if (Leadership != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Leadership);
      }
      if (Speed != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Speed);
      }
      if (Politics != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Politics);
      }
      if (Charisma != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Charisma);
      }
      if (FirstSkillId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FirstSkillId);
      }
      if (SecondSkillId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SecondSkillId);
      }
      if (ThirdSkillId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ThirdSkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProId);
      }
      if (Attack != 0D) {
        size += 1 + 8;
      }
      if (Intelligence != 0D) {
        size += 1 + 8;
      }
      if (Leadership != 0D) {
        size += 1 + 8;
      }
      if (Speed != 0D) {
        size += 1 + 8;
      }
      if (Politics != 0D) {
        size += 1 + 8;
      }
      if (Charisma != 0D) {
        size += 1 + 8;
      }
      if (FirstSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstSkillId);
      }
      if (SecondSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondSkillId);
      }
      if (ThirdSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThirdSkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipmentReward other) {
      if (other == null) {
        return;
      }
      if (other.ProId != 0) {
        ProId = other.ProId;
      }
      if (other.Attack != 0D) {
        Attack = other.Attack;
      }
      if (other.Intelligence != 0D) {
        Intelligence = other.Intelligence;
      }
      if (other.Leadership != 0D) {
        Leadership = other.Leadership;
      }
      if (other.Speed != 0D) {
        Speed = other.Speed;
      }
      if (other.Politics != 0D) {
        Politics = other.Politics;
      }
      if (other.Charisma != 0D) {
        Charisma = other.Charisma;
      }
      if (other.FirstSkillId != 0) {
        FirstSkillId = other.FirstSkillId;
      }
      if (other.SecondSkillId != 0) {
        SecondSkillId = other.SecondSkillId;
      }
      if (other.ThirdSkillId != 0) {
        ThirdSkillId = other.ThirdSkillId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProId = input.ReadInt32();
            break;
          }
          case 17: {
            Attack = input.ReadDouble();
            break;
          }
          case 25: {
            Intelligence = input.ReadDouble();
            break;
          }
          case 33: {
            Leadership = input.ReadDouble();
            break;
          }
          case 41: {
            Speed = input.ReadDouble();
            break;
          }
          case 49: {
            Politics = input.ReadDouble();
            break;
          }
          case 57: {
            Charisma = input.ReadDouble();
            break;
          }
          case 64: {
            FirstSkillId = input.ReadInt32();
            break;
          }
          case 72: {
            SecondSkillId = input.ReadInt32();
            break;
          }
          case 80: {
            ThirdSkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RewardInfo : pb::IMessage<RewardInfo> {
    private static readonly pb::MessageParser<RewardInfo> _parser = new pb::MessageParser<RewardInfo>(() => new RewardInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo(RewardInfo other) : this() {
      equipmentReward_ = other.equipmentReward_.Clone();
      itemReward_ = other.itemReward_.Clone();
      messageReward_ = other.messageReward_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo Clone() {
      return new RewardInfo(this);
    }

    /// <summary>Field number for the "equipmentReward" field.</summary>
    public const int EquipmentRewardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.EquipmentReward> _repeated_equipmentReward_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.EquipmentReward.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.EquipmentReward> equipmentReward_ = new pbc::RepeatedField<global::NBSGame.PB.EquipmentReward>();
    /// <summary>
    /// 装备类奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.EquipmentReward> EquipmentReward {
      get { return equipmentReward_; }
    }

    /// <summary>Field number for the "itemReward" field.</summary>
    public const int ItemRewardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NBSGame.PB.CommonReward> _repeated_itemReward_codec
        = pb::FieldCodec.ForMessage(18, global::NBSGame.PB.CommonReward.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.CommonReward> itemReward_ = new pbc::RepeatedField<global::NBSGame.PB.CommonReward>();
    /// <summary>
    /// 道具类奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.CommonReward> ItemReward {
      get { return itemReward_; }
    }

    /// <summary>Field number for the "messageReward" field.</summary>
    public const int MessageRewardFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NBSGame.PB.CommonReward> _repeated_messageReward_codec
        = pb::FieldCodec.ForMessage(26, global::NBSGame.PB.CommonReward.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.CommonReward> messageReward_ = new pbc::RepeatedField<global::NBSGame.PB.CommonReward>();
    /// <summary>
    /// 文字类奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.CommonReward> MessageReward {
      get { return messageReward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!equipmentReward_.Equals(other.equipmentReward_)) return false;
      if(!itemReward_.Equals(other.itemReward_)) return false;
      if(!messageReward_.Equals(other.messageReward_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= equipmentReward_.GetHashCode();
      hash ^= itemReward_.GetHashCode();
      hash ^= messageReward_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equipmentReward_.WriteTo(output, _repeated_equipmentReward_codec);
      itemReward_.WriteTo(output, _repeated_itemReward_codec);
      messageReward_.WriteTo(output, _repeated_messageReward_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equipmentReward_.CalculateSize(_repeated_equipmentReward_codec);
      size += itemReward_.CalculateSize(_repeated_itemReward_codec);
      size += messageReward_.CalculateSize(_repeated_messageReward_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardInfo other) {
      if (other == null) {
        return;
      }
      equipmentReward_.Add(other.equipmentReward_);
      itemReward_.Add(other.itemReward_);
      messageReward_.Add(other.messageReward_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            equipmentReward_.AddEntriesFrom(input, _repeated_equipmentReward_codec);
            break;
          }
          case 18: {
            itemReward_.AddEntriesFrom(input, _repeated_itemReward_codec);
            break;
          }
          case 26: {
            messageReward_.AddEntriesFrom(input, _repeated_messageReward_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 聊天相关对象---------------------------------------
  /// </summary>
  public sealed partial class MsgItem : pb::IMessage<MsgItem> {
    private static readonly pb::MessageParser<MsgItem> _parser = new pb::MessageParser<MsgItem>(() => new MsgItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgItem(MsgItem other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      timestamp_ = other.timestamp_;
      type_ = other.type_;
      content_ = other.content_;
      OccupyText = other.occupyText_ != null ? other.OccupyText.Clone() : null;
      ShareTroop = other.shareTroop_ != null ? other.ShareTroop.Clone() : null;
      ShareReport = other.shareReport_ != null ? other.ShareReport.Clone() : null;
      SystemText = other.systemText_ != null ? other.SystemText.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgItem Clone() {
      return new MsgItem(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::NBSGame.PB.ChatPlayerInfo playerInfo_;
    /// <summary>
    /// 玩家信息 当类型为1时没有该信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.ChatPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    /// 时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 消息类型 0-普通消息【content】 1-占领消息 2-系统消息 3-战报分享 4-阵容分享
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    /// <summary>
    /// 普通聊天内容 类型为0时直接显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occupyText" field.</summary>
    public const int OccupyTextFieldNumber = 5;
    private global::NBSGame.PB.CommonText occupyText_;
    /// <summary>
    /// 占领文字消息，类型为1时有该值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.CommonText OccupyText {
      get { return occupyText_; }
      set {
        occupyText_ = value;
      }
    }

    /// <summary>Field number for the "shareTroop" field.</summary>
    public const int ShareTroopFieldNumber = 6;
    private global::NBSGame.PB.ShareTroopInfo shareTroop_;
    /// <summary>
    /// 分享阵容，类型为4时有该值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.ShareTroopInfo ShareTroop {
      get { return shareTroop_; }
      set {
        shareTroop_ = value;
      }
    }

    /// <summary>Field number for the "shareReport" field.</summary>
    public const int ShareReportFieldNumber = 7;
    private global::NBSGame.PB.ShareReportInfo shareReport_;
    /// <summary>
    /// 分享战报，类型为3时有该值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.ShareReportInfo ShareReport {
      get { return shareReport_; }
      set {
        shareReport_ = value;
      }
    }

    /// <summary>Field number for the "systemText" field.</summary>
    public const int SystemTextFieldNumber = 8;
    private global::NBSGame.PB.CommonText systemText_;
    /// <summary>
    /// 系统消息内容，类型为2时有该值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.CommonText SystemText {
      get { return systemText_; }
      set {
        systemText_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (!object.Equals(OccupyText, other.OccupyText)) return false;
      if (!object.Equals(ShareTroop, other.ShareTroop)) return false;
      if (!object.Equals(ShareReport, other.ShareReport)) return false;
      if (!object.Equals(SystemText, other.SystemText)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (occupyText_ != null) hash ^= OccupyText.GetHashCode();
      if (shareTroop_ != null) hash ^= ShareTroop.GetHashCode();
      if (shareReport_ != null) hash ^= ShareReport.GetHashCode();
      if (systemText_ != null) hash ^= SystemText.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      if (occupyText_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OccupyText);
      }
      if (shareTroop_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ShareTroop);
      }
      if (shareReport_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ShareReport);
      }
      if (systemText_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SystemText);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (occupyText_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OccupyText);
      }
      if (shareTroop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShareTroop);
      }
      if (shareReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShareReport);
      }
      if (systemText_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemText);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgItem other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::NBSGame.PB.ChatPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.occupyText_ != null) {
        if (occupyText_ == null) {
          occupyText_ = new global::NBSGame.PB.CommonText();
        }
        OccupyText.MergeFrom(other.OccupyText);
      }
      if (other.shareTroop_ != null) {
        if (shareTroop_ == null) {
          shareTroop_ = new global::NBSGame.PB.ShareTroopInfo();
        }
        ShareTroop.MergeFrom(other.ShareTroop);
      }
      if (other.shareReport_ != null) {
        if (shareReport_ == null) {
          shareReport_ = new global::NBSGame.PB.ShareReportInfo();
        }
        ShareReport.MergeFrom(other.ShareReport);
      }
      if (other.systemText_ != null) {
        if (systemText_ == null) {
          systemText_ = new global::NBSGame.PB.CommonText();
        }
        SystemText.MergeFrom(other.SystemText);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::NBSGame.PB.ChatPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 42: {
            if (occupyText_ == null) {
              occupyText_ = new global::NBSGame.PB.CommonText();
            }
            input.ReadMessage(occupyText_);
            break;
          }
          case 50: {
            if (shareTroop_ == null) {
              shareTroop_ = new global::NBSGame.PB.ShareTroopInfo();
            }
            input.ReadMessage(shareTroop_);
            break;
          }
          case 58: {
            if (shareReport_ == null) {
              shareReport_ = new global::NBSGame.PB.ShareReportInfo();
            }
            input.ReadMessage(shareReport_);
            break;
          }
          case 66: {
            if (systemText_ == null) {
              systemText_ = new global::NBSGame.PB.CommonText();
            }
            input.ReadMessage(systemText_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShareTroopInfo : pb::IMessage<ShareTroopInfo> {
    private static readonly pb::MessageParser<ShareTroopInfo> _parser = new pb::MessageParser<ShareTroopInfo>(() => new ShareTroopInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareTroopInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareTroopInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareTroopInfo(ShareTroopInfo other) : this() {
      troopShareId_ = other.troopShareId_;
      officerInfo_ = other.officerInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareTroopInfo Clone() {
      return new ShareTroopInfo(this);
    }

    /// <summary>Field number for the "troopShareId" field.</summary>
    public const int TroopShareIdFieldNumber = 1;
    private long troopShareId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopShareId {
      get { return troopShareId_; }
      set {
        troopShareId_ = value;
      }
    }

    /// <summary>Field number for the "officerInfo" field.</summary>
    public const int OfficerInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NBSGame.PB.ShareOfficerInfo> _repeated_officerInfo_codec
        = pb::FieldCodec.ForMessage(18, global::NBSGame.PB.ShareOfficerInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.ShareOfficerInfo> officerInfo_ = new pbc::RepeatedField<global::NBSGame.PB.ShareOfficerInfo>();
    /// <summary>
    /// 军团信息，按顺序 主将、副将、副将
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.ShareOfficerInfo> OfficerInfo {
      get { return officerInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareTroopInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareTroopInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TroopShareId != other.TroopShareId) return false;
      if(!officerInfo_.Equals(other.officerInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TroopShareId != 0L) hash ^= TroopShareId.GetHashCode();
      hash ^= officerInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TroopShareId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TroopShareId);
      }
      officerInfo_.WriteTo(output, _repeated_officerInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TroopShareId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopShareId);
      }
      size += officerInfo_.CalculateSize(_repeated_officerInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareTroopInfo other) {
      if (other == null) {
        return;
      }
      if (other.TroopShareId != 0L) {
        TroopShareId = other.TroopShareId;
      }
      officerInfo_.Add(other.officerInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TroopShareId = input.ReadInt64();
            break;
          }
          case 18: {
            officerInfo_.AddEntriesFrom(input, _repeated_officerInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShareReportInfo : pb::IMessage<ShareReportInfo> {
    private static readonly pb::MessageParser<ShareReportInfo> _parser = new pb::MessageParser<ShareReportInfo>(() => new ShareReportInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareReportInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareReportInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareReportInfo(ShareReportInfo other) : this() {
      reportId_ = other.reportId_;
      side_ = other.side_;
      leftPlayerName_ = other.leftPlayerName_;
      LeftOfficerInfo = other.leftOfficerInfo_ != null ? other.LeftOfficerInfo.Clone() : null;
      rightPlayerName_ = other.rightPlayerName_;
      RightOfficerInfo = other.rightOfficerInfo_ != null ? other.RightOfficerInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareReportInfo Clone() {
      return new ShareReportInfo(this);
    }

    /// <summary>Field number for the "reportId" field.</summary>
    public const int ReportIdFieldNumber = 1;
    private long reportId_;
    /// <summary>
    /// 战报id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private int side_;
    /// <summary>
    /// 攻守方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "leftPlayerName" field.</summary>
    public const int LeftPlayerNameFieldNumber = 3;
    private string leftPlayerName_ = "";
    /// <summary>
    /// 左玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeftPlayerName {
      get { return leftPlayerName_; }
      set {
        leftPlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leftOfficerInfo" field.</summary>
    public const int LeftOfficerInfoFieldNumber = 4;
    private global::NBSGame.PB.ShareOfficerInfo leftOfficerInfo_;
    /// <summary>
    /// 左主将信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.ShareOfficerInfo LeftOfficerInfo {
      get { return leftOfficerInfo_; }
      set {
        leftOfficerInfo_ = value;
      }
    }

    /// <summary>Field number for the "rightPlayerName" field.</summary>
    public const int RightPlayerNameFieldNumber = 5;
    private string rightPlayerName_ = "";
    /// <summary>
    /// 右玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RightPlayerName {
      get { return rightPlayerName_; }
      set {
        rightPlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rightOfficerInfo" field.</summary>
    public const int RightOfficerInfoFieldNumber = 6;
    private global::NBSGame.PB.ShareOfficerInfo rightOfficerInfo_;
    /// <summary>
    /// 右主将信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.ShareOfficerInfo RightOfficerInfo {
      get { return rightOfficerInfo_; }
      set {
        rightOfficerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareReportInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareReportInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportId != other.ReportId) return false;
      if (Side != other.Side) return false;
      if (LeftPlayerName != other.LeftPlayerName) return false;
      if (!object.Equals(LeftOfficerInfo, other.LeftOfficerInfo)) return false;
      if (RightPlayerName != other.RightPlayerName) return false;
      if (!object.Equals(RightOfficerInfo, other.RightOfficerInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportId != 0L) hash ^= ReportId.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (LeftPlayerName.Length != 0) hash ^= LeftPlayerName.GetHashCode();
      if (leftOfficerInfo_ != null) hash ^= LeftOfficerInfo.GetHashCode();
      if (RightPlayerName.Length != 0) hash ^= RightPlayerName.GetHashCode();
      if (rightOfficerInfo_ != null) hash ^= RightOfficerInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReportId);
      }
      if (Side != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Side);
      }
      if (LeftPlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LeftPlayerName);
      }
      if (leftOfficerInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LeftOfficerInfo);
      }
      if (RightPlayerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RightPlayerName);
      }
      if (rightOfficerInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RightOfficerInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Side);
      }
      if (LeftPlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeftPlayerName);
      }
      if (leftOfficerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftOfficerInfo);
      }
      if (RightPlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RightPlayerName);
      }
      if (rightOfficerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightOfficerInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareReportInfo other) {
      if (other == null) {
        return;
      }
      if (other.ReportId != 0L) {
        ReportId = other.ReportId;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.LeftPlayerName.Length != 0) {
        LeftPlayerName = other.LeftPlayerName;
      }
      if (other.leftOfficerInfo_ != null) {
        if (leftOfficerInfo_ == null) {
          leftOfficerInfo_ = new global::NBSGame.PB.ShareOfficerInfo();
        }
        LeftOfficerInfo.MergeFrom(other.LeftOfficerInfo);
      }
      if (other.RightPlayerName.Length != 0) {
        RightPlayerName = other.RightPlayerName;
      }
      if (other.rightOfficerInfo_ != null) {
        if (rightOfficerInfo_ == null) {
          rightOfficerInfo_ = new global::NBSGame.PB.ShareOfficerInfo();
        }
        RightOfficerInfo.MergeFrom(other.RightOfficerInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReportId = input.ReadInt64();
            break;
          }
          case 16: {
            Side = input.ReadInt32();
            break;
          }
          case 26: {
            LeftPlayerName = input.ReadString();
            break;
          }
          case 34: {
            if (leftOfficerInfo_ == null) {
              leftOfficerInfo_ = new global::NBSGame.PB.ShareOfficerInfo();
            }
            input.ReadMessage(leftOfficerInfo_);
            break;
          }
          case 42: {
            RightPlayerName = input.ReadString();
            break;
          }
          case 50: {
            if (rightOfficerInfo_ == null) {
              rightOfficerInfo_ = new global::NBSGame.PB.ShareOfficerInfo();
            }
            input.ReadMessage(rightOfficerInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShareOfficerInfo : pb::IMessage<ShareOfficerInfo> {
    private static readonly pb::MessageParser<ShareOfficerInfo> _parser = new pb::MessageParser<ShareOfficerInfo>(() => new ShareOfficerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareOfficerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareOfficerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareOfficerInfo(ShareOfficerInfo other) : this() {
      proId_ = other.proId_;
      quality_ = other.quality_;
      level_ = other.level_;
      starLevel_ = other.starLevel_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareOfficerInfo Clone() {
      return new ShareOfficerInfo(this);
    }

    /// <summary>Field number for the "proId" field.</summary>
    public const int ProIdFieldNumber = 1;
    private int proId_;
    /// <summary>
    /// 原型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProId {
      get { return proId_; }
      set {
        proId_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 2;
    private int quality_;
    /// <summary>
    /// 品质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "starLevel" field.</summary>
    public const int StarLevelFieldNumber = 4;
    private int starLevel_;
    /// <summary>
    /// 进阶等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private int position_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareOfficerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareOfficerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProId != other.ProId) return false;
      if (Quality != other.Quality) return false;
      if (Level != other.Level) return false;
      if (StarLevel != other.StarLevel) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProId != 0) hash ^= ProId.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (StarLevel != 0) hash ^= StarLevel.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProId);
      }
      if (Quality != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quality);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StarLevel);
      }
      if (Position != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProId);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLevel);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareOfficerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ProId != 0) {
        ProId = other.ProId;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.StarLevel != 0) {
        StarLevel = other.StarLevel;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProId = input.ReadInt32();
            break;
          }
          case 16: {
            Quality = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            StarLevel = input.ReadInt32();
            break;
          }
          case 40: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatPlayerInfo : pb::IMessage<ChatPlayerInfo> {
    private static readonly pb::MessageParser<ChatPlayerInfo> _parser = new pb::MessageParser<ChatPlayerInfo>(() => new ChatPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatPlayerInfo(ChatPlayerInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      region_ = other.region_;
      allianceName_ = other.allianceName_;
      alliancePosition_ = other.alliancePosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatPlayerInfo Clone() {
      return new ChatPlayerInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private int avatar_;
    /// <summary>
    /// 玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 4;
    private int region_;
    /// <summary>
    /// 玩家所在分区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "allianceName" field.</summary>
    public const int AllianceNameFieldNumber = 5;
    private string allianceName_ = "";
    /// <summary>
    /// 玩家军团名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceName {
      get { return allianceName_; }
      set {
        allianceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alliancePosition" field.</summary>
    public const int AlliancePositionFieldNumber = 6;
    private int alliancePosition_;
    /// <summary>
    /// 军团职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlliancePosition {
      get { return alliancePosition_; }
      set {
        alliancePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (Region != other.Region) return false;
      if (AllianceName != other.AllianceName) return false;
      if (AlliancePosition != other.AlliancePosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar != 0) hash ^= Avatar.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (AllianceName.Length != 0) hash ^= AllianceName.GetHashCode();
      if (AlliancePosition != 0) hash ^= AlliancePosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Avatar);
      }
      if (Region != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Region);
      }
      if (AllianceName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AllianceName);
      }
      if (AlliancePosition != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AlliancePosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Avatar);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (AllianceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceName);
      }
      if (AlliancePosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlliancePosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar != 0) {
        Avatar = other.Avatar;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.AllianceName.Length != 0) {
        AllianceName = other.AllianceName;
      }
      if (other.AlliancePosition != 0) {
        AlliancePosition = other.AlliancePosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Avatar = input.ReadInt32();
            break;
          }
          case 32: {
            Region = input.ReadInt32();
            break;
          }
          case 42: {
            AllianceName = input.ReadString();
            break;
          }
          case 48: {
            AlliancePosition = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 委任军官信息
  /// </summary>
  public sealed partial class ViewAppointOfficer : pb::IMessage<ViewAppointOfficer> {
    private static readonly pb::MessageParser<ViewAppointOfficer> _parser = new pb::MessageParser<ViewAppointOfficer>(() => new ViewAppointOfficer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewAppointOfficer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewAppointOfficer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewAppointOfficer(ViewAppointOfficer other) : this() {
      officerId_ = other.officerId_;
      officerProId_ = other.officerProId_;
      politics_ = other.politics_;
      charisma_ = other.charisma_;
      skillId1_ = other.skillId1_;
      skillLevel1_ = other.skillLevel1_;
      skillId2_ = other.skillId2_;
      skillLevel2_ = other.skillLevel2_;
      skillId3_ = other.skillId3_;
      skillLevel3_ = other.skillLevel3_;
      additionValue1_ = other.additionValue1_;
      additionValue2_ = other.additionValue2_;
      additionValue3_ = other.additionValue3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewAppointOfficer Clone() {
      return new ViewAppointOfficer(this);
    }

    /// <summary>Field number for the "officerId" field.</summary>
    public const int OfficerIdFieldNumber = 1;
    private long officerId_;
    /// <summary>
    /// 军官id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfficerId {
      get { return officerId_; }
      set {
        officerId_ = value;
      }
    }

    /// <summary>Field number for the "officerProId" field.</summary>
    public const int OfficerProIdFieldNumber = 2;
    private int officerProId_;
    /// <summary>
    /// 军官原型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfficerProId {
      get { return officerProId_; }
      set {
        officerProId_ = value;
      }
    }

    /// <summary>Field number for the "politics" field.</summary>
    public const int PoliticsFieldNumber = 3;
    private double politics_;
    /// <summary>
    /// 政治(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Politics {
      get { return politics_; }
      set {
        politics_ = value;
      }
    }

    /// <summary>Field number for the "charisma" field.</summary>
    public const int CharismaFieldNumber = 4;
    private double charisma_;
    /// <summary>
    /// 魅力(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Charisma {
      get { return charisma_; }
      set {
        charisma_ = value;
      }
    }

    /// <summary>Field number for the "skillId1" field.</summary>
    public const int SkillId1FieldNumber = 5;
    private int skillId1_;
    /// <summary>
    /// 加成技能1原型id(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId1 {
      get { return skillId1_; }
      set {
        skillId1_ = value;
      }
    }

    /// <summary>Field number for the "skillLevel1" field.</summary>
    public const int SkillLevel1FieldNumber = 6;
    private int skillLevel1_;
    /// <summary>
    /// 技能等级(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLevel1 {
      get { return skillLevel1_; }
      set {
        skillLevel1_ = value;
      }
    }

    /// <summary>Field number for the "skillId2" field.</summary>
    public const int SkillId2FieldNumber = 7;
    private int skillId2_;
    /// <summary>
    /// 加成技能2原型id(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId2 {
      get { return skillId2_; }
      set {
        skillId2_ = value;
      }
    }

    /// <summary>Field number for the "skillLevel2" field.</summary>
    public const int SkillLevel2FieldNumber = 8;
    private int skillLevel2_;
    /// <summary>
    /// 技能等级(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLevel2 {
      get { return skillLevel2_; }
      set {
        skillLevel2_ = value;
      }
    }

    /// <summary>Field number for the "skillId3" field.</summary>
    public const int SkillId3FieldNumber = 9;
    private int skillId3_;
    /// <summary>
    /// 加成技能3原型id(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId3 {
      get { return skillId3_; }
      set {
        skillId3_ = value;
      }
    }

    /// <summary>Field number for the "skillLevel3" field.</summary>
    public const int SkillLevel3FieldNumber = 10;
    private int skillLevel3_;
    /// <summary>
    /// 技能等级(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLevel3 {
      get { return skillLevel3_; }
      set {
        skillLevel3_ = value;
      }
    }

    /// <summary>Field number for the "additionValue1" field.</summary>
    public const int AdditionValue1FieldNumber = 11;
    private double additionValue1_;
    /// <summary>
    /// 加成值1(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdditionValue1 {
      get { return additionValue1_; }
      set {
        additionValue1_ = value;
      }
    }

    /// <summary>Field number for the "additionValue2" field.</summary>
    public const int AdditionValue2FieldNumber = 12;
    private double additionValue2_;
    /// <summary>
    /// 加成值2(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdditionValue2 {
      get { return additionValue2_; }
      set {
        additionValue2_ = value;
      }
    }

    /// <summary>Field number for the "additionValue3" field.</summary>
    public const int AdditionValue3FieldNumber = 13;
    private double additionValue3_;
    /// <summary>
    /// 加成值3(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdditionValue3 {
      get { return additionValue3_; }
      set {
        additionValue3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewAppointOfficer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewAppointOfficer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OfficerId != other.OfficerId) return false;
      if (OfficerProId != other.OfficerProId) return false;
      if (Politics != other.Politics) return false;
      if (Charisma != other.Charisma) return false;
      if (SkillId1 != other.SkillId1) return false;
      if (SkillLevel1 != other.SkillLevel1) return false;
      if (SkillId2 != other.SkillId2) return false;
      if (SkillLevel2 != other.SkillLevel2) return false;
      if (SkillId3 != other.SkillId3) return false;
      if (SkillLevel3 != other.SkillLevel3) return false;
      if (AdditionValue1 != other.AdditionValue1) return false;
      if (AdditionValue2 != other.AdditionValue2) return false;
      if (AdditionValue3 != other.AdditionValue3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OfficerId != 0L) hash ^= OfficerId.GetHashCode();
      if (OfficerProId != 0) hash ^= OfficerProId.GetHashCode();
      if (Politics != 0D) hash ^= Politics.GetHashCode();
      if (Charisma != 0D) hash ^= Charisma.GetHashCode();
      if (SkillId1 != 0) hash ^= SkillId1.GetHashCode();
      if (SkillLevel1 != 0) hash ^= SkillLevel1.GetHashCode();
      if (SkillId2 != 0) hash ^= SkillId2.GetHashCode();
      if (SkillLevel2 != 0) hash ^= SkillLevel2.GetHashCode();
      if (SkillId3 != 0) hash ^= SkillId3.GetHashCode();
      if (SkillLevel3 != 0) hash ^= SkillLevel3.GetHashCode();
      if (AdditionValue1 != 0D) hash ^= AdditionValue1.GetHashCode();
      if (AdditionValue2 != 0D) hash ^= AdditionValue2.GetHashCode();
      if (AdditionValue3 != 0D) hash ^= AdditionValue3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OfficerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OfficerId);
      }
      if (OfficerProId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OfficerProId);
      }
      if (Politics != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Politics);
      }
      if (Charisma != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Charisma);
      }
      if (SkillId1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkillId1);
      }
      if (SkillLevel1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkillLevel1);
      }
      if (SkillId2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SkillId2);
      }
      if (SkillLevel2 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SkillLevel2);
      }
      if (SkillId3 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SkillId3);
      }
      if (SkillLevel3 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SkillLevel3);
      }
      if (AdditionValue1 != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AdditionValue1);
      }
      if (AdditionValue2 != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AdditionValue2);
      }
      if (AdditionValue3 != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(AdditionValue3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OfficerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfficerId);
      }
      if (OfficerProId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfficerProId);
      }
      if (Politics != 0D) {
        size += 1 + 8;
      }
      if (Charisma != 0D) {
        size += 1 + 8;
      }
      if (SkillId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId1);
      }
      if (SkillLevel1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel1);
      }
      if (SkillId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId2);
      }
      if (SkillLevel2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel2);
      }
      if (SkillId3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId3);
      }
      if (SkillLevel3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel3);
      }
      if (AdditionValue1 != 0D) {
        size += 1 + 8;
      }
      if (AdditionValue2 != 0D) {
        size += 1 + 8;
      }
      if (AdditionValue3 != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewAppointOfficer other) {
      if (other == null) {
        return;
      }
      if (other.OfficerId != 0L) {
        OfficerId = other.OfficerId;
      }
      if (other.OfficerProId != 0) {
        OfficerProId = other.OfficerProId;
      }
      if (other.Politics != 0D) {
        Politics = other.Politics;
      }
      if (other.Charisma != 0D) {
        Charisma = other.Charisma;
      }
      if (other.SkillId1 != 0) {
        SkillId1 = other.SkillId1;
      }
      if (other.SkillLevel1 != 0) {
        SkillLevel1 = other.SkillLevel1;
      }
      if (other.SkillId2 != 0) {
        SkillId2 = other.SkillId2;
      }
      if (other.SkillLevel2 != 0) {
        SkillLevel2 = other.SkillLevel2;
      }
      if (other.SkillId3 != 0) {
        SkillId3 = other.SkillId3;
      }
      if (other.SkillLevel3 != 0) {
        SkillLevel3 = other.SkillLevel3;
      }
      if (other.AdditionValue1 != 0D) {
        AdditionValue1 = other.AdditionValue1;
      }
      if (other.AdditionValue2 != 0D) {
        AdditionValue2 = other.AdditionValue2;
      }
      if (other.AdditionValue3 != 0D) {
        AdditionValue3 = other.AdditionValue3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OfficerId = input.ReadInt64();
            break;
          }
          case 16: {
            OfficerProId = input.ReadInt32();
            break;
          }
          case 25: {
            Politics = input.ReadDouble();
            break;
          }
          case 33: {
            Charisma = input.ReadDouble();
            break;
          }
          case 40: {
            SkillId1 = input.ReadInt32();
            break;
          }
          case 48: {
            SkillLevel1 = input.ReadInt32();
            break;
          }
          case 56: {
            SkillId2 = input.ReadInt32();
            break;
          }
          case 64: {
            SkillLevel2 = input.ReadInt32();
            break;
          }
          case 72: {
            SkillId3 = input.ReadInt32();
            break;
          }
          case 80: {
            SkillLevel3 = input.ReadInt32();
            break;
          }
          case 89: {
            AdditionValue1 = input.ReadDouble();
            break;
          }
          case 97: {
            AdditionValue2 = input.ReadDouble();
            break;
          }
          case 105: {
            AdditionValue3 = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通用客户端文字对象---------------------------------------
  /// </summary>
  public sealed partial class CommonText : pb::IMessage<CommonText> {
    private static readonly pb::MessageParser<CommonText> _parser = new pb::MessageParser<CommonText>(() => new CommonText());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonText(CommonText other) : this() {
      textKey_ = other.textKey_;
      params_ = other.params_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonText Clone() {
      return new CommonText(this);
    }

    /// <summary>Field number for the "textKey" field.</summary>
    public const int TextKeyFieldNumber = 1;
    private int textKey_;
    /// <summary>
    /// 文字key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TextKey {
      get { return textKey_; }
      set {
        textKey_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NBSGame.PB.CommonTextParam> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::NBSGame.PB.CommonTextParam.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.CommonTextParam> params_ = new pbc::RepeatedField<global::NBSGame.PB.CommonTextParam>();
    /// <summary>
    /// 替换参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.CommonTextParam> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TextKey != other.TextKey) return false;
      if(!params_.Equals(other.params_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TextKey != 0) hash ^= TextKey.GetHashCode();
      hash ^= params_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TextKey != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TextKey);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TextKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TextKey);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonText other) {
      if (other == null) {
        return;
      }
      if (other.TextKey != 0) {
        TextKey = other.TextKey;
      }
      params_.Add(other.params_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TextKey = input.ReadInt32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonTextParam : pb::IMessage<CommonTextParam> {
    private static readonly pb::MessageParser<CommonTextParam> _parser = new pb::MessageParser<CommonTextParam>(() => new CommonTextParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonTextParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTextParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTextParam(CommonTextParam other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTextParam Clone() {
      return new CommonTextParam(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::NBSGame.PB.CommonTextParamType type_ = 0;
    /// <summary>
    /// 参数类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.CommonTextParamType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// 参数值 类型为0时直接替换，类型为1时该值为“军官原型id|攻守方|兵种id” 其他类型值直接找对应类型的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonTextParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonTextParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonTextParam other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::NBSGame.PB.CommonTextParamType) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TroopInfoList : pb::IMessage<TroopInfoList> {
    private static readonly pb::MessageParser<TroopInfoList> _parser = new pb::MessageParser<TroopInfoList>(() => new TroopInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroopInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.CommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopInfoList(TroopInfoList other) : this() {
      troopId_ = other.troopId_;
      sort_ = other.sort_;
      faction_ = other.faction_;
      proId_ = other.proId_;
      isAwaken_ = other.isAwaken_;
      quality_ = other.quality_;
      starLevel_ = other.starLevel_;
      level_ = other.level_;
      armyClass_ = other.armyClass_;
      armyAmount_ = other.armyAmount_;
      twoOfficerProId_ = other.twoOfficerProId_;
      threeOfficerProId_ = other.threeOfficerProId_;
      isTroopExp_ = other.isTroopExp_;
      conscriptFinishTime_ = other.conscriptFinishTime_;
      woundFinishTime_ = other.woundFinishTime_;
      vigorEnoughTime_ = other.vigorEnoughTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopInfoList Clone() {
      return new TroopInfoList(this);
    }

    /// <summary>Field number for the "troopId" field.</summary>
    public const int TroopIdFieldNumber = 1;
    private long troopId_;
    /// <summary>
    /// 部队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 2;
    private int sort_;
    /// <summary>
    /// 排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 3;
    private int faction_;
    /// <summary>
    /// 主将阵营(-1为无主将)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "proId" field.</summary>
    public const int ProIdFieldNumber = 4;
    private int proId_;
    /// <summary>
    /// 主将原型id(-1为无主将)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProId {
      get { return proId_; }
      set {
        proId_ = value;
      }
    }

    /// <summary>Field number for the "isAwaken" field.</summary>
    public const int IsAwakenFieldNumber = 5;
    private bool isAwaken_;
    /// <summary>
    /// 主将是否觉醒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAwaken {
      get { return isAwaken_; }
      set {
        isAwaken_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 6;
    private int quality_;
    /// <summary>
    /// 主将品质(-1为无主将)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "starLevel" field.</summary>
    public const int StarLevelFieldNumber = 7;
    private int starLevel_;
    /// <summary>
    /// 主将星级(-1为无主将)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 8;
    private int level_;
    /// <summary>
    /// 主将等级(-1为无主将)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "armyClass" field.</summary>
    public const int ArmyClassFieldNumber = 10;
    private int armyClass_;
    /// <summary>
    /// 兵种类型(-1为无主将)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArmyClass {
      get { return armyClass_; }
      set {
        armyClass_ = value;
      }
    }

    /// <summary>Field number for the "armyAmount" field.</summary>
    public const int ArmyAmountFieldNumber = 11;
    private int armyAmount_;
    /// <summary>
    /// 兵种数量(-1为无主将)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArmyAmount {
      get { return armyAmount_; }
      set {
        armyAmount_ = value;
      }
    }

    /// <summary>Field number for the "twoOfficerProId" field.</summary>
    public const int TwoOfficerProIdFieldNumber = 14;
    private int twoOfficerProId_;
    /// <summary>
    /// 副将原型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TwoOfficerProId {
      get { return twoOfficerProId_; }
      set {
        twoOfficerProId_ = value;
      }
    }

    /// <summary>Field number for the "threeOfficerProId" field.</summary>
    public const int ThreeOfficerProIdFieldNumber = 15;
    private int threeOfficerProId_;
    /// <summary>
    /// 副将原型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThreeOfficerProId {
      get { return threeOfficerProId_; }
      set {
        threeOfficerProId_ = value;
      }
    }

    /// <summary>Field number for the "isTroopExp" field.</summary>
    public const int IsTroopExpFieldNumber = 16;
    private bool isTroopExp_;
    /// <summary>
    /// 部队是否出征在外
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTroopExp {
      get { return isTroopExp_; }
      set {
        isTroopExp_ = value;
      }
    }

    /// <summary>Field number for the "conscriptFinishTime" field.</summary>
    public const int ConscriptFinishTimeFieldNumber = 17;
    private long conscriptFinishTime_;
    /// <summary>
    /// 征兵结束时间点(-1为无征兵)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConscriptFinishTime {
      get { return conscriptFinishTime_; }
      set {
        conscriptFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "woundFinishTime" field.</summary>
    public const int WoundFinishTimeFieldNumber = 18;
    private long woundFinishTime_;
    /// <summary>
    /// 重伤结束时间点(-1为无重伤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WoundFinishTime {
      get { return woundFinishTime_; }
      set {
        woundFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "vigorEnoughTime" field.</summary>
    public const int VigorEnoughTimeFieldNumber = 19;
    private long vigorEnoughTime_;
    /// <summary>
    /// 体力恢复足够时间点(-1为无疲劳)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VigorEnoughTime {
      get { return vigorEnoughTime_; }
      set {
        vigorEnoughTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroopInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroopInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TroopId != other.TroopId) return false;
      if (Sort != other.Sort) return false;
      if (Faction != other.Faction) return false;
      if (ProId != other.ProId) return false;
      if (IsAwaken != other.IsAwaken) return false;
      if (Quality != other.Quality) return false;
      if (StarLevel != other.StarLevel) return false;
      if (Level != other.Level) return false;
      if (ArmyClass != other.ArmyClass) return false;
      if (ArmyAmount != other.ArmyAmount) return false;
      if (TwoOfficerProId != other.TwoOfficerProId) return false;
      if (ThreeOfficerProId != other.ThreeOfficerProId) return false;
      if (IsTroopExp != other.IsTroopExp) return false;
      if (ConscriptFinishTime != other.ConscriptFinishTime) return false;
      if (WoundFinishTime != other.WoundFinishTime) return false;
      if (VigorEnoughTime != other.VigorEnoughTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (ProId != 0) hash ^= ProId.GetHashCode();
      if (IsAwaken != false) hash ^= IsAwaken.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (StarLevel != 0) hash ^= StarLevel.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ArmyClass != 0) hash ^= ArmyClass.GetHashCode();
      if (ArmyAmount != 0) hash ^= ArmyAmount.GetHashCode();
      if (TwoOfficerProId != 0) hash ^= TwoOfficerProId.GetHashCode();
      if (ThreeOfficerProId != 0) hash ^= ThreeOfficerProId.GetHashCode();
      if (IsTroopExp != false) hash ^= IsTroopExp.GetHashCode();
      if (ConscriptFinishTime != 0L) hash ^= ConscriptFinishTime.GetHashCode();
      if (WoundFinishTime != 0L) hash ^= WoundFinishTime.GetHashCode();
      if (VigorEnoughTime != 0L) hash ^= VigorEnoughTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TroopId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TroopId);
      }
      if (Sort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sort);
      }
      if (Faction != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Faction);
      }
      if (ProId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ProId);
      }
      if (IsAwaken != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAwaken);
      }
      if (Quality != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Quality);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StarLevel);
      }
      if (Level != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Level);
      }
      if (ArmyClass != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ArmyClass);
      }
      if (ArmyAmount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ArmyAmount);
      }
      if (TwoOfficerProId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TwoOfficerProId);
      }
      if (ThreeOfficerProId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ThreeOfficerProId);
      }
      if (IsTroopExp != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsTroopExp);
      }
      if (ConscriptFinishTime != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(ConscriptFinishTime);
      }
      if (WoundFinishTime != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(WoundFinishTime);
      }
      if (VigorEnoughTime != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(VigorEnoughTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sort);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (ProId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProId);
      }
      if (IsAwaken != false) {
        size += 1 + 1;
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLevel);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ArmyClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArmyClass);
      }
      if (ArmyAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArmyAmount);
      }
      if (TwoOfficerProId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TwoOfficerProId);
      }
      if (ThreeOfficerProId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreeOfficerProId);
      }
      if (IsTroopExp != false) {
        size += 2 + 1;
      }
      if (ConscriptFinishTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ConscriptFinishTime);
      }
      if (WoundFinishTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WoundFinishTime);
      }
      if (VigorEnoughTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VigorEnoughTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroopInfoList other) {
      if (other == null) {
        return;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.ProId != 0) {
        ProId = other.ProId;
      }
      if (other.IsAwaken != false) {
        IsAwaken = other.IsAwaken;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.StarLevel != 0) {
        StarLevel = other.StarLevel;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ArmyClass != 0) {
        ArmyClass = other.ArmyClass;
      }
      if (other.ArmyAmount != 0) {
        ArmyAmount = other.ArmyAmount;
      }
      if (other.TwoOfficerProId != 0) {
        TwoOfficerProId = other.TwoOfficerProId;
      }
      if (other.ThreeOfficerProId != 0) {
        ThreeOfficerProId = other.ThreeOfficerProId;
      }
      if (other.IsTroopExp != false) {
        IsTroopExp = other.IsTroopExp;
      }
      if (other.ConscriptFinishTime != 0L) {
        ConscriptFinishTime = other.ConscriptFinishTime;
      }
      if (other.WoundFinishTime != 0L) {
        WoundFinishTime = other.WoundFinishTime;
      }
      if (other.VigorEnoughTime != 0L) {
        VigorEnoughTime = other.VigorEnoughTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TroopId = input.ReadInt64();
            break;
          }
          case 16: {
            Sort = input.ReadInt32();
            break;
          }
          case 24: {
            Faction = input.ReadInt32();
            break;
          }
          case 32: {
            ProId = input.ReadInt32();
            break;
          }
          case 40: {
            IsAwaken = input.ReadBool();
            break;
          }
          case 48: {
            Quality = input.ReadInt32();
            break;
          }
          case 56: {
            StarLevel = input.ReadInt32();
            break;
          }
          case 64: {
            Level = input.ReadInt32();
            break;
          }
          case 80: {
            ArmyClass = input.ReadInt32();
            break;
          }
          case 88: {
            ArmyAmount = input.ReadInt32();
            break;
          }
          case 112: {
            TwoOfficerProId = input.ReadInt32();
            break;
          }
          case 120: {
            ThreeOfficerProId = input.ReadInt32();
            break;
          }
          case 128: {
            IsTroopExp = input.ReadBool();
            break;
          }
          case 136: {
            ConscriptFinishTime = input.ReadInt64();
            break;
          }
          case 144: {
            WoundFinishTime = input.ReadInt64();
            break;
          }
          case 152: {
            VigorEnoughTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
