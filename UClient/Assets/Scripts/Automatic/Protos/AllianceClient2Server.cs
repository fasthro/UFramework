// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllianceClient2Server.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NBSGame.PB {

  /// <summary>Holder for reflection information generated from AllianceClient2Server.proto</summary>
  public static partial class AllianceClient2ServerReflection {

    #region Descriptor
    /// <summary>File descriptor for AllianceClient2Server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AllianceClient2ServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtBbGxpYW5jZUNsaWVudDJTZXJ2ZXIucHJvdG8SCk5CU0dhbWUuUEIaDENv",
            "bW1vbi5wcm90byIiChJDMlNfQ3JlYXRlQWxsaWFuY2USDAoEbmFtZRgBIAEo",
            "CSIUChJTMkNfQ3JlYXRlQWxsaWFuY2UiKQoTQzJTX0dldEFsbGlhbmNlSW5m",
            "bxISCgphbGxpYW5jZUlkGAEgASgDIosDChNTMkNfR2V0QWxsaWFuY2VJbmZv",
            "EgwKBG5hbWUYASABKAkSFgoObGVhZGVyUGxheWVySWQYAiABKAMSEgoKbGVh",
            "ZGVyTmFtZRgDIAEoCRIbChNkaXBsb21hdGlzdFBsYXllcklkGAQgASgDEhcK",
            "D2RpcGxvbWF0aXN0TmFtZRgFIAEoCRINCgVsZXZlbBgGIAEoBRITCgttZW1i",
            "ZXJDb3VudBgHIAEoBRIRCgltZW1iZXJNYXgYCCABKAUSDgoGcmVnaW9uGAkg",
            "ASgFEg0KBXBvd2VyGAogASgFEhEKCXRvd25Db3VudBgLIAEoBRIOCgZub3Rp",
            "Y2UYDCABKAkSDgoGcmVzTWF4GA0gASgFEgwKBHJlczEYDiABKAUSDAoEcmVz",
            "MhgPIAEoBRIMCgRyZXMzGBAgASgFEgwKBHJlczQYESABKAUSDQoFc2NvcmUY",
            "EiABKAUSEAoIc2NvcmVNYXgYEyABKAUSEAoIcmVsYXRpb24YFCABKAUSEAoI",
            "aXNSZWxldmUYFSABKAgiJwoRQzJTX0FwcGx5QWxsaWFuY2USEgoKYWxsaWFu",
            "Y2VJZBgBIAEoAyITChFTMkNfQXBwbHlBbGxpYW5jZSIXChVDMlNfQXBwbHlB",
            "bGxpYW5jZUxpc3QiagoVUzJDX0FwcGx5QWxsaWFuY2VMaXN0EjMKDGFsbGlh",
            "bmNlSW5mbxgBIAMoCzIdLk5CU0dhbWUuUEIuQXBwbHlBbGxpYW5jZUluZm8S",
            "HAoUam9pbkFsbGlhbmNlQ29vbFRpbWUYAiABKAMirwEKEUFwcGx5QWxsaWFu",
            "Y2VJbmZvEhIKCmFsbGlhbmNlSWQYASABKAMSDAoEbmFtZRgCIAEoCRINCgVs",
            "ZXZlbBgDIAEoBRITCgttZW1iZXJDb3VudBgEIAEoBRIRCgltZW1iZXJNYXgY",
            "BSABKAUSDgoGcmVnaW9uGAYgASgFEhAKCGRpc3RhbmNlGAcgASgFEg4KBmlz",
            "Sm9pbhgIIAEoCBIPCgdpc0FwcGx5GAkgASgIIh0KG0MyU19BcHBseUFsbGlh",
            "bmNlUGxheWVyTGlzdCJmChtTMkNfQXBwbHlBbGxpYW5jZVBsYXllckxpc3QS",
            "NwoKcGxheWVySW5mbxgBIAMoCzIjLk5CU0dhbWUuUEIuQXBwbHlBbGxpYW5j",
            "ZVBsYXllckluZm8SDgoGaXNPcGVuGAIgASgIInsKF0FwcGx5QWxsaWFuY2VQ",
            "bGF5ZXJJbmZvEhAKCHBsYXllcklkGAEgASgDEgwKBG5hbWUYAiABKAkSDQoF",
            "cG93ZXIYAyABKAUSDgoGcmVnaW9uGAQgASgFEg4KBmlzUmVhZBgFIAEoCBIR",
            "CglhcHBseVRpbWUYBiABKAMiPwoaQzJTX0FwcGx5QWxsaWFuY2VQcm9jZXNz",
            "b3ISEAoIcGxheWVySWQYASABKAMSDwoHaXNBZ3JlZRgCIAEoCCIcChpTMkNf",
            "QXBwbHlBbGxpYW5jZVByb2Nlc3NvciImChJDMlNfSW52aXRlQWxsaWFuY2US",
            "EAoIcGxheWVySWQYASABKAMiFAoSUzJDX0ludml0ZUFsbGlhbmNlIhgKFkMy",
            "U19JbnZpdGVBbGxpYW5jZUxpc3QiVAoWUzJDX0ludml0ZUFsbGlhbmNlTGlz",
            "dBI6ChJpbnZpdGVBbGxpYW5jZUluZm8YASADKAsyHi5OQlNHYW1lLlBCLklu",
            "dml0ZUFsbGlhbmNlSW5mbyKHAQoSSW52aXRlQWxsaWFuY2VJbmZvEhIKCmFs",
            "bGlhbmNlSWQYASABKAMSDAoEbmFtZRgCIAEoCRINCgVsZXZlbBgDIAEoBRIT",
            "CgttZW1iZXJDb3VudBgEIAEoBRIRCgltZW1iZXJNYXgYBSABKAUSGAoQaW52",
            "aXRlUGxheWVyTmFtZRgGIAEoCSJCChtDMlNfSW52aXRlQWxsaWFuY2VQcm9j",
            "ZXNzb3ISEgoKYWxsaWFuY2VJZBgBIAEoAxIPCgdpc0FncmVlGAIgASgIIh0K",
            "G1MyQ19JbnZpdGVBbGxpYW5jZVByb2Nlc3NvciIZChdDMlNfQ2xlYXJJbnZp",
            "dGVBbGxpYW5jZSIZChdTMkNfQ2xlYXJJbnZpdGVBbGxpYW5jZSITChFDMlNf",
            "R2V0TWVtYmVyTGlzdCJYChFTMkNfR2V0TWVtYmVyTGlzdBIqCgptZW1iZXJJ",
            "bmZvGAEgAygLMhYuTkJTR2FtZS5QQi5NZW1iZXJJbmZvEhcKD2RlbWlzZVRp",
            "bWVzdGFtcBgCIAEoAyKGAgoKTWVtYmVySW5mbxIQCghwbGF5ZXJJZBgBIAEo",
            "AxIMCgRuYW1lGAIgASgJEg4KBmF2YXRhchgDIAEoBRINCgVwb3dlchgEIAEo",
            "BRIOCgZyZWdpb24YBSABKAUSDgoGY2VsbElkGAYgASgFEhAKCHBvc2l0aW9u",
            "GAcgASgFEhQKDGNvbnRyaWJ1dGlvbhgIIAEoBRIYChBjb250cmlidXRpb25X",
            "ZWVrGAkgASgFEg0KBXNjb3JlGAogASgFEhEKCXNjb3JlV2VlaxgLIAEoBRIO",
            "CgZkb25hdGUYDCABKAUSEgoKZG9uYXRlV2VlaxgNIAEoBRIRCglpc0NhcHR1",
            "cmUYDiABKAgiFAoSQzJTX0dldENhcHR1cmVMaXN0IkIKElMyQ19HZXRDYXB0",
            "dXJlTGlzdBIsCgtjYXB0dXJlSW5mbxgBIAMoCzIXLk5CU0dhbWUuUEIuQ2Fw",
            "dHVyZUluZm8iZwoLQ2FwdHVyZUluZm8SEAoIcGxheWVySWQYASABKAMSDAoE",
            "bmFtZRgCIAEoCRIOCgZyZWdpb24YAyABKAUSDgoGY2VsbElkGAQgASgFEhgK",
            "EGNhcHR1cmVUaW1lc3RhbXAYBSABKAMiEgoQQzJTX0dldEdyb3VwTGlzdCI8",
            "ChBTMkNfR2V0R3JvdXBMaXN0EigKCWdyb3VwSW5mbxgBIAMoCzIVLk5CU0dh",
            "bWUuUEIuR3JvdXBJbmZvIrYBCglHcm91cEluZm8SDwoHZ3JvdXBJZBgBIAEo",
            "AxIMCgRuYW1lGAIgASgJEhIKCmxlYWRlck5hbWUYAyABKAkSDQoFY291bnQY",
            "BCABKAUSEAoIYXZnU2NvcmUYBSABKAUSFAoMYXZnU2NvcmVXZWVrGAYgASgF",
            "EhEKCWF2Z0RvbmF0ZRgHIAEoBRIVCg1hdmdEb25hdGVXZWVrGAggASgFEhUK",
            "DWxlYWRlclBsYXlySWQYCSABKAMiGQoXQzJTX0dldEFsbGlhbmNlQWRkaXRp",
            "b24ijQIKF1MyQ19HZXRBbGxpYW5jZUFkZGl0aW9uEhQKDHJlczFhZGRpdGlv",
            "bhgBIAEoBRIUCgxyZXMyYWRkaXRpb24YAiABKAUSFAoMcmVzM2FkZGl0aW9u",
            "GAMgASgFEhQKDHJlczRhZGRpdGlvbhgEIAEoBRIWCg5tZW1iZXJBZGRpdGlv",
            "bhgFIAEoBRIYChB0b3duUmVzMWFkZGl0aW9uGAYgASgFEhgKEHRvd25SZXMy",
            "YWRkaXRpb24YByABKAUSGAoQdG93blJlczNhZGRpdGlvbhgIIAEoBRIYChB0",
            "b3duUmVzNGFkZGl0aW9uGAkgASgFEhoKEnRvd25NZW1iZXJBZGRpdGlvbhgK",
            "IAEoBSIeCg5DMlNfR2V0TG9nTGlzdBIMCgR0eXBlGAEgASgFIjMKDlMyQ19H",
            "ZXRMb2dMaXN0EiEKBGl0ZW0YASADKAsyEy5OQlNHYW1lLlBCLkxvZ0l0ZW0i",
            "QgoHTG9nSXRlbRIRCgl0aW1lU3RhbXAYASABKAMSJAoEdGV4dBgCIAEoCzIW",
            "Lk5CU0dhbWUuUEIuQ29tbW9uVGV4dCIiChBDMlNfQ2hhbmdlTm90aWNlEg4K",
            "Bm5vdGljZRgBIAEoCSISChBTMkNfQ2hhbmdlTm90aWNlIhgKFkMyU19BcHBv",
            "aW50T2ZmaWNlclZpZXciPwoWUzJDX0FwcG9pbnRPZmZpY2VyVmlldxIlCgRp",
            "dGVtGAEgAygLMhcuTkJTR2FtZS5QQi5PZmZpY2VySXRlbSItCgtPZmZpY2Vy",
            "SXRlbRIMCgRuYW1lGAEgASgJEhAKCHBvc2l0aW9uGAIgASgFIjgKEkMyU19B",
            "cHBvaW50T2ZmaWNlchIQCghwbGF5ZXJJZBgBIAEoAxIQCghwb3NpdGlvbhgC",
            "IAEoBSIUChJTMkNfQXBwb2ludE9mZmljZXIiJQoRQzJTX1JlY2FsbE9mZmlj",
            "ZXISEAoIcGxheWVySWQYASABKAMiEwoRUzJDX1JlY2FsbE9mZmljZXIiJgoS",
            "QzJTX0FsbGlhbmNlRGVtaXNlEhAKCHBsYXllcklkGAEgASgDIhQKElMyQ19B",
            "bGxpYW5jZURlbWlzZSIbChlDMlNfQ29ubmNlbEFsbGlhbmNlRGVtaXNlIhsK",
            "GVMyQ19Db25uY2VsQWxsaWFuY2VEZW1pc2UiIgoOQzJTX0tpY2tNZW1iZXIS",
            "EAoIcGxheWVySWQYASABKAMiEAoOUzJDX0tpY2tNZW1iZXIiEgoQQzJTX1F1",
            "aXRBbGxpYW5jZSISChBTMkNfUXVpdEFsbGlhbmNlIjIKD0MyU19DcmVhdGVH",
            "cm91cBIMCgRuYW1lGAEgASgJEhEKCXBsYXllcklkcxgCIAMoAyIRCg9TMkNf",
            "Q3JlYXRlR3JvdXAiQQoNQzJTX0VkaXRHcm91cBIPCgdncm91cElkGAEgASgD",
            "EgwKBG5hbWUYAiABKAkSEQoJcGxheWVySWRzGAMgAygDIg8KDVMyQ19FZGl0",
            "R3JvdXAiHwodQzJTX0dldEFwcG9pbnRHcm91cExlYWRlckxpc3QiTwodUzJD",
            "X0dldEFwcG9pbnRHcm91cExlYWRlckxpc3QSLgoGbGVhZGVyGAEgAygLMh4u",
            "TkJTR2FtZS5QQi5BcHBvaW50R3JvdXBMZWFkZXIiRgoSQXBwb2ludEdyb3Vw",
            "TGVhZGVyEhAKCHBsYXllcklkGAEgASgDEgwKBG5hbWUYAiABKAkSEAoIcG9z",
            "aXRpb24YAyABKAUiOwoWQzJTX0FwcG9pbnRHcm91cExlYWRlchIQCghwbGF5",
            "ZXJJZBgBIAEoAxIPCgdncm91cElkGAIgASgDIhgKFlMyQ19BcHBvaW50R3Jv",
            "dXBMZWFkZXIiKAoVQzJTX1JlY2FsbEdyb3VwTGVhZGVyEg8KB2dyb3VwSWQY",
            "ASABKAMiFwoVUzJDX1JlY2FsbEdyb3VwTGVhZGVyIiQKEUMyU19EaXNzb2x2",
            "ZUdyb3VwEg8KB2dyb3VwSWQYASABKAMiEwoRUzJDX0Rpc3NvbHZlR3JvdXAi",
            "JwoUQzJTX0dldE1vdmVHcm91cExpc3QSDwoHZ3JvdXBJZBgBIAEoAyJBChRT",
            "MkNfR2V0TW92ZUdyb3VwTGlzdBIpCgZncm91cHMYASADKAsyGS5OQlNHYW1l",
            "LlBCLk1vdmVHcm91cEluZm8iLgoNTW92ZUdyb3VwSW5mbxIPCgdncm91cElk",
            "GAEgASgDEgwKBG5hbWUYAiABKAkiNQoNQzJTX01vdmVHcm91cBIQCghwbGF5",
            "ZXJJZBgBIAEoAxISCgpuZXdHcm91cElkGAIgASgDIg8KDVMyQ19Nb3ZlR3Jv",
            "dXAiIwoPQzJTX1JlbW92ZUdyb3VwEhAKCHBsYXllcklkGAEgASgDIhEKD1My",
            "Q19SZW1vdmVHcm91cCIjChBDMlNfR2V0R3JvdXBJbmZvEg8KB2dyb3VwSWQY",
            "ASABKAMiUQoQUzJDX0dldEdyb3VwSW5mbxIMCgRuYW1lGAEgASgJEi8KCm1l",
            "bWJlckluZm8YAiADKAsyGy5OQlNHYW1lLlBCLkdyb3VwTWVtYmVySW5mbyJi",
            "Cg9Hcm91cE1lbWJlckluZm8SEAoIcGxheWVySWQYASABKAMSDAoEbmFtZRgC",
            "IAEoCRINCgVzY29yZRgDIAEoBRIRCglzY29yZVdlZWsYBCABKAUSDQoFcG93",
            "ZXIYBSABKAUiGwoZQzJTX0dldE5vdEdyb3VwTWVtYmVyTGlzdCJMChlTMkNf",
            "R2V0Tm90R3JvdXBNZW1iZXJMaXN0Ei8KCm1lbWJlckluZm8YASADKAsyGy5O",
            "QlNHYW1lLlBCLkdyb3VwTWVtYmVySW5mbyIpChZDMlNfR2V0R3JvdXBNZW1i",
            "ZXJMaXN0Eg8KB2dyb3VwSWQYASABKAMiXAoWUzJDX0dldEdyb3VwTWVtYmVy",
            "TGlzdBIqCgptZW1iZXJJbmZvGAEgAygLMhYuTkJTR2FtZS5QQi5NZW1iZXJJ",
            "bmZvEhYKDmxlYWRlclBsYXllcklkGAIgASgDIg8KDUMyU19RdWl0R3JvdXAi",
            "DwoNUzJDX1F1aXRHcm91cCItChdDMlNfQ2FuY2VsQXBwbHlBbGxpYW5jZRIS",
            "CgphbGxpYW5jZUlkGAEgASgDIhkKF1MyQ19DYW5jZWxBcHBseUFsbGlhbmNl",
            "IiUKE0MyU19TZXRBbGxpYW5jZU9wZW4SDgoGaXNPcGVuGAEgASgIIhUKE1My",
            "Q19TZXRBbGxpYW5jZU9wZW4iHAoaQzJTX0FwcGx5QWxsaWFuY2VBbGxSZWpl",
            "Y3QiHAoaUzJDX0FwcGx5QWxsaWFuY2VBbGxSZWplY3QiEgoQQzJTX0FsbGlh",
            "bmNlUmFuayLYAQoQUzJDX0FsbGlhbmNlUmFuaxISCgphbGxpYW5jZUlkGAEg",
            "ASgDEhQKDGFsbGlhbmNlTmFtZRgCIAEoCRIMCgRyYW5rGAMgASgFEg0KBWxl",
            "dmVsGAQgASgFEhMKC21lbWJlckNvdW50GAUgASgFEhEKCXRvd25Db3VudBgG",
            "IAEoBRIOCgZyZWdpb24YByABKAUSDQoFcG93ZXIYCCABKAUSNgoQYWxsaWFu",
            "Y2VSYW5rSW5mbxgJIAMoCzIcLk5CU0dhbWUuUEIuQWxsaWFuY2VSYW5rSW5m",
            "byKgAQoQQWxsaWFuY2VSYW5rSW5mbxISCgphbGxpYW5jZUlkGAEgASgDEhQK",
            "DGFsbGlhbmNlTmFtZRgCIAEoCRIMCgRyYW5rGAMgASgFEg0KBWxldmVsGAQg",
            "ASgFEhMKC21lbWJlckNvdW50GAUgASgFEhEKCXRvd25Db3VudBgGIAEoBRIO",
            "CgZyZWdpb24YByABKAUSDQoFcG93ZXIYCCABKAUiSAoXQzJTX0FkZEFsbGlh",
            "bmNlRmF2b3JpdGUSDgoGY2VsbElkGAEgASgFEgwKBG5hbWUYAiABKAkSDwoH",
            "Y29udGVudBgDIAEoCSIZChdTMkNfQWRkQWxsaWFuY2VGYXZvcml0ZSIsChpD",
            "MlNfQ2FuY2VsQWxsaWFuY2VGYXZvcml0ZRIOCgZjZWxsSWQYASABKAUiHAoa",
            "UzJDX0NhbmNlbEFsbGlhbmNlRmF2b3JpdGUiHQobQzJTX0dldEFsbGlhbmNl",
            "RmF2b3JpdGVMaXN0Ik4KG1MyQ19HZXRBbGxpYW5jZUZhdm9yaXRlTGlzdBIv",
            "CgVpdGVtcxgBIAMoCzIgLk5CU0dhbWUuUEIuQWxsaWFuY2VGYXZvcml0ZUl0",
            "ZW0iYAoUQWxsaWFuY2VGYXZvcml0ZUl0ZW0SDgoGY2VsbElkGAEgASgFEgwK",
            "BG5hbWUYAiABKAkSEgoKY3JlYXRlVGltZRgDIAEoAxIWCg5jcmV0YXRQbGF5",
            "ZXJJZBgEIAEoAyIvCh1DMlNfR2V0QWxsaWFuY2VGYXZvcml0ZURldGFpbBIO",
            "CgZjZWxsSWQYASABKAUigAEKHVMyQ19HZXRBbGxpYW5jZUZhdm9yaXRlRGV0",
            "YWlsEgwKBG5hbWUYASABKAkSDwoHY29udGVudBgCIAEoCRIYChBjcmVhdGVQ",
            "bGF5ZXJOYW1lGAMgASgJEhYKDmNyZXRhdFBsYXllcklkGAQgASgDEg4KBmNl",
            "bGxJZBgFIAEoBSIdChtDMlNfR2V0QWxsaWFuY2VEb25hdGlvbkluZm8ixQEK",
            "G1MyQ19HZXRBbGxpYW5jZURvbmF0aW9uSW5mbxINCgVsZXZlbBgBIAEoBRIU",
            "CgxjdXJyZW50U2NvcmUYAiABKAUSEQoJbmVlZFNjb3JlGAMgASgFEhYKDmFs",
            "bGlhbmNlUmVzTWF4GAQgASgFEhQKDGFsbGlhbmNlUmVzMRgFIAEoBRIUCgxh",
            "bGxpYW5jZVJlczIYBiABKAUSFAoMYWxsaWFuY2VSZXMzGAcgASgFEhQKDGFs",
            "bGlhbmNlUmVzNBgIIAEoBSJOChRDMlNfQWxsaWFuY2VEb25hdGlvbhIMCgRy",
            "ZXMxGAEgASgFEgwKBHJlczIYAiABKAUSDAoEcmVzMxgDIAEoBRIMCgRyZXM0",
            "GAQgASgFIhYKFFMyQ19BbGxpYW5jZURvbmF0aW9uIj8KF0MyU19TZXRBbGxp",
            "YW5jZVJlbGF0aW9uEhIKCmFsbGlhbmNlSWQYASABKAMSEAoIcmVsYXRpb24Y",
            "AiABKAUiGQoXUzJDX1NldEFsbGlhbmNlUmVsYXRpb24iGgoYQzJTX0FsbGlh",
            "bmNlUmVsYXRpb25MaXN0IksKGFMyQ19BbGxpYW5jZVJlbGF0aW9uTGlzdBIv",
            "CgVpdGVtcxgBIAMoCzIgLk5CU0dhbWUuUEIuQWxsaWFuY2VSZWxhdGlvbkl0",
            "ZW0iqgEKFEFsbGlhbmNlUmVsYXRpb25JdGVtEhIKCmFsbGlhbmNlSWQYASAB",
            "KAMSDAoEbmFtZRgCIAEoCRINCgVsZXZlbBgDIAEoBRINCgVwb3dlchgEIAEo",
            "BRITCgttZW1iZXJDb3VudBgFIAEoBRIOCgZyZWdpb24YBiABKAUSEAoIcmVs",
            "YXRpb24YByABKAUSGwoTcmVsZXZlUmVtYWluaW5nVGltZRgIIAEoBSIbChlD",
            "MlNfQWxsaWFuY2VBbGx5QXBwbHlMaXN0Ik0KGVMyQ19BbGxpYW5jZUFsbHlB",
            "cHBseUxpc3QSMAoFaXRlbXMYASADKAsyIS5OQlNHYW1lLlBCLkFsbGlhbmNl",
            "QWxseUFwcGx5SXRlbSJ8ChVBbGxpYW5jZUFsbHlBcHBseUl0ZW0SEgoKYWxs",
            "aWFuY2VJZBgBIAEoAxIMCgRuYW1lGAIgASgJEg0KBWxldmVsGAMgASgFEg0K",
            "BXBvd2VyGAQgASgFEhMKC21lbWJlckNvdW50GAUgASgFEg4KBnJlZ2lvbhgG",
            "IAEoBSJFCh5DMlNfQWxsaWFuY2VBbGx5QXBwbHlQcm9jZXNzb3ISEgoKYWxs",
            "aWFuY2VJZBgBIAEoAxIPCgdpc0FncmVlGAIgASgIIiAKHlMyQ19BbGxpYW5j",
            "ZUFsbHlBcHBseVByb2Nlc3NvciJBChlDMlNfQ2hlY2tBbGxpYW5jZVJlbGF0",
            "aW9uEhIKCmFsbGlhbmNlSWQYASABKAMSEAoIcmVsYXRpb24YAiABKAUiGwoZ",
            "UzJDX0NoZWNrQWxsaWFuY2VSZWxhdGlvbkJFCiRjb20ucmhlYS5wSUlJLmdh",
            "bWUuY29yZS5jbWQucHJvdG9jb2xCHUFsbGlhbmNlQ2xpbmV0MlNlcnZlclBy",
            "b3RvY29sYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NBSGame.PB.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_CreateAlliance), global::NBSGame.PB.C2S_CreateAlliance.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_CreateAlliance), global::NBSGame.PB.S2C_CreateAlliance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetAllianceInfo), global::NBSGame.PB.C2S_GetAllianceInfo.Parser, new[]{ "AllianceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetAllianceInfo), global::NBSGame.PB.S2C_GetAllianceInfo.Parser, new[]{ "Name", "LeaderPlayerId", "LeaderName", "DiplomatistPlayerId", "DiplomatistName", "Level", "MemberCount", "MemberMax", "Region", "Power", "TownCount", "Notice", "ResMax", "Res1", "Res2", "Res3", "Res4", "Score", "ScoreMax", "Relation", "IsReleve" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_ApplyAlliance), global::NBSGame.PB.C2S_ApplyAlliance.Parser, new[]{ "AllianceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_ApplyAlliance), global::NBSGame.PB.S2C_ApplyAlliance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_ApplyAllianceList), global::NBSGame.PB.C2S_ApplyAllianceList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_ApplyAllianceList), global::NBSGame.PB.S2C_ApplyAllianceList.Parser, new[]{ "AllianceInfo", "JoinAllianceCoolTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.ApplyAllianceInfo), global::NBSGame.PB.ApplyAllianceInfo.Parser, new[]{ "AllianceId", "Name", "Level", "MemberCount", "MemberMax", "Region", "Distance", "IsJoin", "IsApply" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_ApplyAlliancePlayerList), global::NBSGame.PB.C2S_ApplyAlliancePlayerList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_ApplyAlliancePlayerList), global::NBSGame.PB.S2C_ApplyAlliancePlayerList.Parser, new[]{ "PlayerInfo", "IsOpen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.ApplyAlliancePlayerInfo), global::NBSGame.PB.ApplyAlliancePlayerInfo.Parser, new[]{ "PlayerId", "Name", "Power", "Region", "IsRead", "ApplyTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_ApplyAllianceProcessor), global::NBSGame.PB.C2S_ApplyAllianceProcessor.Parser, new[]{ "PlayerId", "IsAgree" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_ApplyAllianceProcessor), global::NBSGame.PB.S2C_ApplyAllianceProcessor.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_InviteAlliance), global::NBSGame.PB.C2S_InviteAlliance.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_InviteAlliance), global::NBSGame.PB.S2C_InviteAlliance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_InviteAllianceList), global::NBSGame.PB.C2S_InviteAllianceList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_InviteAllianceList), global::NBSGame.PB.S2C_InviteAllianceList.Parser, new[]{ "InviteAllianceInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.InviteAllianceInfo), global::NBSGame.PB.InviteAllianceInfo.Parser, new[]{ "AllianceId", "Name", "Level", "MemberCount", "MemberMax", "InvitePlayerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_InviteAllianceProcessor), global::NBSGame.PB.C2S_InviteAllianceProcessor.Parser, new[]{ "AllianceId", "IsAgree" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_InviteAllianceProcessor), global::NBSGame.PB.S2C_InviteAllianceProcessor.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_ClearInviteAlliance), global::NBSGame.PB.C2S_ClearInviteAlliance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_ClearInviteAlliance), global::NBSGame.PB.S2C_ClearInviteAlliance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetMemberList), global::NBSGame.PB.C2S_GetMemberList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetMemberList), global::NBSGame.PB.S2C_GetMemberList.Parser, new[]{ "MemberInfo", "DemiseTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.MemberInfo), global::NBSGame.PB.MemberInfo.Parser, new[]{ "PlayerId", "Name", "Avatar", "Power", "Region", "CellId", "Position", "Contribution", "ContributionWeek", "Score", "ScoreWeek", "Donate", "DonateWeek", "IsCapture" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetCaptureList), global::NBSGame.PB.C2S_GetCaptureList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetCaptureList), global::NBSGame.PB.S2C_GetCaptureList.Parser, new[]{ "CaptureInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.CaptureInfo), global::NBSGame.PB.CaptureInfo.Parser, new[]{ "PlayerId", "Name", "Region", "CellId", "CaptureTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetGroupList), global::NBSGame.PB.C2S_GetGroupList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetGroupList), global::NBSGame.PB.S2C_GetGroupList.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.GroupInfo), global::NBSGame.PB.GroupInfo.Parser, new[]{ "GroupId", "Name", "LeaderName", "Count", "AvgScore", "AvgScoreWeek", "AvgDonate", "AvgDonateWeek", "LeaderPlayrId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetAllianceAddition), global::NBSGame.PB.C2S_GetAllianceAddition.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetAllianceAddition), global::NBSGame.PB.S2C_GetAllianceAddition.Parser, new[]{ "Res1Addition", "Res2Addition", "Res3Addition", "Res4Addition", "MemberAddition", "TownRes1Addition", "TownRes2Addition", "TownRes3Addition", "TownRes4Addition", "TownMemberAddition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetLogList), global::NBSGame.PB.C2S_GetLogList.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetLogList), global::NBSGame.PB.S2C_GetLogList.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.LogItem), global::NBSGame.PB.LogItem.Parser, new[]{ "TimeStamp", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_ChangeNotice), global::NBSGame.PB.C2S_ChangeNotice.Parser, new[]{ "Notice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_ChangeNotice), global::NBSGame.PB.S2C_ChangeNotice.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AppointOfficerView), global::NBSGame.PB.C2S_AppointOfficerView.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AppointOfficerView), global::NBSGame.PB.S2C_AppointOfficerView.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.OfficerItem), global::NBSGame.PB.OfficerItem.Parser, new[]{ "Name", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AppointOfficer), global::NBSGame.PB.C2S_AppointOfficer.Parser, new[]{ "PlayerId", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AppointOfficer), global::NBSGame.PB.S2C_AppointOfficer.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_RecallOfficer), global::NBSGame.PB.C2S_RecallOfficer.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_RecallOfficer), global::NBSGame.PB.S2C_RecallOfficer.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AllianceDemise), global::NBSGame.PB.C2S_AllianceDemise.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AllianceDemise), global::NBSGame.PB.S2C_AllianceDemise.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_ConncelAllianceDemise), global::NBSGame.PB.C2S_ConncelAllianceDemise.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_ConncelAllianceDemise), global::NBSGame.PB.S2C_ConncelAllianceDemise.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_KickMember), global::NBSGame.PB.C2S_KickMember.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_KickMember), global::NBSGame.PB.S2C_KickMember.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_QuitAlliance), global::NBSGame.PB.C2S_QuitAlliance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_QuitAlliance), global::NBSGame.PB.S2C_QuitAlliance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_CreateGroup), global::NBSGame.PB.C2S_CreateGroup.Parser, new[]{ "Name", "PlayerIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_CreateGroup), global::NBSGame.PB.S2C_CreateGroup.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_EditGroup), global::NBSGame.PB.C2S_EditGroup.Parser, new[]{ "GroupId", "Name", "PlayerIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_EditGroup), global::NBSGame.PB.S2C_EditGroup.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetAppointGroupLeaderList), global::NBSGame.PB.C2S_GetAppointGroupLeaderList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetAppointGroupLeaderList), global::NBSGame.PB.S2C_GetAppointGroupLeaderList.Parser, new[]{ "Leader" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.AppointGroupLeader), global::NBSGame.PB.AppointGroupLeader.Parser, new[]{ "PlayerId", "Name", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AppointGroupLeader), global::NBSGame.PB.C2S_AppointGroupLeader.Parser, new[]{ "PlayerId", "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AppointGroupLeader), global::NBSGame.PB.S2C_AppointGroupLeader.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_RecallGroupLeader), global::NBSGame.PB.C2S_RecallGroupLeader.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_RecallGroupLeader), global::NBSGame.PB.S2C_RecallGroupLeader.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_DissolveGroup), global::NBSGame.PB.C2S_DissolveGroup.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_DissolveGroup), global::NBSGame.PB.S2C_DissolveGroup.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetMoveGroupList), global::NBSGame.PB.C2S_GetMoveGroupList.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetMoveGroupList), global::NBSGame.PB.S2C_GetMoveGroupList.Parser, new[]{ "Groups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.MoveGroupInfo), global::NBSGame.PB.MoveGroupInfo.Parser, new[]{ "GroupId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_MoveGroup), global::NBSGame.PB.C2S_MoveGroup.Parser, new[]{ "PlayerId", "NewGroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_MoveGroup), global::NBSGame.PB.S2C_MoveGroup.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_RemoveGroup), global::NBSGame.PB.C2S_RemoveGroup.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_RemoveGroup), global::NBSGame.PB.S2C_RemoveGroup.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetGroupInfo), global::NBSGame.PB.C2S_GetGroupInfo.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetGroupInfo), global::NBSGame.PB.S2C_GetGroupInfo.Parser, new[]{ "Name", "MemberInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.GroupMemberInfo), global::NBSGame.PB.GroupMemberInfo.Parser, new[]{ "PlayerId", "Name", "Score", "ScoreWeek", "Power" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetNotGroupMemberList), global::NBSGame.PB.C2S_GetNotGroupMemberList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetNotGroupMemberList), global::NBSGame.PB.S2C_GetNotGroupMemberList.Parser, new[]{ "MemberInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetGroupMemberList), global::NBSGame.PB.C2S_GetGroupMemberList.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetGroupMemberList), global::NBSGame.PB.S2C_GetGroupMemberList.Parser, new[]{ "MemberInfo", "LeaderPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_QuitGroup), global::NBSGame.PB.C2S_QuitGroup.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_QuitGroup), global::NBSGame.PB.S2C_QuitGroup.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_CancelApplyAlliance), global::NBSGame.PB.C2S_CancelApplyAlliance.Parser, new[]{ "AllianceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_CancelApplyAlliance), global::NBSGame.PB.S2C_CancelApplyAlliance.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_SetAllianceOpen), global::NBSGame.PB.C2S_SetAllianceOpen.Parser, new[]{ "IsOpen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_SetAllianceOpen), global::NBSGame.PB.S2C_SetAllianceOpen.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_ApplyAllianceAllReject), global::NBSGame.PB.C2S_ApplyAllianceAllReject.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_ApplyAllianceAllReject), global::NBSGame.PB.S2C_ApplyAllianceAllReject.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AllianceRank), global::NBSGame.PB.C2S_AllianceRank.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AllianceRank), global::NBSGame.PB.S2C_AllianceRank.Parser, new[]{ "AllianceId", "AllianceName", "Rank", "Level", "MemberCount", "TownCount", "Region", "Power", "AllianceRankInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.AllianceRankInfo), global::NBSGame.PB.AllianceRankInfo.Parser, new[]{ "AllianceId", "AllianceName", "Rank", "Level", "MemberCount", "TownCount", "Region", "Power" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AddAllianceFavorite), global::NBSGame.PB.C2S_AddAllianceFavorite.Parser, new[]{ "CellId", "Name", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AddAllianceFavorite), global::NBSGame.PB.S2C_AddAllianceFavorite.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_CancelAllianceFavorite), global::NBSGame.PB.C2S_CancelAllianceFavorite.Parser, new[]{ "CellId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_CancelAllianceFavorite), global::NBSGame.PB.S2C_CancelAllianceFavorite.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetAllianceFavoriteList), global::NBSGame.PB.C2S_GetAllianceFavoriteList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetAllianceFavoriteList), global::NBSGame.PB.S2C_GetAllianceFavoriteList.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.AllianceFavoriteItem), global::NBSGame.PB.AllianceFavoriteItem.Parser, new[]{ "CellId", "Name", "CreateTime", "CretatPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetAllianceFavoriteDetail), global::NBSGame.PB.C2S_GetAllianceFavoriteDetail.Parser, new[]{ "CellId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetAllianceFavoriteDetail), global::NBSGame.PB.S2C_GetAllianceFavoriteDetail.Parser, new[]{ "Name", "Content", "CreatePlayerName", "CretatPlayerId", "CellId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_GetAllianceDonationInfo), global::NBSGame.PB.C2S_GetAllianceDonationInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_GetAllianceDonationInfo), global::NBSGame.PB.S2C_GetAllianceDonationInfo.Parser, new[]{ "Level", "CurrentScore", "NeedScore", "AllianceResMax", "AllianceRes1", "AllianceRes2", "AllianceRes3", "AllianceRes4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AllianceDonation), global::NBSGame.PB.C2S_AllianceDonation.Parser, new[]{ "Res1", "Res2", "Res3", "Res4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AllianceDonation), global::NBSGame.PB.S2C_AllianceDonation.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_SetAllianceRelation), global::NBSGame.PB.C2S_SetAllianceRelation.Parser, new[]{ "AllianceId", "Relation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_SetAllianceRelation), global::NBSGame.PB.S2C_SetAllianceRelation.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AllianceRelationList), global::NBSGame.PB.C2S_AllianceRelationList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AllianceRelationList), global::NBSGame.PB.S2C_AllianceRelationList.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.AllianceRelationItem), global::NBSGame.PB.AllianceRelationItem.Parser, new[]{ "AllianceId", "Name", "Level", "Power", "MemberCount", "Region", "Relation", "ReleveRemainingTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AllianceAllyApplyList), global::NBSGame.PB.C2S_AllianceAllyApplyList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AllianceAllyApplyList), global::NBSGame.PB.S2C_AllianceAllyApplyList.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.AllianceAllyApplyItem), global::NBSGame.PB.AllianceAllyApplyItem.Parser, new[]{ "AllianceId", "Name", "Level", "Power", "MemberCount", "Region" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_AllianceAllyApplyProcessor), global::NBSGame.PB.C2S_AllianceAllyApplyProcessor.Parser, new[]{ "AllianceId", "IsAgree" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_AllianceAllyApplyProcessor), global::NBSGame.PB.S2C_AllianceAllyApplyProcessor.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.C2S_CheckAllianceRelation), global::NBSGame.PB.C2S_CheckAllianceRelation.Parser, new[]{ "AllianceId", "Relation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NBSGame.PB.S2C_CheckAllianceRelation), global::NBSGame.PB.S2C_CheckAllianceRelation.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// cmdId:11001 创建军团:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_CreateAlliance : pb::IMessage<C2S_CreateAlliance> {
    private static readonly pb::MessageParser<C2S_CreateAlliance> _parser = new pb::MessageParser<C2S_CreateAlliance>(() => new C2S_CreateAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CreateAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateAlliance(C2S_CreateAlliance other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateAlliance Clone() {
      return new C2S_CreateAlliance(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CreateAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CreateAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CreateAlliance other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CreateAlliance : pb::IMessage<S2C_CreateAlliance> {
    private static readonly pb::MessageParser<S2C_CreateAlliance> _parser = new pb::MessageParser<S2C_CreateAlliance>(() => new S2C_CreateAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CreateAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateAlliance(S2C_CreateAlliance other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateAlliance Clone() {
      return new S2C_CreateAlliance(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CreateAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CreateAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CreateAlliance other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11002 获取军团信息:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetAllianceInfo : pb::IMessage<C2S_GetAllianceInfo> {
    private static readonly pb::MessageParser<C2S_GetAllianceInfo> _parser = new pb::MessageParser<C2S_GetAllianceInfo>(() => new C2S_GetAllianceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetAllianceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceInfo(C2S_GetAllianceInfo other) : this() {
      allianceId_ = other.allianceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceInfo Clone() {
      return new C2S_GetAllianceInfo(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetAllianceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetAllianceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetAllianceInfo other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GetAllianceInfo : pb::IMessage<S2C_GetAllianceInfo> {
    private static readonly pb::MessageParser<S2C_GetAllianceInfo> _parser = new pb::MessageParser<S2C_GetAllianceInfo>(() => new S2C_GetAllianceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetAllianceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceInfo(S2C_GetAllianceInfo other) : this() {
      name_ = other.name_;
      leaderPlayerId_ = other.leaderPlayerId_;
      leaderName_ = other.leaderName_;
      diplomatistPlayerId_ = other.diplomatistPlayerId_;
      diplomatistName_ = other.diplomatistName_;
      level_ = other.level_;
      memberCount_ = other.memberCount_;
      memberMax_ = other.memberMax_;
      region_ = other.region_;
      power_ = other.power_;
      townCount_ = other.townCount_;
      notice_ = other.notice_;
      resMax_ = other.resMax_;
      res1_ = other.res1_;
      res2_ = other.res2_;
      res3_ = other.res3_;
      res4_ = other.res4_;
      score_ = other.score_;
      scoreMax_ = other.scoreMax_;
      relation_ = other.relation_;
      isReleve_ = other.isReleve_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceInfo Clone() {
      return new S2C_GetAllianceInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 军团名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leaderPlayerId" field.</summary>
    public const int LeaderPlayerIdFieldNumber = 2;
    private long leaderPlayerId_;
    /// <summary>
    /// 盟主id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeaderPlayerId {
      get { return leaderPlayerId_; }
      set {
        leaderPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 3;
    private string leaderName_ = "";
    /// <summary>
    /// 盟主名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "diplomatistPlayerId" field.</summary>
    public const int DiplomatistPlayerIdFieldNumber = 4;
    private long diplomatistPlayerId_;
    /// <summary>
    /// 外交官玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiplomatistPlayerId {
      get { return diplomatistPlayerId_; }
      set {
        diplomatistPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "diplomatistName" field.</summary>
    public const int DiplomatistNameFieldNumber = 5;
    private string diplomatistName_ = "";
    /// <summary>
    /// 外交官名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiplomatistName {
      get { return diplomatistName_; }
      set {
        diplomatistName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 7;
    private int memberCount_;
    /// <summary>
    /// 人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "memberMax" field.</summary>
    public const int MemberMaxFieldNumber = 8;
    private int memberMax_;
    /// <summary>
    /// 人数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberMax {
      get { return memberMax_; }
      set {
        memberMax_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 9;
    private int region_;
    /// <summary>
    /// 所属州
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 10;
    private int power_;
    /// <summary>
    /// 势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "townCount" field.</summary>
    public const int TownCountFieldNumber = 11;
    private int townCount_;
    /// <summary>
    /// 城池数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TownCount {
      get { return townCount_; }
      set {
        townCount_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 12;
    private string notice_ = "";
    /// <summary>
    /// 公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resMax" field.</summary>
    public const int ResMaxFieldNumber = 13;
    private int resMax_;
    /// <summary>
    /// 资源上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResMax {
      get { return resMax_; }
      set {
        resMax_ = value;
      }
    }

    /// <summary>Field number for the "res1" field.</summary>
    public const int Res1FieldNumber = 14;
    private int res1_;
    /// <summary>
    /// 资源列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res1 {
      get { return res1_; }
      set {
        res1_ = value;
      }
    }

    /// <summary>Field number for the "res2" field.</summary>
    public const int Res2FieldNumber = 15;
    private int res2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res2 {
      get { return res2_; }
      set {
        res2_ = value;
      }
    }

    /// <summary>Field number for the "res3" field.</summary>
    public const int Res3FieldNumber = 16;
    private int res3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res3 {
      get { return res3_; }
      set {
        res3_ = value;
      }
    }

    /// <summary>Field number for the "res4" field.</summary>
    public const int Res4FieldNumber = 17;
    private int res4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res4 {
      get { return res4_; }
      set {
        res4_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 18;
    private int score_;
    /// <summary>
    /// 军团经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "scoreMax" field.</summary>
    public const int ScoreMaxFieldNumber = 19;
    private int scoreMax_;
    /// <summary>
    /// 军团升级需要经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreMax {
      get { return scoreMax_; }
      set {
        scoreMax_ = value;
      }
    }

    /// <summary>Field number for the "relation" field.</summary>
    public const int RelationFieldNumber = 20;
    private int relation_;
    /// <summary>
    /// 军团关系 关系 0-中立 1-友好 2-敌对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Relation {
      get { return relation_; }
      set {
        relation_ = value;
      }
    }

    /// <summary>Field number for the "isReleve" field.</summary>
    public const int IsReleveFieldNumber = 21;
    private bool isReleve_;
    /// <summary>
    /// 是否解除中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleve {
      get { return isReleve_; }
      set {
        isReleve_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetAllianceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetAllianceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (LeaderPlayerId != other.LeaderPlayerId) return false;
      if (LeaderName != other.LeaderName) return false;
      if (DiplomatistPlayerId != other.DiplomatistPlayerId) return false;
      if (DiplomatistName != other.DiplomatistName) return false;
      if (Level != other.Level) return false;
      if (MemberCount != other.MemberCount) return false;
      if (MemberMax != other.MemberMax) return false;
      if (Region != other.Region) return false;
      if (Power != other.Power) return false;
      if (TownCount != other.TownCount) return false;
      if (Notice != other.Notice) return false;
      if (ResMax != other.ResMax) return false;
      if (Res1 != other.Res1) return false;
      if (Res2 != other.Res2) return false;
      if (Res3 != other.Res3) return false;
      if (Res4 != other.Res4) return false;
      if (Score != other.Score) return false;
      if (ScoreMax != other.ScoreMax) return false;
      if (Relation != other.Relation) return false;
      if (IsReleve != other.IsReleve) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LeaderPlayerId != 0L) hash ^= LeaderPlayerId.GetHashCode();
      if (LeaderName.Length != 0) hash ^= LeaderName.GetHashCode();
      if (DiplomatistPlayerId != 0L) hash ^= DiplomatistPlayerId.GetHashCode();
      if (DiplomatistName.Length != 0) hash ^= DiplomatistName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (MemberMax != 0) hash ^= MemberMax.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (TownCount != 0) hash ^= TownCount.GetHashCode();
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      if (ResMax != 0) hash ^= ResMax.GetHashCode();
      if (Res1 != 0) hash ^= Res1.GetHashCode();
      if (Res2 != 0) hash ^= Res2.GetHashCode();
      if (Res3 != 0) hash ^= Res3.GetHashCode();
      if (Res4 != 0) hash ^= Res4.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (ScoreMax != 0) hash ^= ScoreMax.GetHashCode();
      if (Relation != 0) hash ^= Relation.GetHashCode();
      if (IsReleve != false) hash ^= IsReleve.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (LeaderPlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LeaderPlayerId);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LeaderName);
      }
      if (DiplomatistPlayerId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DiplomatistPlayerId);
      }
      if (DiplomatistName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DiplomatistName);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MemberCount);
      }
      if (MemberMax != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MemberMax);
      }
      if (Region != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Region);
      }
      if (Power != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Power);
      }
      if (TownCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TownCount);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Notice);
      }
      if (ResMax != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ResMax);
      }
      if (Res1 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Res1);
      }
      if (Res2 != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Res2);
      }
      if (Res3 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Res3);
      }
      if (Res4 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Res4);
      }
      if (Score != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Score);
      }
      if (ScoreMax != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ScoreMax);
      }
      if (Relation != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Relation);
      }
      if (IsReleve != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsReleve);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LeaderPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaderPlayerId);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderName);
      }
      if (DiplomatistPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiplomatistPlayerId);
      }
      if (DiplomatistName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiplomatistName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
      }
      if (MemberMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberMax);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (TownCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TownCount);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      if (ResMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResMax);
      }
      if (Res1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res1);
      }
      if (Res2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res2);
      }
      if (Res3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Res3);
      }
      if (Res4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Res4);
      }
      if (Score != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (ScoreMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScoreMax);
      }
      if (Relation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Relation);
      }
      if (IsReleve != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetAllianceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LeaderPlayerId != 0L) {
        LeaderPlayerId = other.LeaderPlayerId;
      }
      if (other.LeaderName.Length != 0) {
        LeaderName = other.LeaderName;
      }
      if (other.DiplomatistPlayerId != 0L) {
        DiplomatistPlayerId = other.DiplomatistPlayerId;
      }
      if (other.DiplomatistName.Length != 0) {
        DiplomatistName = other.DiplomatistName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.MemberMax != 0) {
        MemberMax = other.MemberMax;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.TownCount != 0) {
        TownCount = other.TownCount;
      }
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
      if (other.ResMax != 0) {
        ResMax = other.ResMax;
      }
      if (other.Res1 != 0) {
        Res1 = other.Res1;
      }
      if (other.Res2 != 0) {
        Res2 = other.Res2;
      }
      if (other.Res3 != 0) {
        Res3 = other.Res3;
      }
      if (other.Res4 != 0) {
        Res4 = other.Res4;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.ScoreMax != 0) {
        ScoreMax = other.ScoreMax;
      }
      if (other.Relation != 0) {
        Relation = other.Relation;
      }
      if (other.IsReleve != false) {
        IsReleve = other.IsReleve;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            LeaderPlayerId = input.ReadInt64();
            break;
          }
          case 26: {
            LeaderName = input.ReadString();
            break;
          }
          case 32: {
            DiplomatistPlayerId = input.ReadInt64();
            break;
          }
          case 42: {
            DiplomatistName = input.ReadString();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            MemberCount = input.ReadInt32();
            break;
          }
          case 64: {
            MemberMax = input.ReadInt32();
            break;
          }
          case 72: {
            Region = input.ReadInt32();
            break;
          }
          case 80: {
            Power = input.ReadInt32();
            break;
          }
          case 88: {
            TownCount = input.ReadInt32();
            break;
          }
          case 98: {
            Notice = input.ReadString();
            break;
          }
          case 104: {
            ResMax = input.ReadInt32();
            break;
          }
          case 112: {
            Res1 = input.ReadInt32();
            break;
          }
          case 120: {
            Res2 = input.ReadInt32();
            break;
          }
          case 128: {
            Res3 = input.ReadInt32();
            break;
          }
          case 136: {
            Res4 = input.ReadInt32();
            break;
          }
          case 144: {
            Score = input.ReadInt32();
            break;
          }
          case 152: {
            ScoreMax = input.ReadInt32();
            break;
          }
          case 160: {
            Relation = input.ReadInt32();
            break;
          }
          case 168: {
            IsReleve = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11004 申请加入军团:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_ApplyAlliance : pb::IMessage<C2S_ApplyAlliance> {
    private static readonly pb::MessageParser<C2S_ApplyAlliance> _parser = new pb::MessageParser<C2S_ApplyAlliance>(() => new C2S_ApplyAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ApplyAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAlliance(C2S_ApplyAlliance other) : this() {
      allianceId_ = other.allianceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAlliance Clone() {
      return new C2S_ApplyAlliance(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ApplyAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ApplyAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ApplyAlliance other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ApplyAlliance : pb::IMessage<S2C_ApplyAlliance> {
    private static readonly pb::MessageParser<S2C_ApplyAlliance> _parser = new pb::MessageParser<S2C_ApplyAlliance>(() => new S2C_ApplyAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ApplyAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAlliance(S2C_ApplyAlliance other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAlliance Clone() {
      return new S2C_ApplyAlliance(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ApplyAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ApplyAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ApplyAlliance other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11005 申请加入军团列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_ApplyAllianceList : pb::IMessage<C2S_ApplyAllianceList> {
    private static readonly pb::MessageParser<C2S_ApplyAllianceList> _parser = new pb::MessageParser<C2S_ApplyAllianceList>(() => new C2S_ApplyAllianceList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ApplyAllianceList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceList(C2S_ApplyAllianceList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceList Clone() {
      return new C2S_ApplyAllianceList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ApplyAllianceList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ApplyAllianceList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ApplyAllianceList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_ApplyAllianceList : pb::IMessage<S2C_ApplyAllianceList> {
    private static readonly pb::MessageParser<S2C_ApplyAllianceList> _parser = new pb::MessageParser<S2C_ApplyAllianceList>(() => new S2C_ApplyAllianceList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ApplyAllianceList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceList(S2C_ApplyAllianceList other) : this() {
      allianceInfo_ = other.allianceInfo_.Clone();
      joinAllianceCoolTime_ = other.joinAllianceCoolTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceList Clone() {
      return new S2C_ApplyAllianceList(this);
    }

    /// <summary>Field number for the "allianceInfo" field.</summary>
    public const int AllianceInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.ApplyAllianceInfo> _repeated_allianceInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.ApplyAllianceInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.ApplyAllianceInfo> allianceInfo_ = new pbc::RepeatedField<global::NBSGame.PB.ApplyAllianceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.ApplyAllianceInfo> AllianceInfo {
      get { return allianceInfo_; }
    }

    /// <summary>Field number for the "joinAllianceCoolTime" field.</summary>
    public const int JoinAllianceCoolTimeFieldNumber = 2;
    private long joinAllianceCoolTime_;
    /// <summary>
    /// 加军团冷却时间，单位毫秒，若为0则处于非冷却期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JoinAllianceCoolTime {
      get { return joinAllianceCoolTime_; }
      set {
        joinAllianceCoolTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ApplyAllianceList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ApplyAllianceList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allianceInfo_.Equals(other.allianceInfo_)) return false;
      if (JoinAllianceCoolTime != other.JoinAllianceCoolTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allianceInfo_.GetHashCode();
      if (JoinAllianceCoolTime != 0L) hash ^= JoinAllianceCoolTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allianceInfo_.WriteTo(output, _repeated_allianceInfo_codec);
      if (JoinAllianceCoolTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(JoinAllianceCoolTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allianceInfo_.CalculateSize(_repeated_allianceInfo_codec);
      if (JoinAllianceCoolTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JoinAllianceCoolTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ApplyAllianceList other) {
      if (other == null) {
        return;
      }
      allianceInfo_.Add(other.allianceInfo_);
      if (other.JoinAllianceCoolTime != 0L) {
        JoinAllianceCoolTime = other.JoinAllianceCoolTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allianceInfo_.AddEntriesFrom(input, _repeated_allianceInfo_codec);
            break;
          }
          case 16: {
            JoinAllianceCoolTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyAllianceInfo : pb::IMessage<ApplyAllianceInfo> {
    private static readonly pb::MessageParser<ApplyAllianceInfo> _parser = new pb::MessageParser<ApplyAllianceInfo>(() => new ApplyAllianceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyAllianceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyAllianceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyAllianceInfo(ApplyAllianceInfo other) : this() {
      allianceId_ = other.allianceId_;
      name_ = other.name_;
      level_ = other.level_;
      memberCount_ = other.memberCount_;
      memberMax_ = other.memberMax_;
      region_ = other.region_;
      distance_ = other.distance_;
      isJoin_ = other.isJoin_;
      isApply_ = other.isApply_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyAllianceInfo Clone() {
      return new ApplyAllianceInfo(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    /// <summary>
    /// 军团id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 军团名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 4;
    private int memberCount_;
    /// <summary>
    /// 人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "memberMax" field.</summary>
    public const int MemberMaxFieldNumber = 5;
    private int memberMax_;
    /// <summary>
    /// 人数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberMax {
      get { return memberMax_; }
      set {
        memberMax_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 6;
    private int region_;
    /// <summary>
    /// 所属州
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 7;
    private int distance_;
    /// <summary>
    /// 距离(远、近)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "isJoin" field.</summary>
    public const int IsJoinFieldNumber = 8;
    private bool isJoin_;
    /// <summary>
    /// 是否可直接加入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJoin {
      get { return isJoin_; }
      set {
        isJoin_ = value;
      }
    }

    /// <summary>Field number for the "isApply" field.</summary>
    public const int IsApplyFieldNumber = 9;
    private bool isApply_;
    /// <summary>
    /// 是否已申请（非可直接加入军团可用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsApply {
      get { return isApply_; }
      set {
        isApply_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyAllianceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyAllianceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (MemberCount != other.MemberCount) return false;
      if (MemberMax != other.MemberMax) return false;
      if (Region != other.Region) return false;
      if (Distance != other.Distance) return false;
      if (IsJoin != other.IsJoin) return false;
      if (IsApply != other.IsApply) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (MemberMax != 0) hash ^= MemberMax.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      if (IsJoin != false) hash ^= IsJoin.GetHashCode();
      if (IsApply != false) hash ^= IsApply.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MemberCount);
      }
      if (MemberMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberMax);
      }
      if (Region != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Region);
      }
      if (Distance != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Distance);
      }
      if (IsJoin != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsJoin);
      }
      if (IsApply != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsApply);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
      }
      if (MemberMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberMax);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      if (IsJoin != false) {
        size += 1 + 1;
      }
      if (IsApply != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyAllianceInfo other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.MemberMax != 0) {
        MemberMax = other.MemberMax;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      if (other.IsJoin != false) {
        IsJoin = other.IsJoin;
      }
      if (other.IsApply != false) {
        IsApply = other.IsApply;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            MemberCount = input.ReadInt32();
            break;
          }
          case 40: {
            MemberMax = input.ReadInt32();
            break;
          }
          case 48: {
            Region = input.ReadInt32();
            break;
          }
          case 56: {
            Distance = input.ReadInt32();
            break;
          }
          case 64: {
            IsJoin = input.ReadBool();
            break;
          }
          case 72: {
            IsApply = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11006 申请加入军团玩家列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_ApplyAlliancePlayerList : pb::IMessage<C2S_ApplyAlliancePlayerList> {
    private static readonly pb::MessageParser<C2S_ApplyAlliancePlayerList> _parser = new pb::MessageParser<C2S_ApplyAlliancePlayerList>(() => new C2S_ApplyAlliancePlayerList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ApplyAlliancePlayerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAlliancePlayerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAlliancePlayerList(C2S_ApplyAlliancePlayerList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAlliancePlayerList Clone() {
      return new C2S_ApplyAlliancePlayerList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ApplyAlliancePlayerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ApplyAlliancePlayerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ApplyAlliancePlayerList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_ApplyAlliancePlayerList : pb::IMessage<S2C_ApplyAlliancePlayerList> {
    private static readonly pb::MessageParser<S2C_ApplyAlliancePlayerList> _parser = new pb::MessageParser<S2C_ApplyAlliancePlayerList>(() => new S2C_ApplyAlliancePlayerList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ApplyAlliancePlayerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAlliancePlayerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAlliancePlayerList(S2C_ApplyAlliancePlayerList other) : this() {
      playerInfo_ = other.playerInfo_.Clone();
      isOpen_ = other.isOpen_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAlliancePlayerList Clone() {
      return new S2C_ApplyAlliancePlayerList(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.ApplyAlliancePlayerInfo> _repeated_playerInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.ApplyAlliancePlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.ApplyAlliancePlayerInfo> playerInfo_ = new pbc::RepeatedField<global::NBSGame.PB.ApplyAlliancePlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.ApplyAlliancePlayerInfo> PlayerInfo {
      get { return playerInfo_; }
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 2;
    private bool isOpen_;
    /// <summary>
    /// 是否开放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ApplyAlliancePlayerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ApplyAlliancePlayerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerInfo_.Equals(other.playerInfo_)) return false;
      if (IsOpen != other.IsOpen) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerInfo_.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
      if (IsOpen != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ApplyAlliancePlayerList other) {
      if (other == null) {
        return;
      }
      playerInfo_.Add(other.playerInfo_);
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyAlliancePlayerInfo : pb::IMessage<ApplyAlliancePlayerInfo> {
    private static readonly pb::MessageParser<ApplyAlliancePlayerInfo> _parser = new pb::MessageParser<ApplyAlliancePlayerInfo>(() => new ApplyAlliancePlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyAlliancePlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyAlliancePlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyAlliancePlayerInfo(ApplyAlliancePlayerInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      power_ = other.power_;
      region_ = other.region_;
      isRead_ = other.isRead_;
      applyTime_ = other.applyTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyAlliancePlayerInfo Clone() {
      return new ApplyAlliancePlayerInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 3;
    private int power_;
    /// <summary>
    /// 势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 4;
    private int region_;
    /// <summary>
    /// 所属州
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "isRead" field.</summary>
    public const int IsReadFieldNumber = 5;
    private bool isRead_;
    /// <summary>
    /// 是否已读
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRead {
      get { return isRead_; }
      set {
        isRead_ = value;
      }
    }

    /// <summary>Field number for the "applyTime" field.</summary>
    public const int ApplyTimeFieldNumber = 6;
    private long applyTime_;
    /// <summary>
    /// 申请时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApplyTime {
      get { return applyTime_; }
      set {
        applyTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyAlliancePlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyAlliancePlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Power != other.Power) return false;
      if (Region != other.Region) return false;
      if (IsRead != other.IsRead) return false;
      if (ApplyTime != other.ApplyTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (IsRead != false) hash ^= IsRead.GetHashCode();
      if (ApplyTime != 0L) hash ^= ApplyTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Power != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Power);
      }
      if (Region != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Region);
      }
      if (IsRead != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRead);
      }
      if (ApplyTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ApplyTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (IsRead != false) {
        size += 1 + 1;
      }
      if (ApplyTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyAlliancePlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.IsRead != false) {
        IsRead = other.IsRead;
      }
      if (other.ApplyTime != 0L) {
        ApplyTime = other.ApplyTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Power = input.ReadInt32();
            break;
          }
          case 32: {
            Region = input.ReadInt32();
            break;
          }
          case 40: {
            IsRead = input.ReadBool();
            break;
          }
          case 48: {
            ApplyTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11007 申请加入军团处理:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_ApplyAllianceProcessor : pb::IMessage<C2S_ApplyAllianceProcessor> {
    private static readonly pb::MessageParser<C2S_ApplyAllianceProcessor> _parser = new pb::MessageParser<C2S_ApplyAllianceProcessor>(() => new C2S_ApplyAllianceProcessor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ApplyAllianceProcessor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceProcessor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceProcessor(C2S_ApplyAllianceProcessor other) : this() {
      playerId_ = other.playerId_;
      isAgree_ = other.isAgree_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceProcessor Clone() {
      return new C2S_ApplyAllianceProcessor(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "isAgree" field.</summary>
    public const int IsAgreeFieldNumber = 2;
    private bool isAgree_;
    /// <summary>
    /// 是否同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ApplyAllianceProcessor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ApplyAllianceProcessor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (IsAgree != other.IsAgree) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (IsAgree != false) hash ^= IsAgree.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (IsAgree != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAgree);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ApplyAllianceProcessor other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.IsAgree != false) {
        IsAgree = other.IsAgree;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            IsAgree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ApplyAllianceProcessor : pb::IMessage<S2C_ApplyAllianceProcessor> {
    private static readonly pb::MessageParser<S2C_ApplyAllianceProcessor> _parser = new pb::MessageParser<S2C_ApplyAllianceProcessor>(() => new S2C_ApplyAllianceProcessor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ApplyAllianceProcessor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceProcessor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceProcessor(S2C_ApplyAllianceProcessor other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceProcessor Clone() {
      return new S2C_ApplyAllianceProcessor(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ApplyAllianceProcessor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ApplyAllianceProcessor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ApplyAllianceProcessor other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11008 邀请加入军团:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_InviteAlliance : pb::IMessage<C2S_InviteAlliance> {
    private static readonly pb::MessageParser<C2S_InviteAlliance> _parser = new pb::MessageParser<C2S_InviteAlliance>(() => new C2S_InviteAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_InviteAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAlliance(C2S_InviteAlliance other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAlliance Clone() {
      return new C2S_InviteAlliance(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_InviteAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_InviteAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_InviteAlliance other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_InviteAlliance : pb::IMessage<S2C_InviteAlliance> {
    private static readonly pb::MessageParser<S2C_InviteAlliance> _parser = new pb::MessageParser<S2C_InviteAlliance>(() => new S2C_InviteAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_InviteAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAlliance(S2C_InviteAlliance other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAlliance Clone() {
      return new S2C_InviteAlliance(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_InviteAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_InviteAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_InviteAlliance other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11009 邀请加入军团列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_InviteAllianceList : pb::IMessage<C2S_InviteAllianceList> {
    private static readonly pb::MessageParser<C2S_InviteAllianceList> _parser = new pb::MessageParser<C2S_InviteAllianceList>(() => new C2S_InviteAllianceList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_InviteAllianceList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAllianceList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAllianceList(C2S_InviteAllianceList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAllianceList Clone() {
      return new C2S_InviteAllianceList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_InviteAllianceList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_InviteAllianceList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_InviteAllianceList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_InviteAllianceList : pb::IMessage<S2C_InviteAllianceList> {
    private static readonly pb::MessageParser<S2C_InviteAllianceList> _parser = new pb::MessageParser<S2C_InviteAllianceList>(() => new S2C_InviteAllianceList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_InviteAllianceList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAllianceList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAllianceList(S2C_InviteAllianceList other) : this() {
      inviteAllianceInfo_ = other.inviteAllianceInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAllianceList Clone() {
      return new S2C_InviteAllianceList(this);
    }

    /// <summary>Field number for the "inviteAllianceInfo" field.</summary>
    public const int InviteAllianceInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.InviteAllianceInfo> _repeated_inviteAllianceInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.InviteAllianceInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.InviteAllianceInfo> inviteAllianceInfo_ = new pbc::RepeatedField<global::NBSGame.PB.InviteAllianceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.InviteAllianceInfo> InviteAllianceInfo {
      get { return inviteAllianceInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_InviteAllianceList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_InviteAllianceList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inviteAllianceInfo_.Equals(other.inviteAllianceInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inviteAllianceInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inviteAllianceInfo_.WriteTo(output, _repeated_inviteAllianceInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inviteAllianceInfo_.CalculateSize(_repeated_inviteAllianceInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_InviteAllianceList other) {
      if (other == null) {
        return;
      }
      inviteAllianceInfo_.Add(other.inviteAllianceInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            inviteAllianceInfo_.AddEntriesFrom(input, _repeated_inviteAllianceInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InviteAllianceInfo : pb::IMessage<InviteAllianceInfo> {
    private static readonly pb::MessageParser<InviteAllianceInfo> _parser = new pb::MessageParser<InviteAllianceInfo>(() => new InviteAllianceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviteAllianceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteAllianceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteAllianceInfo(InviteAllianceInfo other) : this() {
      allianceId_ = other.allianceId_;
      name_ = other.name_;
      level_ = other.level_;
      memberCount_ = other.memberCount_;
      memberMax_ = other.memberMax_;
      invitePlayerName_ = other.invitePlayerName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteAllianceInfo Clone() {
      return new InviteAllianceInfo(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    /// <summary>
    /// 军团id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 军团名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 4;
    private int memberCount_;
    /// <summary>
    /// 人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "memberMax" field.</summary>
    public const int MemberMaxFieldNumber = 5;
    private int memberMax_;
    /// <summary>
    /// 人数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberMax {
      get { return memberMax_; }
      set {
        memberMax_ = value;
      }
    }

    /// <summary>Field number for the "invitePlayerName" field.</summary>
    public const int InvitePlayerNameFieldNumber = 6;
    private string invitePlayerName_ = "";
    /// <summary>
    /// 邀请发出人名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvitePlayerName {
      get { return invitePlayerName_; }
      set {
        invitePlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InviteAllianceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InviteAllianceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (MemberCount != other.MemberCount) return false;
      if (MemberMax != other.MemberMax) return false;
      if (InvitePlayerName != other.InvitePlayerName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (MemberMax != 0) hash ^= MemberMax.GetHashCode();
      if (InvitePlayerName.Length != 0) hash ^= InvitePlayerName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MemberCount);
      }
      if (MemberMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberMax);
      }
      if (InvitePlayerName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(InvitePlayerName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
      }
      if (MemberMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberMax);
      }
      if (InvitePlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvitePlayerName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InviteAllianceInfo other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.MemberMax != 0) {
        MemberMax = other.MemberMax;
      }
      if (other.InvitePlayerName.Length != 0) {
        InvitePlayerName = other.InvitePlayerName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            MemberCount = input.ReadInt32();
            break;
          }
          case 40: {
            MemberMax = input.ReadInt32();
            break;
          }
          case 50: {
            InvitePlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11010 邀请加入军团处理:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_InviteAllianceProcessor : pb::IMessage<C2S_InviteAllianceProcessor> {
    private static readonly pb::MessageParser<C2S_InviteAllianceProcessor> _parser = new pb::MessageParser<C2S_InviteAllianceProcessor>(() => new C2S_InviteAllianceProcessor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_InviteAllianceProcessor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAllianceProcessor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAllianceProcessor(C2S_InviteAllianceProcessor other) : this() {
      allianceId_ = other.allianceId_;
      isAgree_ = other.isAgree_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_InviteAllianceProcessor Clone() {
      return new C2S_InviteAllianceProcessor(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "isAgree" field.</summary>
    public const int IsAgreeFieldNumber = 2;
    private bool isAgree_;
    /// <summary>
    /// 是否同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_InviteAllianceProcessor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_InviteAllianceProcessor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (IsAgree != other.IsAgree) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (IsAgree != false) hash ^= IsAgree.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (IsAgree != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAgree);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_InviteAllianceProcessor other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.IsAgree != false) {
        IsAgree = other.IsAgree;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 16: {
            IsAgree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_InviteAllianceProcessor : pb::IMessage<S2C_InviteAllianceProcessor> {
    private static readonly pb::MessageParser<S2C_InviteAllianceProcessor> _parser = new pb::MessageParser<S2C_InviteAllianceProcessor>(() => new S2C_InviteAllianceProcessor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_InviteAllianceProcessor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAllianceProcessor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAllianceProcessor(S2C_InviteAllianceProcessor other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_InviteAllianceProcessor Clone() {
      return new S2C_InviteAllianceProcessor(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_InviteAllianceProcessor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_InviteAllianceProcessor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_InviteAllianceProcessor other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11011 清空邀请加入军团列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_ClearInviteAlliance : pb::IMessage<C2S_ClearInviteAlliance> {
    private static readonly pb::MessageParser<C2S_ClearInviteAlliance> _parser = new pb::MessageParser<C2S_ClearInviteAlliance>(() => new C2S_ClearInviteAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ClearInviteAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ClearInviteAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ClearInviteAlliance(C2S_ClearInviteAlliance other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ClearInviteAlliance Clone() {
      return new C2S_ClearInviteAlliance(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ClearInviteAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ClearInviteAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ClearInviteAlliance other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_ClearInviteAlliance : pb::IMessage<S2C_ClearInviteAlliance> {
    private static readonly pb::MessageParser<S2C_ClearInviteAlliance> _parser = new pb::MessageParser<S2C_ClearInviteAlliance>(() => new S2C_ClearInviteAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ClearInviteAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClearInviteAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClearInviteAlliance(S2C_ClearInviteAlliance other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClearInviteAlliance Clone() {
      return new S2C_ClearInviteAlliance(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ClearInviteAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ClearInviteAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ClearInviteAlliance other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11012 获取军团成员列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetMemberList : pb::IMessage<C2S_GetMemberList> {
    private static readonly pb::MessageParser<C2S_GetMemberList> _parser = new pb::MessageParser<C2S_GetMemberList>(() => new C2S_GetMemberList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetMemberList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMemberList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMemberList(C2S_GetMemberList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMemberList Clone() {
      return new C2S_GetMemberList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetMemberList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetMemberList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetMemberList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_GetMemberList : pb::IMessage<S2C_GetMemberList> {
    private static readonly pb::MessageParser<S2C_GetMemberList> _parser = new pb::MessageParser<S2C_GetMemberList>(() => new S2C_GetMemberList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetMemberList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMemberList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMemberList(S2C_GetMemberList other) : this() {
      memberInfo_ = other.memberInfo_.Clone();
      demiseTimestamp_ = other.demiseTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMemberList Clone() {
      return new S2C_GetMemberList(this);
    }

    /// <summary>Field number for the "memberInfo" field.</summary>
    public const int MemberInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.MemberInfo> _repeated_memberInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.MemberInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.MemberInfo> memberInfo_ = new pbc::RepeatedField<global::NBSGame.PB.MemberInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.MemberInfo> MemberInfo {
      get { return memberInfo_; }
    }

    /// <summary>Field number for the "demiseTimestamp" field.</summary>
    public const int DemiseTimestampFieldNumber = 2;
    private long demiseTimestamp_;
    /// <summary>
    /// 禅让结束时间戳，若无禅让为-1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DemiseTimestamp {
      get { return demiseTimestamp_; }
      set {
        demiseTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetMemberList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetMemberList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!memberInfo_.Equals(other.memberInfo_)) return false;
      if (DemiseTimestamp != other.DemiseTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= memberInfo_.GetHashCode();
      if (DemiseTimestamp != 0L) hash ^= DemiseTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      memberInfo_.WriteTo(output, _repeated_memberInfo_codec);
      if (DemiseTimestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DemiseTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += memberInfo_.CalculateSize(_repeated_memberInfo_codec);
      if (DemiseTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DemiseTimestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetMemberList other) {
      if (other == null) {
        return;
      }
      memberInfo_.Add(other.memberInfo_);
      if (other.DemiseTimestamp != 0L) {
        DemiseTimestamp = other.DemiseTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            memberInfo_.AddEntriesFrom(input, _repeated_memberInfo_codec);
            break;
          }
          case 16: {
            DemiseTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberInfo : pb::IMessage<MemberInfo> {
    private static readonly pb::MessageParser<MemberInfo> _parser = new pb::MessageParser<MemberInfo>(() => new MemberInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberInfo(MemberInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      power_ = other.power_;
      region_ = other.region_;
      cellId_ = other.cellId_;
      position_ = other.position_;
      contribution_ = other.contribution_;
      contributionWeek_ = other.contributionWeek_;
      score_ = other.score_;
      scoreWeek_ = other.scoreWeek_;
      donate_ = other.donate_;
      donateWeek_ = other.donateWeek_;
      isCapture_ = other.isCapture_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberInfo Clone() {
      return new MemberInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private int avatar_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private int power_;
    /// <summary>
    /// 势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 5;
    private int region_;
    /// <summary>
    /// 所属州
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 6;
    private int cellId_;
    /// <summary>
    /// 坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 7;
    private int position_;
    /// <summary>
    /// 职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "contribution" field.</summary>
    public const int ContributionFieldNumber = 8;
    private int contribution_;
    /// <summary>
    /// 贡献总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Contribution {
      get { return contribution_; }
      set {
        contribution_ = value;
      }
    }

    /// <summary>Field number for the "contributionWeek" field.</summary>
    public const int ContributionWeekFieldNumber = 9;
    private int contributionWeek_;
    /// <summary>
    /// 周贡献总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContributionWeek {
      get { return contributionWeek_; }
      set {
        contributionWeek_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 10;
    private int score_;
    /// <summary>
    /// 战功总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "scoreWeek" field.</summary>
    public const int ScoreWeekFieldNumber = 11;
    private int scoreWeek_;
    /// <summary>
    /// 周战功总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreWeek {
      get { return scoreWeek_; }
      set {
        scoreWeek_ = value;
      }
    }

    /// <summary>Field number for the "donate" field.</summary>
    public const int DonateFieldNumber = 12;
    private int donate_;
    /// <summary>
    /// 捐献总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Donate {
      get { return donate_; }
      set {
        donate_ = value;
      }
    }

    /// <summary>Field number for the "donateWeek" field.</summary>
    public const int DonateWeekFieldNumber = 13;
    private int donateWeek_;
    /// <summary>
    /// 周捐献总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DonateWeek {
      get { return donateWeek_; }
      set {
        donateWeek_ = value;
      }
    }

    /// <summary>Field number for the "isCapture" field.</summary>
    public const int IsCaptureFieldNumber = 14;
    private bool isCapture_;
    /// <summary>
    /// 是否被俘虏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCapture {
      get { return isCapture_; }
      set {
        isCapture_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (Power != other.Power) return false;
      if (Region != other.Region) return false;
      if (CellId != other.CellId) return false;
      if (Position != other.Position) return false;
      if (Contribution != other.Contribution) return false;
      if (ContributionWeek != other.ContributionWeek) return false;
      if (Score != other.Score) return false;
      if (ScoreWeek != other.ScoreWeek) return false;
      if (Donate != other.Donate) return false;
      if (DonateWeek != other.DonateWeek) return false;
      if (IsCapture != other.IsCapture) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar != 0) hash ^= Avatar.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (CellId != 0) hash ^= CellId.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Contribution != 0) hash ^= Contribution.GetHashCode();
      if (ContributionWeek != 0) hash ^= ContributionWeek.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (ScoreWeek != 0) hash ^= ScoreWeek.GetHashCode();
      if (Donate != 0) hash ^= Donate.GetHashCode();
      if (DonateWeek != 0) hash ^= DonateWeek.GetHashCode();
      if (IsCapture != false) hash ^= IsCapture.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Avatar);
      }
      if (Power != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Power);
      }
      if (Region != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Region);
      }
      if (CellId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CellId);
      }
      if (Position != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Position);
      }
      if (Contribution != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Contribution);
      }
      if (ContributionWeek != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ContributionWeek);
      }
      if (Score != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Score);
      }
      if (ScoreWeek != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ScoreWeek);
      }
      if (Donate != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Donate);
      }
      if (DonateWeek != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DonateWeek);
      }
      if (IsCapture != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsCapture);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Avatar);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (Contribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Contribution);
      }
      if (ContributionWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContributionWeek);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (ScoreWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreWeek);
      }
      if (Donate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Donate);
      }
      if (DonateWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DonateWeek);
      }
      if (IsCapture != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar != 0) {
        Avatar = other.Avatar;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Contribution != 0) {
        Contribution = other.Contribution;
      }
      if (other.ContributionWeek != 0) {
        ContributionWeek = other.ContributionWeek;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.ScoreWeek != 0) {
        ScoreWeek = other.ScoreWeek;
      }
      if (other.Donate != 0) {
        Donate = other.Donate;
      }
      if (other.DonateWeek != 0) {
        DonateWeek = other.DonateWeek;
      }
      if (other.IsCapture != false) {
        IsCapture = other.IsCapture;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Avatar = input.ReadInt32();
            break;
          }
          case 32: {
            Power = input.ReadInt32();
            break;
          }
          case 40: {
            Region = input.ReadInt32();
            break;
          }
          case 48: {
            CellId = input.ReadInt32();
            break;
          }
          case 56: {
            Position = input.ReadInt32();
            break;
          }
          case 64: {
            Contribution = input.ReadInt32();
            break;
          }
          case 72: {
            ContributionWeek = input.ReadInt32();
            break;
          }
          case 80: {
            Score = input.ReadInt32();
            break;
          }
          case 88: {
            ScoreWeek = input.ReadInt32();
            break;
          }
          case 96: {
            Donate = input.ReadInt32();
            break;
          }
          case 104: {
            DonateWeek = input.ReadInt32();
            break;
          }
          case 112: {
            IsCapture = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11013 获取军团俘虏列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetCaptureList : pb::IMessage<C2S_GetCaptureList> {
    private static readonly pb::MessageParser<C2S_GetCaptureList> _parser = new pb::MessageParser<C2S_GetCaptureList>(() => new C2S_GetCaptureList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetCaptureList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetCaptureList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetCaptureList(C2S_GetCaptureList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetCaptureList Clone() {
      return new C2S_GetCaptureList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetCaptureList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetCaptureList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetCaptureList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_GetCaptureList : pb::IMessage<S2C_GetCaptureList> {
    private static readonly pb::MessageParser<S2C_GetCaptureList> _parser = new pb::MessageParser<S2C_GetCaptureList>(() => new S2C_GetCaptureList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetCaptureList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetCaptureList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetCaptureList(S2C_GetCaptureList other) : this() {
      captureInfo_ = other.captureInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetCaptureList Clone() {
      return new S2C_GetCaptureList(this);
    }

    /// <summary>Field number for the "captureInfo" field.</summary>
    public const int CaptureInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.CaptureInfo> _repeated_captureInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.CaptureInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.CaptureInfo> captureInfo_ = new pbc::RepeatedField<global::NBSGame.PB.CaptureInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.CaptureInfo> CaptureInfo {
      get { return captureInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetCaptureList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetCaptureList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!captureInfo_.Equals(other.captureInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= captureInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      captureInfo_.WriteTo(output, _repeated_captureInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += captureInfo_.CalculateSize(_repeated_captureInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetCaptureList other) {
      if (other == null) {
        return;
      }
      captureInfo_.Add(other.captureInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            captureInfo_.AddEntriesFrom(input, _repeated_captureInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CaptureInfo : pb::IMessage<CaptureInfo> {
    private static readonly pb::MessageParser<CaptureInfo> _parser = new pb::MessageParser<CaptureInfo>(() => new CaptureInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaptureInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureInfo(CaptureInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      region_ = other.region_;
      cellId_ = other.cellId_;
      captureTimestamp_ = other.captureTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureInfo Clone() {
      return new CaptureInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 3;
    private int region_;
    /// <summary>
    /// 所属州
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 4;
    private int cellId_;
    /// <summary>
    /// 坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    /// <summary>Field number for the "captureTimestamp" field.</summary>
    public const int CaptureTimestampFieldNumber = 5;
    private long captureTimestamp_;
    /// <summary>
    /// 被俘虏时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CaptureTimestamp {
      get { return captureTimestamp_; }
      set {
        captureTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaptureInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaptureInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Region != other.Region) return false;
      if (CellId != other.CellId) return false;
      if (CaptureTimestamp != other.CaptureTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (CellId != 0) hash ^= CellId.GetHashCode();
      if (CaptureTimestamp != 0L) hash ^= CaptureTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Region != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Region);
      }
      if (CellId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CellId);
      }
      if (CaptureTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CaptureTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      if (CaptureTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CaptureTimestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaptureInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
      if (other.CaptureTimestamp != 0L) {
        CaptureTimestamp = other.CaptureTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Region = input.ReadInt32();
            break;
          }
          case 32: {
            CellId = input.ReadInt32();
            break;
          }
          case 40: {
            CaptureTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11014 获取军团分组列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetGroupList : pb::IMessage<C2S_GetGroupList> {
    private static readonly pb::MessageParser<C2S_GetGroupList> _parser = new pb::MessageParser<C2S_GetGroupList>(() => new C2S_GetGroupList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetGroupList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupList(C2S_GetGroupList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupList Clone() {
      return new C2S_GetGroupList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetGroupList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetGroupList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetGroupList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_GetGroupList : pb::IMessage<S2C_GetGroupList> {
    private static readonly pb::MessageParser<S2C_GetGroupList> _parser = new pb::MessageParser<S2C_GetGroupList>(() => new S2C_GetGroupList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetGroupList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupList(S2C_GetGroupList other) : this() {
      groupInfo_ = other.groupInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupList Clone() {
      return new S2C_GetGroupList(this);
    }

    /// <summary>Field number for the "groupInfo" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.GroupInfo> _repeated_groupInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.GroupInfo> groupInfo_ = new pbc::RepeatedField<global::NBSGame.PB.GroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.GroupInfo> GroupInfo {
      get { return groupInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetGroupList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetGroupList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupInfo_.Equals(other.groupInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupInfo_.WriteTo(output, _repeated_groupInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupInfo_.CalculateSize(_repeated_groupInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetGroupList other) {
      if (other == null) {
        return;
      }
      groupInfo_.Add(other.groupInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupInfo_.AddEntriesFrom(input, _repeated_groupInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupInfo : pb::IMessage<GroupInfo> {
    private static readonly pb::MessageParser<GroupInfo> _parser = new pb::MessageParser<GroupInfo>(() => new GroupInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo(GroupInfo other) : this() {
      groupId_ = other.groupId_;
      name_ = other.name_;
      leaderName_ = other.leaderName_;
      count_ = other.count_;
      avgScore_ = other.avgScore_;
      avgScoreWeek_ = other.avgScoreWeek_;
      avgDonate_ = other.avgDonate_;
      avgDonateWeek_ = other.avgDonateWeek_;
      leaderPlayrId_ = other.leaderPlayrId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo Clone() {
      return new GroupInfo(this);
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private long groupId_;
    /// <summary>
    /// 分区id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 分组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 3;
    private string leaderName_ = "";
    /// <summary>
    /// 组长名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    /// <summary>
    /// 人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "avgScore" field.</summary>
    public const int AvgScoreFieldNumber = 5;
    private int avgScore_;
    /// <summary>
    /// 人均战功总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvgScore {
      get { return avgScore_; }
      set {
        avgScore_ = value;
      }
    }

    /// <summary>Field number for the "avgScoreWeek" field.</summary>
    public const int AvgScoreWeekFieldNumber = 6;
    private int avgScoreWeek_;
    /// <summary>
    /// 人均周战功总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvgScoreWeek {
      get { return avgScoreWeek_; }
      set {
        avgScoreWeek_ = value;
      }
    }

    /// <summary>Field number for the "avgDonate" field.</summary>
    public const int AvgDonateFieldNumber = 7;
    private int avgDonate_;
    /// <summary>
    /// 人均捐献总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvgDonate {
      get { return avgDonate_; }
      set {
        avgDonate_ = value;
      }
    }

    /// <summary>Field number for the "avgDonateWeek" field.</summary>
    public const int AvgDonateWeekFieldNumber = 8;
    private int avgDonateWeek_;
    /// <summary>
    /// 人均周捐献总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvgDonateWeek {
      get { return avgDonateWeek_; }
      set {
        avgDonateWeek_ = value;
      }
    }

    /// <summary>Field number for the "leaderPlayrId" field.</summary>
    public const int LeaderPlayrIdFieldNumber = 9;
    private long leaderPlayrId_;
    /// <summary>
    /// 组长id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeaderPlayrId {
      get { return leaderPlayrId_; }
      set {
        leaderPlayrId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Name != other.Name) return false;
      if (LeaderName != other.LeaderName) return false;
      if (Count != other.Count) return false;
      if (AvgScore != other.AvgScore) return false;
      if (AvgScoreWeek != other.AvgScoreWeek) return false;
      if (AvgDonate != other.AvgDonate) return false;
      if (AvgDonateWeek != other.AvgDonateWeek) return false;
      if (LeaderPlayrId != other.LeaderPlayrId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LeaderName.Length != 0) hash ^= LeaderName.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (AvgScore != 0) hash ^= AvgScore.GetHashCode();
      if (AvgScoreWeek != 0) hash ^= AvgScoreWeek.GetHashCode();
      if (AvgDonate != 0) hash ^= AvgDonate.GetHashCode();
      if (AvgDonateWeek != 0) hash ^= AvgDonateWeek.GetHashCode();
      if (LeaderPlayrId != 0L) hash ^= LeaderPlayrId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GroupId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LeaderName);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (AvgScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AvgScore);
      }
      if (AvgScoreWeek != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AvgScoreWeek);
      }
      if (AvgDonate != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AvgDonate);
      }
      if (AvgDonateWeek != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AvgDonateWeek);
      }
      if (LeaderPlayrId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LeaderPlayrId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderName);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (AvgScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgScore);
      }
      if (AvgScoreWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgScoreWeek);
      }
      if (AvgDonate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgDonate);
      }
      if (AvgDonateWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgDonateWeek);
      }
      if (LeaderPlayrId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaderPlayrId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LeaderName.Length != 0) {
        LeaderName = other.LeaderName;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.AvgScore != 0) {
        AvgScore = other.AvgScore;
      }
      if (other.AvgScoreWeek != 0) {
        AvgScoreWeek = other.AvgScoreWeek;
      }
      if (other.AvgDonate != 0) {
        AvgDonate = other.AvgDonate;
      }
      if (other.AvgDonateWeek != 0) {
        AvgDonateWeek = other.AvgDonateWeek;
      }
      if (other.LeaderPlayrId != 0L) {
        LeaderPlayrId = other.LeaderPlayrId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            LeaderName = input.ReadString();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
          case 40: {
            AvgScore = input.ReadInt32();
            break;
          }
          case 48: {
            AvgScoreWeek = input.ReadInt32();
            break;
          }
          case 56: {
            AvgDonate = input.ReadInt32();
            break;
          }
          case 64: {
            AvgDonateWeek = input.ReadInt32();
            break;
          }
          case 72: {
            LeaderPlayrId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11015 获取军团加成:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetAllianceAddition : pb::IMessage<C2S_GetAllianceAddition> {
    private static readonly pb::MessageParser<C2S_GetAllianceAddition> _parser = new pb::MessageParser<C2S_GetAllianceAddition>(() => new C2S_GetAllianceAddition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetAllianceAddition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceAddition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceAddition(C2S_GetAllianceAddition other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceAddition Clone() {
      return new C2S_GetAllianceAddition(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetAllianceAddition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetAllianceAddition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetAllianceAddition other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_GetAllianceAddition : pb::IMessage<S2C_GetAllianceAddition> {
    private static readonly pb::MessageParser<S2C_GetAllianceAddition> _parser = new pb::MessageParser<S2C_GetAllianceAddition>(() => new S2C_GetAllianceAddition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetAllianceAddition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceAddition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceAddition(S2C_GetAllianceAddition other) : this() {
      res1Addition_ = other.res1Addition_;
      res2Addition_ = other.res2Addition_;
      res3Addition_ = other.res3Addition_;
      res4Addition_ = other.res4Addition_;
      memberAddition_ = other.memberAddition_;
      townRes1Addition_ = other.townRes1Addition_;
      townRes2Addition_ = other.townRes2Addition_;
      townRes3Addition_ = other.townRes3Addition_;
      townRes4Addition_ = other.townRes4Addition_;
      townMemberAddition_ = other.townMemberAddition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceAddition Clone() {
      return new S2C_GetAllianceAddition(this);
    }

    /// <summary>Field number for the "res1addition" field.</summary>
    public const int Res1AdditionFieldNumber = 1;
    private int res1Addition_;
    /// <summary>
    /// 资源1加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res1Addition {
      get { return res1Addition_; }
      set {
        res1Addition_ = value;
      }
    }

    /// <summary>Field number for the "res2addition" field.</summary>
    public const int Res2AdditionFieldNumber = 2;
    private int res2Addition_;
    /// <summary>
    /// 资源2加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res2Addition {
      get { return res2Addition_; }
      set {
        res2Addition_ = value;
      }
    }

    /// <summary>Field number for the "res3addition" field.</summary>
    public const int Res3AdditionFieldNumber = 3;
    private int res3Addition_;
    /// <summary>
    /// 资源3加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res3Addition {
      get { return res3Addition_; }
      set {
        res3Addition_ = value;
      }
    }

    /// <summary>Field number for the "res4addition" field.</summary>
    public const int Res4AdditionFieldNumber = 4;
    private int res4Addition_;
    /// <summary>
    /// 资源4加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res4Addition {
      get { return res4Addition_; }
      set {
        res4Addition_ = value;
      }
    }

    /// <summary>Field number for the "memberAddition" field.</summary>
    public const int MemberAdditionFieldNumber = 5;
    private int memberAddition_;
    /// <summary>
    /// 成员人数增加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberAddition {
      get { return memberAddition_; }
      set {
        memberAddition_ = value;
      }
    }

    /// <summary>Field number for the "townRes1addition" field.</summary>
    public const int TownRes1AdditionFieldNumber = 6;
    private int townRes1Addition_;
    /// <summary>
    /// 城池资源1加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TownRes1Addition {
      get { return townRes1Addition_; }
      set {
        townRes1Addition_ = value;
      }
    }

    /// <summary>Field number for the "townRes2addition" field.</summary>
    public const int TownRes2AdditionFieldNumber = 7;
    private int townRes2Addition_;
    /// <summary>
    /// 城池资源2加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TownRes2Addition {
      get { return townRes2Addition_; }
      set {
        townRes2Addition_ = value;
      }
    }

    /// <summary>Field number for the "townRes3addition" field.</summary>
    public const int TownRes3AdditionFieldNumber = 8;
    private int townRes3Addition_;
    /// <summary>
    /// 城池资源3加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TownRes3Addition {
      get { return townRes3Addition_; }
      set {
        townRes3Addition_ = value;
      }
    }

    /// <summary>Field number for the "townRes4addition" field.</summary>
    public const int TownRes4AdditionFieldNumber = 9;
    private int townRes4Addition_;
    /// <summary>
    /// 城池资源4加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TownRes4Addition {
      get { return townRes4Addition_; }
      set {
        townRes4Addition_ = value;
      }
    }

    /// <summary>Field number for the "townMemberAddition" field.</summary>
    public const int TownMemberAdditionFieldNumber = 10;
    private int townMemberAddition_;
    /// <summary>
    /// 城池成员人数增加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TownMemberAddition {
      get { return townMemberAddition_; }
      set {
        townMemberAddition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetAllianceAddition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetAllianceAddition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Res1Addition != other.Res1Addition) return false;
      if (Res2Addition != other.Res2Addition) return false;
      if (Res3Addition != other.Res3Addition) return false;
      if (Res4Addition != other.Res4Addition) return false;
      if (MemberAddition != other.MemberAddition) return false;
      if (TownRes1Addition != other.TownRes1Addition) return false;
      if (TownRes2Addition != other.TownRes2Addition) return false;
      if (TownRes3Addition != other.TownRes3Addition) return false;
      if (TownRes4Addition != other.TownRes4Addition) return false;
      if (TownMemberAddition != other.TownMemberAddition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Res1Addition != 0) hash ^= Res1Addition.GetHashCode();
      if (Res2Addition != 0) hash ^= Res2Addition.GetHashCode();
      if (Res3Addition != 0) hash ^= Res3Addition.GetHashCode();
      if (Res4Addition != 0) hash ^= Res4Addition.GetHashCode();
      if (MemberAddition != 0) hash ^= MemberAddition.GetHashCode();
      if (TownRes1Addition != 0) hash ^= TownRes1Addition.GetHashCode();
      if (TownRes2Addition != 0) hash ^= TownRes2Addition.GetHashCode();
      if (TownRes3Addition != 0) hash ^= TownRes3Addition.GetHashCode();
      if (TownRes4Addition != 0) hash ^= TownRes4Addition.GetHashCode();
      if (TownMemberAddition != 0) hash ^= TownMemberAddition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Res1Addition != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Res1Addition);
      }
      if (Res2Addition != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Res2Addition);
      }
      if (Res3Addition != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Res3Addition);
      }
      if (Res4Addition != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Res4Addition);
      }
      if (MemberAddition != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberAddition);
      }
      if (TownRes1Addition != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TownRes1Addition);
      }
      if (TownRes2Addition != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TownRes2Addition);
      }
      if (TownRes3Addition != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TownRes3Addition);
      }
      if (TownRes4Addition != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TownRes4Addition);
      }
      if (TownMemberAddition != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TownMemberAddition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Res1Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res1Addition);
      }
      if (Res2Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res2Addition);
      }
      if (Res3Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res3Addition);
      }
      if (Res4Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res4Addition);
      }
      if (MemberAddition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberAddition);
      }
      if (TownRes1Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TownRes1Addition);
      }
      if (TownRes2Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TownRes2Addition);
      }
      if (TownRes3Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TownRes3Addition);
      }
      if (TownRes4Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TownRes4Addition);
      }
      if (TownMemberAddition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TownMemberAddition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetAllianceAddition other) {
      if (other == null) {
        return;
      }
      if (other.Res1Addition != 0) {
        Res1Addition = other.Res1Addition;
      }
      if (other.Res2Addition != 0) {
        Res2Addition = other.Res2Addition;
      }
      if (other.Res3Addition != 0) {
        Res3Addition = other.Res3Addition;
      }
      if (other.Res4Addition != 0) {
        Res4Addition = other.Res4Addition;
      }
      if (other.MemberAddition != 0) {
        MemberAddition = other.MemberAddition;
      }
      if (other.TownRes1Addition != 0) {
        TownRes1Addition = other.TownRes1Addition;
      }
      if (other.TownRes2Addition != 0) {
        TownRes2Addition = other.TownRes2Addition;
      }
      if (other.TownRes3Addition != 0) {
        TownRes3Addition = other.TownRes3Addition;
      }
      if (other.TownRes4Addition != 0) {
        TownRes4Addition = other.TownRes4Addition;
      }
      if (other.TownMemberAddition != 0) {
        TownMemberAddition = other.TownMemberAddition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Res1Addition = input.ReadInt32();
            break;
          }
          case 16: {
            Res2Addition = input.ReadInt32();
            break;
          }
          case 24: {
            Res3Addition = input.ReadInt32();
            break;
          }
          case 32: {
            Res4Addition = input.ReadInt32();
            break;
          }
          case 40: {
            MemberAddition = input.ReadInt32();
            break;
          }
          case 48: {
            TownRes1Addition = input.ReadInt32();
            break;
          }
          case 56: {
            TownRes2Addition = input.ReadInt32();
            break;
          }
          case 64: {
            TownRes3Addition = input.ReadInt32();
            break;
          }
          case 72: {
            TownRes4Addition = input.ReadInt32();
            break;
          }
          case 80: {
            TownMemberAddition = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11016 获取军团日志:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetLogList : pb::IMessage<C2S_GetLogList> {
    private static readonly pb::MessageParser<C2S_GetLogList> _parser = new pb::MessageParser<C2S_GetLogList>(() => new C2S_GetLogList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetLogList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetLogList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetLogList(C2S_GetLogList other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetLogList Clone() {
      return new C2S_GetLogList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetLogList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetLogList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetLogList other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GetLogList : pb::IMessage<S2C_GetLogList> {
    private static readonly pb::MessageParser<S2C_GetLogList> _parser = new pb::MessageParser<S2C_GetLogList>(() => new S2C_GetLogList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetLogList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetLogList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetLogList(S2C_GetLogList other) : this() {
      item_ = other.item_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetLogList Clone() {
      return new S2C_GetLogList(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.LogItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.LogItem.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.LogItem> item_ = new pbc::RepeatedField<global::NBSGame.PB.LogItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.LogItem> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetLogList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetLogList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetLogList other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogItem : pb::IMessage<LogItem> {
    private static readonly pb::MessageParser<LogItem> _parser = new pb::MessageParser<LogItem>(() => new LogItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogItem(LogItem other) : this() {
      timeStamp_ = other.timeStamp_;
      Text = other.text_ != null ? other.Text.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogItem Clone() {
      return new LogItem(this);
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 1;
    private long timeStamp_;
    /// <summary>
    /// 时间戳，毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private global::NBSGame.PB.CommonText text_;
    /// <summary>
    /// 通用客户端文字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NBSGame.PB.CommonText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeStamp != other.TimeStamp) return false;
      if (!object.Equals(Text, other.Text)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeStamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TimeStamp);
      }
      if (text_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogItem other) {
      if (other == null) {
        return;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::NBSGame.PB.CommonText();
        }
        Text.MergeFrom(other.Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 18: {
            if (text_ == null) {
              text_ = new global::NBSGame.PB.CommonText();
            }
            input.ReadMessage(text_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11017 修改军团公告:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_ChangeNotice : pb::IMessage<C2S_ChangeNotice> {
    private static readonly pb::MessageParser<C2S_ChangeNotice> _parser = new pb::MessageParser<C2S_ChangeNotice>(() => new C2S_ChangeNotice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ChangeNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChangeNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChangeNotice(C2S_ChangeNotice other) : this() {
      notice_ = other.notice_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChangeNotice Clone() {
      return new C2S_ChangeNotice(this);
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 1;
    private string notice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ChangeNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ChangeNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Notice != other.Notice) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Notice.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ChangeNotice other) {
      if (other == null) {
        return;
      }
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Notice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ChangeNotice : pb::IMessage<S2C_ChangeNotice> {
    private static readonly pb::MessageParser<S2C_ChangeNotice> _parser = new pb::MessageParser<S2C_ChangeNotice>(() => new S2C_ChangeNotice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ChangeNotice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChangeNotice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChangeNotice(S2C_ChangeNotice other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChangeNotice Clone() {
      return new S2C_ChangeNotice(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ChangeNotice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ChangeNotice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ChangeNotice other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11018 任命官员界面:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AppointOfficerView : pb::IMessage<C2S_AppointOfficerView> {
    private static readonly pb::MessageParser<C2S_AppointOfficerView> _parser = new pb::MessageParser<C2S_AppointOfficerView>(() => new C2S_AppointOfficerView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AppointOfficerView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointOfficerView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointOfficerView(C2S_AppointOfficerView other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointOfficerView Clone() {
      return new C2S_AppointOfficerView(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AppointOfficerView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AppointOfficerView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AppointOfficerView other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_AppointOfficerView : pb::IMessage<S2C_AppointOfficerView> {
    private static readonly pb::MessageParser<S2C_AppointOfficerView> _parser = new pb::MessageParser<S2C_AppointOfficerView>(() => new S2C_AppointOfficerView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AppointOfficerView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointOfficerView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointOfficerView(S2C_AppointOfficerView other) : this() {
      item_ = other.item_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointOfficerView Clone() {
      return new S2C_AppointOfficerView(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.OfficerItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.OfficerItem.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.OfficerItem> item_ = new pbc::RepeatedField<global::NBSGame.PB.OfficerItem>();
    /// <summary>
    /// 官员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.OfficerItem> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AppointOfficerView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AppointOfficerView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AppointOfficerView other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OfficerItem : pb::IMessage<OfficerItem> {
    private static readonly pb::MessageParser<OfficerItem> _parser = new pb::MessageParser<OfficerItem>(() => new OfficerItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OfficerItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfficerItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfficerItem(OfficerItem other) : this() {
      name_ = other.name_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfficerItem Clone() {
      return new OfficerItem(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    /// <summary>
    /// 职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OfficerItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OfficerItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OfficerItem other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11019 任命官员:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AppointOfficer : pb::IMessage<C2S_AppointOfficer> {
    private static readonly pb::MessageParser<C2S_AppointOfficer> _parser = new pb::MessageParser<C2S_AppointOfficer>(() => new C2S_AppointOfficer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AppointOfficer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointOfficer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointOfficer(C2S_AppointOfficer other) : this() {
      playerId_ = other.playerId_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointOfficer Clone() {
      return new C2S_AppointOfficer(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AppointOfficer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AppointOfficer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AppointOfficer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AppointOfficer : pb::IMessage<S2C_AppointOfficer> {
    private static readonly pb::MessageParser<S2C_AppointOfficer> _parser = new pb::MessageParser<S2C_AppointOfficer>(() => new S2C_AppointOfficer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AppointOfficer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointOfficer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointOfficer(S2C_AppointOfficer other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointOfficer Clone() {
      return new S2C_AppointOfficer(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AppointOfficer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AppointOfficer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AppointOfficer other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11020 罢免官员:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_RecallOfficer : pb::IMessage<C2S_RecallOfficer> {
    private static readonly pb::MessageParser<C2S_RecallOfficer> _parser = new pb::MessageParser<C2S_RecallOfficer>(() => new C2S_RecallOfficer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RecallOfficer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RecallOfficer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RecallOfficer(C2S_RecallOfficer other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RecallOfficer Clone() {
      return new C2S_RecallOfficer(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RecallOfficer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RecallOfficer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RecallOfficer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RecallOfficer : pb::IMessage<S2C_RecallOfficer> {
    private static readonly pb::MessageParser<S2C_RecallOfficer> _parser = new pb::MessageParser<S2C_RecallOfficer>(() => new S2C_RecallOfficer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RecallOfficer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RecallOfficer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RecallOfficer(S2C_RecallOfficer other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RecallOfficer Clone() {
      return new S2C_RecallOfficer(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RecallOfficer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RecallOfficer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RecallOfficer other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11021 禅让军团长:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AllianceDemise : pb::IMessage<C2S_AllianceDemise> {
    private static readonly pb::MessageParser<C2S_AllianceDemise> _parser = new pb::MessageParser<C2S_AllianceDemise>(() => new C2S_AllianceDemise());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AllianceDemise> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceDemise() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceDemise(C2S_AllianceDemise other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceDemise Clone() {
      return new C2S_AllianceDemise(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AllianceDemise);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AllianceDemise other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AllianceDemise other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AllianceDemise : pb::IMessage<S2C_AllianceDemise> {
    private static readonly pb::MessageParser<S2C_AllianceDemise> _parser = new pb::MessageParser<S2C_AllianceDemise>(() => new S2C_AllianceDemise());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AllianceDemise> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceDemise() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceDemise(S2C_AllianceDemise other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceDemise Clone() {
      return new S2C_AllianceDemise(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AllianceDemise);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AllianceDemise other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AllianceDemise other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11022 取消禅让军团长:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_ConncelAllianceDemise : pb::IMessage<C2S_ConncelAllianceDemise> {
    private static readonly pb::MessageParser<C2S_ConncelAllianceDemise> _parser = new pb::MessageParser<C2S_ConncelAllianceDemise>(() => new C2S_ConncelAllianceDemise());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ConncelAllianceDemise> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ConncelAllianceDemise() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ConncelAllianceDemise(C2S_ConncelAllianceDemise other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ConncelAllianceDemise Clone() {
      return new C2S_ConncelAllianceDemise(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ConncelAllianceDemise);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ConncelAllianceDemise other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ConncelAllianceDemise other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_ConncelAllianceDemise : pb::IMessage<S2C_ConncelAllianceDemise> {
    private static readonly pb::MessageParser<S2C_ConncelAllianceDemise> _parser = new pb::MessageParser<S2C_ConncelAllianceDemise>(() => new S2C_ConncelAllianceDemise());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ConncelAllianceDemise> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ConncelAllianceDemise() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ConncelAllianceDemise(S2C_ConncelAllianceDemise other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ConncelAllianceDemise Clone() {
      return new S2C_ConncelAllianceDemise(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ConncelAllianceDemise);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ConncelAllianceDemise other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ConncelAllianceDemise other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11023 踢出军团:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_KickMember : pb::IMessage<C2S_KickMember> {
    private static readonly pb::MessageParser<C2S_KickMember> _parser = new pb::MessageParser<C2S_KickMember>(() => new C2S_KickMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_KickMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_KickMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_KickMember(C2S_KickMember other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_KickMember Clone() {
      return new C2S_KickMember(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_KickMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_KickMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_KickMember other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_KickMember : pb::IMessage<S2C_KickMember> {
    private static readonly pb::MessageParser<S2C_KickMember> _parser = new pb::MessageParser<S2C_KickMember>(() => new S2C_KickMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_KickMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_KickMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_KickMember(S2C_KickMember other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_KickMember Clone() {
      return new S2C_KickMember(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_KickMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_KickMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_KickMember other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11024 退出军团:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_QuitAlliance : pb::IMessage<C2S_QuitAlliance> {
    private static readonly pb::MessageParser<C2S_QuitAlliance> _parser = new pb::MessageParser<C2S_QuitAlliance>(() => new C2S_QuitAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_QuitAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QuitAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QuitAlliance(C2S_QuitAlliance other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QuitAlliance Clone() {
      return new C2S_QuitAlliance(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_QuitAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_QuitAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_QuitAlliance other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_QuitAlliance : pb::IMessage<S2C_QuitAlliance> {
    private static readonly pb::MessageParser<S2C_QuitAlliance> _parser = new pb::MessageParser<S2C_QuitAlliance>(() => new S2C_QuitAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_QuitAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QuitAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QuitAlliance(S2C_QuitAlliance other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QuitAlliance Clone() {
      return new S2C_QuitAlliance(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_QuitAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_QuitAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_QuitAlliance other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11026 创建分组:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_CreateGroup : pb::IMessage<C2S_CreateGroup> {
    private static readonly pb::MessageParser<C2S_CreateGroup> _parser = new pb::MessageParser<C2S_CreateGroup>(() => new C2S_CreateGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CreateGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateGroup(C2S_CreateGroup other) : this() {
      name_ = other.name_;
      playerIds_ = other.playerIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateGroup Clone() {
      return new C2S_CreateGroup(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 分组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> playerIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CreateGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CreateGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!playerIds_.Equals(other.playerIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= playerIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CreateGroup other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      playerIds_.Add(other.playerIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CreateGroup : pb::IMessage<S2C_CreateGroup> {
    private static readonly pb::MessageParser<S2C_CreateGroup> _parser = new pb::MessageParser<S2C_CreateGroup>(() => new S2C_CreateGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CreateGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateGroup(S2C_CreateGroup other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateGroup Clone() {
      return new S2C_CreateGroup(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CreateGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CreateGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CreateGroup other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11027 编辑分组:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_EditGroup : pb::IMessage<C2S_EditGroup> {
    private static readonly pb::MessageParser<C2S_EditGroup> _parser = new pb::MessageParser<C2S_EditGroup>(() => new C2S_EditGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_EditGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EditGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EditGroup(C2S_EditGroup other) : this() {
      groupId_ = other.groupId_;
      name_ = other.name_;
      playerIds_ = other.playerIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_EditGroup Clone() {
      return new C2S_EditGroup(this);
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private long groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 分组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> playerIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_EditGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_EditGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Name != other.Name) return false;
      if(!playerIds_.Equals(other.playerIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= playerIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GroupId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_EditGroup other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      playerIds_.Add(other.playerIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_EditGroup : pb::IMessage<S2C_EditGroup> {
    private static readonly pb::MessageParser<S2C_EditGroup> _parser = new pb::MessageParser<S2C_EditGroup>(() => new S2C_EditGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_EditGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EditGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EditGroup(S2C_EditGroup other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EditGroup Clone() {
      return new S2C_EditGroup(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_EditGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_EditGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_EditGroup other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11028 获取可任命组长列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetAppointGroupLeaderList : pb::IMessage<C2S_GetAppointGroupLeaderList> {
    private static readonly pb::MessageParser<C2S_GetAppointGroupLeaderList> _parser = new pb::MessageParser<C2S_GetAppointGroupLeaderList>(() => new C2S_GetAppointGroupLeaderList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetAppointGroupLeaderList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAppointGroupLeaderList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAppointGroupLeaderList(C2S_GetAppointGroupLeaderList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAppointGroupLeaderList Clone() {
      return new C2S_GetAppointGroupLeaderList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetAppointGroupLeaderList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetAppointGroupLeaderList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetAppointGroupLeaderList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_GetAppointGroupLeaderList : pb::IMessage<S2C_GetAppointGroupLeaderList> {
    private static readonly pb::MessageParser<S2C_GetAppointGroupLeaderList> _parser = new pb::MessageParser<S2C_GetAppointGroupLeaderList>(() => new S2C_GetAppointGroupLeaderList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetAppointGroupLeaderList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAppointGroupLeaderList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAppointGroupLeaderList(S2C_GetAppointGroupLeaderList other) : this() {
      leader_ = other.leader_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAppointGroupLeaderList Clone() {
      return new S2C_GetAppointGroupLeaderList(this);
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.AppointGroupLeader> _repeated_leader_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.AppointGroupLeader.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.AppointGroupLeader> leader_ = new pbc::RepeatedField<global::NBSGame.PB.AppointGroupLeader>();
    /// <summary>
    /// 任命组长官员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.AppointGroupLeader> Leader {
      get { return leader_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetAppointGroupLeaderList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetAppointGroupLeaderList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leader_.Equals(other.leader_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leader_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      leader_.WriteTo(output, _repeated_leader_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += leader_.CalculateSize(_repeated_leader_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetAppointGroupLeaderList other) {
      if (other == null) {
        return;
      }
      leader_.Add(other.leader_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            leader_.AddEntriesFrom(input, _repeated_leader_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppointGroupLeader : pb::IMessage<AppointGroupLeader> {
    private static readonly pb::MessageParser<AppointGroupLeader> _parser = new pb::MessageParser<AppointGroupLeader>(() => new AppointGroupLeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppointGroupLeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppointGroupLeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppointGroupLeader(AppointGroupLeader other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppointGroupLeader Clone() {
      return new AppointGroupLeader(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    /// <summary>
    /// 职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppointGroupLeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppointGroupLeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppointGroupLeader other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11029 任命组长:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AppointGroupLeader : pb::IMessage<C2S_AppointGroupLeader> {
    private static readonly pb::MessageParser<C2S_AppointGroupLeader> _parser = new pb::MessageParser<C2S_AppointGroupLeader>(() => new C2S_AppointGroupLeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AppointGroupLeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointGroupLeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointGroupLeader(C2S_AppointGroupLeader other) : this() {
      playerId_ = other.playerId_;
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AppointGroupLeader Clone() {
      return new C2S_AppointGroupLeader(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private long groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AppointGroupLeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AppointGroupLeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (GroupId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AppointGroupLeader other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            GroupId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AppointGroupLeader : pb::IMessage<S2C_AppointGroupLeader> {
    private static readonly pb::MessageParser<S2C_AppointGroupLeader> _parser = new pb::MessageParser<S2C_AppointGroupLeader>(() => new S2C_AppointGroupLeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AppointGroupLeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointGroupLeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointGroupLeader(S2C_AppointGroupLeader other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AppointGroupLeader Clone() {
      return new S2C_AppointGroupLeader(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AppointGroupLeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AppointGroupLeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AppointGroupLeader other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11030 罢免组长:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_RecallGroupLeader : pb::IMessage<C2S_RecallGroupLeader> {
    private static readonly pb::MessageParser<C2S_RecallGroupLeader> _parser = new pb::MessageParser<C2S_RecallGroupLeader>(() => new C2S_RecallGroupLeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RecallGroupLeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RecallGroupLeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RecallGroupLeader(C2S_RecallGroupLeader other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RecallGroupLeader Clone() {
      return new C2S_RecallGroupLeader(this);
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private long groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RecallGroupLeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RecallGroupLeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RecallGroupLeader other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RecallGroupLeader : pb::IMessage<S2C_RecallGroupLeader> {
    private static readonly pb::MessageParser<S2C_RecallGroupLeader> _parser = new pb::MessageParser<S2C_RecallGroupLeader>(() => new S2C_RecallGroupLeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RecallGroupLeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RecallGroupLeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RecallGroupLeader(S2C_RecallGroupLeader other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RecallGroupLeader Clone() {
      return new S2C_RecallGroupLeader(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RecallGroupLeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RecallGroupLeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RecallGroupLeader other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11031 解散分组:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_DissolveGroup : pb::IMessage<C2S_DissolveGroup> {
    private static readonly pb::MessageParser<C2S_DissolveGroup> _parser = new pb::MessageParser<C2S_DissolveGroup>(() => new C2S_DissolveGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_DissolveGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DissolveGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DissolveGroup(C2S_DissolveGroup other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DissolveGroup Clone() {
      return new C2S_DissolveGroup(this);
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private long groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_DissolveGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_DissolveGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_DissolveGroup other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_DissolveGroup : pb::IMessage<S2C_DissolveGroup> {
    private static readonly pb::MessageParser<S2C_DissolveGroup> _parser = new pb::MessageParser<S2C_DissolveGroup>(() => new S2C_DissolveGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_DissolveGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DissolveGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DissolveGroup(S2C_DissolveGroup other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DissolveGroup Clone() {
      return new S2C_DissolveGroup(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_DissolveGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_DissolveGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_DissolveGroup other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11032 获取移动分组列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetMoveGroupList : pb::IMessage<C2S_GetMoveGroupList> {
    private static readonly pb::MessageParser<C2S_GetMoveGroupList> _parser = new pb::MessageParser<C2S_GetMoveGroupList>(() => new C2S_GetMoveGroupList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetMoveGroupList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMoveGroupList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMoveGroupList(C2S_GetMoveGroupList other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMoveGroupList Clone() {
      return new C2S_GetMoveGroupList(this);
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private long groupId_;
    /// <summary>
    /// 所在分组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetMoveGroupList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetMoveGroupList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetMoveGroupList other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GetMoveGroupList : pb::IMessage<S2C_GetMoveGroupList> {
    private static readonly pb::MessageParser<S2C_GetMoveGroupList> _parser = new pb::MessageParser<S2C_GetMoveGroupList>(() => new S2C_GetMoveGroupList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetMoveGroupList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMoveGroupList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMoveGroupList(S2C_GetMoveGroupList other) : this() {
      groups_ = other.groups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMoveGroupList Clone() {
      return new S2C_GetMoveGroupList(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.MoveGroupInfo> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.MoveGroupInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.MoveGroupInfo> groups_ = new pbc::RepeatedField<global::NBSGame.PB.MoveGroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.MoveGroupInfo> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetMoveGroupList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetMoveGroupList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groups_.Equals(other.groups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetMoveGroupList other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveGroupInfo : pb::IMessage<MoveGroupInfo> {
    private static readonly pb::MessageParser<MoveGroupInfo> _parser = new pb::MessageParser<MoveGroupInfo>(() => new MoveGroupInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGroupInfo(MoveGroupInfo other) : this() {
      groupId_ = other.groupId_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveGroupInfo Clone() {
      return new MoveGroupInfo(this);
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private long groupId_;
    /// <summary>
    /// 分组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 分组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GroupId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11033 移动分组:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_MoveGroup : pb::IMessage<C2S_MoveGroup> {
    private static readonly pb::MessageParser<C2S_MoveGroup> _parser = new pb::MessageParser<C2S_MoveGroup>(() => new C2S_MoveGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_MoveGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MoveGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MoveGroup(C2S_MoveGroup other) : this() {
      playerId_ = other.playerId_;
      newGroupId_ = other.newGroupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MoveGroup Clone() {
      return new C2S_MoveGroup(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "newGroupId" field.</summary>
    public const int NewGroupIdFieldNumber = 2;
    private long newGroupId_;
    /// <summary>
    /// 新分组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewGroupId {
      get { return newGroupId_; }
      set {
        newGroupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_MoveGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_MoveGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (NewGroupId != other.NewGroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (NewGroupId != 0L) hash ^= NewGroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (NewGroupId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NewGroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (NewGroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewGroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_MoveGroup other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.NewGroupId != 0L) {
        NewGroupId = other.NewGroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            NewGroupId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_MoveGroup : pb::IMessage<S2C_MoveGroup> {
    private static readonly pb::MessageParser<S2C_MoveGroup> _parser = new pb::MessageParser<S2C_MoveGroup>(() => new S2C_MoveGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MoveGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveGroup(S2C_MoveGroup other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MoveGroup Clone() {
      return new S2C_MoveGroup(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MoveGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MoveGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MoveGroup other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11034 移出分组:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_RemoveGroup : pb::IMessage<C2S_RemoveGroup> {
    private static readonly pb::MessageParser<C2S_RemoveGroup> _parser = new pb::MessageParser<C2S_RemoveGroup>(() => new C2S_RemoveGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_RemoveGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RemoveGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RemoveGroup(C2S_RemoveGroup other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_RemoveGroup Clone() {
      return new C2S_RemoveGroup(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_RemoveGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_RemoveGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_RemoveGroup other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_RemoveGroup : pb::IMessage<S2C_RemoveGroup> {
    private static readonly pb::MessageParser<S2C_RemoveGroup> _parser = new pb::MessageParser<S2C_RemoveGroup>(() => new S2C_RemoveGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RemoveGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RemoveGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RemoveGroup(S2C_RemoveGroup other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RemoveGroup Clone() {
      return new S2C_RemoveGroup(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RemoveGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RemoveGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RemoveGroup other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11035 获取分组信息:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetGroupInfo : pb::IMessage<C2S_GetGroupInfo> {
    private static readonly pb::MessageParser<C2S_GetGroupInfo> _parser = new pb::MessageParser<C2S_GetGroupInfo>(() => new C2S_GetGroupInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupInfo(C2S_GetGroupInfo other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupInfo Clone() {
      return new C2S_GetGroupInfo(this);
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private long groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GetGroupInfo : pb::IMessage<S2C_GetGroupInfo> {
    private static readonly pb::MessageParser<S2C_GetGroupInfo> _parser = new pb::MessageParser<S2C_GetGroupInfo>(() => new S2C_GetGroupInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupInfo(S2C_GetGroupInfo other) : this() {
      name_ = other.name_;
      memberInfo_ = other.memberInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupInfo Clone() {
      return new S2C_GetGroupInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 分组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memberInfo" field.</summary>
    public const int MemberInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NBSGame.PB.GroupMemberInfo> _repeated_memberInfo_codec
        = pb::FieldCodec.ForMessage(18, global::NBSGame.PB.GroupMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.GroupMemberInfo> memberInfo_ = new pbc::RepeatedField<global::NBSGame.PB.GroupMemberInfo>();
    /// <summary>
    /// 成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.GroupMemberInfo> MemberInfo {
      get { return memberInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!memberInfo_.Equals(other.memberInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= memberInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      memberInfo_.WriteTo(output, _repeated_memberInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += memberInfo_.CalculateSize(_repeated_memberInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      memberInfo_.Add(other.memberInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            memberInfo_.AddEntriesFrom(input, _repeated_memberInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupMemberInfo : pb::IMessage<GroupMemberInfo> {
    private static readonly pb::MessageParser<GroupMemberInfo> _parser = new pb::MessageParser<GroupMemberInfo>(() => new GroupMemberInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupMemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberInfo(GroupMemberInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      score_ = other.score_;
      scoreWeek_ = other.scoreWeek_;
      power_ = other.power_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupMemberInfo Clone() {
      return new GroupMemberInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    /// 战功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "scoreWeek" field.</summary>
    public const int ScoreWeekFieldNumber = 4;
    private int scoreWeek_;
    /// <summary>
    /// 周战功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreWeek {
      get { return scoreWeek_; }
      set {
        scoreWeek_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    /// <summary>
    /// 势力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupMemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupMemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Score != other.Score) return false;
      if (ScoreWeek != other.ScoreWeek) return false;
      if (Power != other.Power) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (ScoreWeek != 0) hash ^= ScoreWeek.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (ScoreWeek != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ScoreWeek);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (ScoreWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreWeek);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupMemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.ScoreWeek != 0) {
        ScoreWeek = other.ScoreWeek;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            ScoreWeek = input.ReadInt32();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11036 获取未分组成员列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetNotGroupMemberList : pb::IMessage<C2S_GetNotGroupMemberList> {
    private static readonly pb::MessageParser<C2S_GetNotGroupMemberList> _parser = new pb::MessageParser<C2S_GetNotGroupMemberList>(() => new C2S_GetNotGroupMemberList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetNotGroupMemberList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetNotGroupMemberList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetNotGroupMemberList(C2S_GetNotGroupMemberList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetNotGroupMemberList Clone() {
      return new C2S_GetNotGroupMemberList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetNotGroupMemberList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetNotGroupMemberList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetNotGroupMemberList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_GetNotGroupMemberList : pb::IMessage<S2C_GetNotGroupMemberList> {
    private static readonly pb::MessageParser<S2C_GetNotGroupMemberList> _parser = new pb::MessageParser<S2C_GetNotGroupMemberList>(() => new S2C_GetNotGroupMemberList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetNotGroupMemberList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetNotGroupMemberList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetNotGroupMemberList(S2C_GetNotGroupMemberList other) : this() {
      memberInfo_ = other.memberInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetNotGroupMemberList Clone() {
      return new S2C_GetNotGroupMemberList(this);
    }

    /// <summary>Field number for the "memberInfo" field.</summary>
    public const int MemberInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.GroupMemberInfo> _repeated_memberInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.GroupMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.GroupMemberInfo> memberInfo_ = new pbc::RepeatedField<global::NBSGame.PB.GroupMemberInfo>();
    /// <summary>
    /// 未分组成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.GroupMemberInfo> MemberInfo {
      get { return memberInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetNotGroupMemberList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetNotGroupMemberList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!memberInfo_.Equals(other.memberInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= memberInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      memberInfo_.WriteTo(output, _repeated_memberInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += memberInfo_.CalculateSize(_repeated_memberInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetNotGroupMemberList other) {
      if (other == null) {
        return;
      }
      memberInfo_.Add(other.memberInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            memberInfo_.AddEntriesFrom(input, _repeated_memberInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11037 获取军团成员列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetGroupMemberList : pb::IMessage<C2S_GetGroupMemberList> {
    private static readonly pb::MessageParser<C2S_GetGroupMemberList> _parser = new pb::MessageParser<C2S_GetGroupMemberList>(() => new C2S_GetGroupMemberList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetGroupMemberList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupMemberList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupMemberList(C2S_GetGroupMemberList other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGroupMemberList Clone() {
      return new C2S_GetGroupMemberList(this);
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private long groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetGroupMemberList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetGroupMemberList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0L) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetGroupMemberList other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0L) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GetGroupMemberList : pb::IMessage<S2C_GetGroupMemberList> {
    private static readonly pb::MessageParser<S2C_GetGroupMemberList> _parser = new pb::MessageParser<S2C_GetGroupMemberList>(() => new S2C_GetGroupMemberList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetGroupMemberList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupMemberList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupMemberList(S2C_GetGroupMemberList other) : this() {
      memberInfo_ = other.memberInfo_.Clone();
      leaderPlayerId_ = other.leaderPlayerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGroupMemberList Clone() {
      return new S2C_GetGroupMemberList(this);
    }

    /// <summary>Field number for the "memberInfo" field.</summary>
    public const int MemberInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.MemberInfo> _repeated_memberInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.MemberInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.MemberInfo> memberInfo_ = new pbc::RepeatedField<global::NBSGame.PB.MemberInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.MemberInfo> MemberInfo {
      get { return memberInfo_; }
    }

    /// <summary>Field number for the "leaderPlayerId" field.</summary>
    public const int LeaderPlayerIdFieldNumber = 2;
    private long leaderPlayerId_;
    /// <summary>
    /// 管理员playerId，若没有则为-1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeaderPlayerId {
      get { return leaderPlayerId_; }
      set {
        leaderPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetGroupMemberList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetGroupMemberList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!memberInfo_.Equals(other.memberInfo_)) return false;
      if (LeaderPlayerId != other.LeaderPlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= memberInfo_.GetHashCode();
      if (LeaderPlayerId != 0L) hash ^= LeaderPlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      memberInfo_.WriteTo(output, _repeated_memberInfo_codec);
      if (LeaderPlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LeaderPlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += memberInfo_.CalculateSize(_repeated_memberInfo_codec);
      if (LeaderPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaderPlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetGroupMemberList other) {
      if (other == null) {
        return;
      }
      memberInfo_.Add(other.memberInfo_);
      if (other.LeaderPlayerId != 0L) {
        LeaderPlayerId = other.LeaderPlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            memberInfo_.AddEntriesFrom(input, _repeated_memberInfo_codec);
            break;
          }
          case 16: {
            LeaderPlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11038 退出分组:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_QuitGroup : pb::IMessage<C2S_QuitGroup> {
    private static readonly pb::MessageParser<C2S_QuitGroup> _parser = new pb::MessageParser<C2S_QuitGroup>(() => new C2S_QuitGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_QuitGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QuitGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QuitGroup(C2S_QuitGroup other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_QuitGroup Clone() {
      return new C2S_QuitGroup(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_QuitGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_QuitGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_QuitGroup other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_QuitGroup : pb::IMessage<S2C_QuitGroup> {
    private static readonly pb::MessageParser<S2C_QuitGroup> _parser = new pb::MessageParser<S2C_QuitGroup>(() => new S2C_QuitGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_QuitGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QuitGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QuitGroup(S2C_QuitGroup other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_QuitGroup Clone() {
      return new S2C_QuitGroup(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_QuitGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_QuitGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_QuitGroup other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11039 取消申请加入军团:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_CancelApplyAlliance : pb::IMessage<C2S_CancelApplyAlliance> {
    private static readonly pb::MessageParser<C2S_CancelApplyAlliance> _parser = new pb::MessageParser<C2S_CancelApplyAlliance>(() => new C2S_CancelApplyAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CancelApplyAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CancelApplyAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CancelApplyAlliance(C2S_CancelApplyAlliance other) : this() {
      allianceId_ = other.allianceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CancelApplyAlliance Clone() {
      return new C2S_CancelApplyAlliance(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CancelApplyAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CancelApplyAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CancelApplyAlliance other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CancelApplyAlliance : pb::IMessage<S2C_CancelApplyAlliance> {
    private static readonly pb::MessageParser<S2C_CancelApplyAlliance> _parser = new pb::MessageParser<S2C_CancelApplyAlliance>(() => new S2C_CancelApplyAlliance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CancelApplyAlliance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CancelApplyAlliance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CancelApplyAlliance(S2C_CancelApplyAlliance other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CancelApplyAlliance Clone() {
      return new S2C_CancelApplyAlliance(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CancelApplyAlliance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CancelApplyAlliance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CancelApplyAlliance other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11040 设置军团开放:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_SetAllianceOpen : pb::IMessage<C2S_SetAllianceOpen> {
    private static readonly pb::MessageParser<C2S_SetAllianceOpen> _parser = new pb::MessageParser<C2S_SetAllianceOpen>(() => new C2S_SetAllianceOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_SetAllianceOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetAllianceOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetAllianceOpen(C2S_SetAllianceOpen other) : this() {
      isOpen_ = other.isOpen_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetAllianceOpen Clone() {
      return new C2S_SetAllianceOpen(this);
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    /// <summary>
    /// 是否开放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_SetAllianceOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_SetAllianceOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_SetAllianceOpen other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_SetAllianceOpen : pb::IMessage<S2C_SetAllianceOpen> {
    private static readonly pb::MessageParser<S2C_SetAllianceOpen> _parser = new pb::MessageParser<S2C_SetAllianceOpen>(() => new S2C_SetAllianceOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SetAllianceOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetAllianceOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetAllianceOpen(S2C_SetAllianceOpen other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetAllianceOpen Clone() {
      return new S2C_SetAllianceOpen(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SetAllianceOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SetAllianceOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SetAllianceOpen other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11041 全部拒绝申请加入军团处理:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_ApplyAllianceAllReject : pb::IMessage<C2S_ApplyAllianceAllReject> {
    private static readonly pb::MessageParser<C2S_ApplyAllianceAllReject> _parser = new pb::MessageParser<C2S_ApplyAllianceAllReject>(() => new C2S_ApplyAllianceAllReject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ApplyAllianceAllReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceAllReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceAllReject(C2S_ApplyAllianceAllReject other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ApplyAllianceAllReject Clone() {
      return new C2S_ApplyAllianceAllReject(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ApplyAllianceAllReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ApplyAllianceAllReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ApplyAllianceAllReject other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_ApplyAllianceAllReject : pb::IMessage<S2C_ApplyAllianceAllReject> {
    private static readonly pb::MessageParser<S2C_ApplyAllianceAllReject> _parser = new pb::MessageParser<S2C_ApplyAllianceAllReject>(() => new S2C_ApplyAllianceAllReject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ApplyAllianceAllReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceAllReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceAllReject(S2C_ApplyAllianceAllReject other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ApplyAllianceAllReject Clone() {
      return new S2C_ApplyAllianceAllReject(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ApplyAllianceAllReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ApplyAllianceAllReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ApplyAllianceAllReject other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11042 军团排行榜:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AllianceRank : pb::IMessage<C2S_AllianceRank> {
    private static readonly pb::MessageParser<C2S_AllianceRank> _parser = new pb::MessageParser<C2S_AllianceRank>(() => new C2S_AllianceRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AllianceRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceRank(C2S_AllianceRank other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceRank Clone() {
      return new C2S_AllianceRank(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AllianceRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AllianceRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AllianceRank other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_AllianceRank : pb::IMessage<S2C_AllianceRank> {
    private static readonly pb::MessageParser<S2C_AllianceRank> _parser = new pb::MessageParser<S2C_AllianceRank>(() => new S2C_AllianceRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AllianceRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceRank(S2C_AllianceRank other) : this() {
      allianceId_ = other.allianceId_;
      allianceName_ = other.allianceName_;
      rank_ = other.rank_;
      level_ = other.level_;
      memberCount_ = other.memberCount_;
      townCount_ = other.townCount_;
      region_ = other.region_;
      power_ = other.power_;
      allianceRankInfo_ = other.allianceRankInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceRank Clone() {
      return new S2C_AllianceRank(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    /// <summary>
    /// 军团id(没有军团为-1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "allianceName" field.</summary>
    public const int AllianceNameFieldNumber = 2;
    private string allianceName_ = "";
    /// <summary>
    /// 军团名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceName {
      get { return allianceName_; }
      set {
        allianceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    /// <summary>
    /// 排名（没入榜为-1）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 5;
    private int memberCount_;
    /// <summary>
    /// 成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "townCount" field.</summary>
    public const int TownCountFieldNumber = 6;
    private int townCount_;
    /// <summary>
    /// 城池数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TownCount {
      get { return townCount_; }
      set {
        townCount_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 7;
    private int region_;
    /// <summary>
    /// 州
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 8;
    private int power_;
    /// <summary>
    /// 实力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "allianceRankInfo" field.</summary>
    public const int AllianceRankInfoFieldNumber = 9;
    private static readonly pb::FieldCodec<global::NBSGame.PB.AllianceRankInfo> _repeated_allianceRankInfo_codec
        = pb::FieldCodec.ForMessage(74, global::NBSGame.PB.AllianceRankInfo.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.AllianceRankInfo> allianceRankInfo_ = new pbc::RepeatedField<global::NBSGame.PB.AllianceRankInfo>();
    /// <summary>
    /// 排名军团信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.AllianceRankInfo> AllianceRankInfo {
      get { return allianceRankInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AllianceRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AllianceRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (AllianceName != other.AllianceName) return false;
      if (Rank != other.Rank) return false;
      if (Level != other.Level) return false;
      if (MemberCount != other.MemberCount) return false;
      if (TownCount != other.TownCount) return false;
      if (Region != other.Region) return false;
      if (Power != other.Power) return false;
      if(!allianceRankInfo_.Equals(other.allianceRankInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (AllianceName.Length != 0) hash ^= AllianceName.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (TownCount != 0) hash ^= TownCount.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      hash ^= allianceRankInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (AllianceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AllianceName);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberCount);
      }
      if (TownCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TownCount);
      }
      if (Region != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Region);
      }
      if (Power != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Power);
      }
      allianceRankInfo_.WriteTo(output, _repeated_allianceRankInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (AllianceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceName);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
      }
      if (TownCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TownCount);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      size += allianceRankInfo_.CalculateSize(_repeated_allianceRankInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AllianceRank other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.AllianceName.Length != 0) {
        AllianceName = other.AllianceName;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.TownCount != 0) {
        TownCount = other.TownCount;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      allianceRankInfo_.Add(other.allianceRankInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 18: {
            AllianceName = input.ReadString();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            MemberCount = input.ReadInt32();
            break;
          }
          case 48: {
            TownCount = input.ReadInt32();
            break;
          }
          case 56: {
            Region = input.ReadInt32();
            break;
          }
          case 64: {
            Power = input.ReadInt32();
            break;
          }
          case 74: {
            allianceRankInfo_.AddEntriesFrom(input, _repeated_allianceRankInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllianceRankInfo : pb::IMessage<AllianceRankInfo> {
    private static readonly pb::MessageParser<AllianceRankInfo> _parser = new pb::MessageParser<AllianceRankInfo>(() => new AllianceRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllianceRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceRankInfo(AllianceRankInfo other) : this() {
      allianceId_ = other.allianceId_;
      allianceName_ = other.allianceName_;
      rank_ = other.rank_;
      level_ = other.level_;
      memberCount_ = other.memberCount_;
      townCount_ = other.townCount_;
      region_ = other.region_;
      power_ = other.power_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceRankInfo Clone() {
      return new AllianceRankInfo(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    /// <summary>
    /// 军团id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "allianceName" field.</summary>
    public const int AllianceNameFieldNumber = 2;
    private string allianceName_ = "";
    /// <summary>
    /// 军团名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceName {
      get { return allianceName_; }
      set {
        allianceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 5;
    private int memberCount_;
    /// <summary>
    /// 成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "townCount" field.</summary>
    public const int TownCountFieldNumber = 6;
    private int townCount_;
    /// <summary>
    /// 城池数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TownCount {
      get { return townCount_; }
      set {
        townCount_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 7;
    private int region_;
    /// <summary>
    /// 州
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 8;
    private int power_;
    /// <summary>
    /// 实力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllianceRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllianceRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (AllianceName != other.AllianceName) return false;
      if (Rank != other.Rank) return false;
      if (Level != other.Level) return false;
      if (MemberCount != other.MemberCount) return false;
      if (TownCount != other.TownCount) return false;
      if (Region != other.Region) return false;
      if (Power != other.Power) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (AllianceName.Length != 0) hash ^= AllianceName.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (TownCount != 0) hash ^= TownCount.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (AllianceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AllianceName);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberCount);
      }
      if (TownCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TownCount);
      }
      if (Region != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Region);
      }
      if (Power != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Power);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (AllianceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceName);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
      }
      if (TownCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TownCount);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllianceRankInfo other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.AllianceName.Length != 0) {
        AllianceName = other.AllianceName;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.TownCount != 0) {
        TownCount = other.TownCount;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 18: {
            AllianceName = input.ReadString();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            MemberCount = input.ReadInt32();
            break;
          }
          case 48: {
            TownCount = input.ReadInt32();
            break;
          }
          case 56: {
            Region = input.ReadInt32();
            break;
          }
          case 64: {
            Power = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11043 添加军团标志:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AddAllianceFavorite : pb::IMessage<C2S_AddAllianceFavorite> {
    private static readonly pb::MessageParser<C2S_AddAllianceFavorite> _parser = new pb::MessageParser<C2S_AddAllianceFavorite>(() => new C2S_AddAllianceFavorite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AddAllianceFavorite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AddAllianceFavorite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AddAllianceFavorite(C2S_AddAllianceFavorite other) : this() {
      cellId_ = other.cellId_;
      name_ = other.name_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AddAllianceFavorite Clone() {
      return new C2S_AddAllianceFavorite(this);
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 1;
    private int cellId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AddAllianceFavorite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AddAllianceFavorite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellId != other.CellId) return false;
      if (Name != other.Name) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellId != 0) hash ^= CellId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CellId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CellId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AddAllianceFavorite other) {
      if (other == null) {
        return;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CellId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AddAllianceFavorite : pb::IMessage<S2C_AddAllianceFavorite> {
    private static readonly pb::MessageParser<S2C_AddAllianceFavorite> _parser = new pb::MessageParser<S2C_AddAllianceFavorite>(() => new S2C_AddAllianceFavorite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AddAllianceFavorite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AddAllianceFavorite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AddAllianceFavorite(S2C_AddAllianceFavorite other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AddAllianceFavorite Clone() {
      return new S2C_AddAllianceFavorite(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AddAllianceFavorite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AddAllianceFavorite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AddAllianceFavorite other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11044 取消军团标志:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_CancelAllianceFavorite : pb::IMessage<C2S_CancelAllianceFavorite> {
    private static readonly pb::MessageParser<C2S_CancelAllianceFavorite> _parser = new pb::MessageParser<C2S_CancelAllianceFavorite>(() => new C2S_CancelAllianceFavorite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CancelAllianceFavorite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CancelAllianceFavorite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CancelAllianceFavorite(C2S_CancelAllianceFavorite other) : this() {
      cellId_ = other.cellId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CancelAllianceFavorite Clone() {
      return new C2S_CancelAllianceFavorite(this);
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 1;
    private int cellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CancelAllianceFavorite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CancelAllianceFavorite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellId != other.CellId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellId != 0) hash ^= CellId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CellId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CellId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CancelAllianceFavorite other) {
      if (other == null) {
        return;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CellId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CancelAllianceFavorite : pb::IMessage<S2C_CancelAllianceFavorite> {
    private static readonly pb::MessageParser<S2C_CancelAllianceFavorite> _parser = new pb::MessageParser<S2C_CancelAllianceFavorite>(() => new S2C_CancelAllianceFavorite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CancelAllianceFavorite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CancelAllianceFavorite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CancelAllianceFavorite(S2C_CancelAllianceFavorite other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CancelAllianceFavorite Clone() {
      return new S2C_CancelAllianceFavorite(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CancelAllianceFavorite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CancelAllianceFavorite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CancelAllianceFavorite other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11045 获取军团标志列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetAllianceFavoriteList : pb::IMessage<C2S_GetAllianceFavoriteList> {
    private static readonly pb::MessageParser<C2S_GetAllianceFavoriteList> _parser = new pb::MessageParser<C2S_GetAllianceFavoriteList>(() => new C2S_GetAllianceFavoriteList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetAllianceFavoriteList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceFavoriteList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceFavoriteList(C2S_GetAllianceFavoriteList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceFavoriteList Clone() {
      return new C2S_GetAllianceFavoriteList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetAllianceFavoriteList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetAllianceFavoriteList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetAllianceFavoriteList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_GetAllianceFavoriteList : pb::IMessage<S2C_GetAllianceFavoriteList> {
    private static readonly pb::MessageParser<S2C_GetAllianceFavoriteList> _parser = new pb::MessageParser<S2C_GetAllianceFavoriteList>(() => new S2C_GetAllianceFavoriteList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetAllianceFavoriteList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceFavoriteList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceFavoriteList(S2C_GetAllianceFavoriteList other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceFavoriteList Clone() {
      return new S2C_GetAllianceFavoriteList(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.AllianceFavoriteItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.AllianceFavoriteItem.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.AllianceFavoriteItem> items_ = new pbc::RepeatedField<global::NBSGame.PB.AllianceFavoriteItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.AllianceFavoriteItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetAllianceFavoriteList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetAllianceFavoriteList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetAllianceFavoriteList other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllianceFavoriteItem : pb::IMessage<AllianceFavoriteItem> {
    private static readonly pb::MessageParser<AllianceFavoriteItem> _parser = new pb::MessageParser<AllianceFavoriteItem>(() => new AllianceFavoriteItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllianceFavoriteItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceFavoriteItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceFavoriteItem(AllianceFavoriteItem other) : this() {
      cellId_ = other.cellId_;
      name_ = other.name_;
      createTime_ = other.createTime_;
      cretatPlayerId_ = other.cretatPlayerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceFavoriteItem Clone() {
      return new AllianceFavoriteItem(this);
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 1;
    private int cellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private long createTime_;
    /// <summary>
    /// 创建时间戳（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "cretatPlayerId" field.</summary>
    public const int CretatPlayerIdFieldNumber = 4;
    private long cretatPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CretatPlayerId {
      get { return cretatPlayerId_; }
      set {
        cretatPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllianceFavoriteItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllianceFavoriteItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellId != other.CellId) return false;
      if (Name != other.Name) return false;
      if (CreateTime != other.CreateTime) return false;
      if (CretatPlayerId != other.CretatPlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellId != 0) hash ^= CellId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (CretatPlayerId != 0L) hash ^= CretatPlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CellId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CellId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreateTime);
      }
      if (CretatPlayerId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CretatPlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (CretatPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CretatPlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllianceFavoriteItem other) {
      if (other == null) {
        return;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.CretatPlayerId != 0L) {
        CretatPlayerId = other.CretatPlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CellId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 32: {
            CretatPlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11046 获取军团标志详情:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetAllianceFavoriteDetail : pb::IMessage<C2S_GetAllianceFavoriteDetail> {
    private static readonly pb::MessageParser<C2S_GetAllianceFavoriteDetail> _parser = new pb::MessageParser<C2S_GetAllianceFavoriteDetail>(() => new C2S_GetAllianceFavoriteDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetAllianceFavoriteDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceFavoriteDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceFavoriteDetail(C2S_GetAllianceFavoriteDetail other) : this() {
      cellId_ = other.cellId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceFavoriteDetail Clone() {
      return new C2S_GetAllianceFavoriteDetail(this);
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 1;
    private int cellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetAllianceFavoriteDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetAllianceFavoriteDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellId != other.CellId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellId != 0) hash ^= CellId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CellId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CellId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetAllianceFavoriteDetail other) {
      if (other == null) {
        return;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CellId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_GetAllianceFavoriteDetail : pb::IMessage<S2C_GetAllianceFavoriteDetail> {
    private static readonly pb::MessageParser<S2C_GetAllianceFavoriteDetail> _parser = new pb::MessageParser<S2C_GetAllianceFavoriteDetail>(() => new S2C_GetAllianceFavoriteDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetAllianceFavoriteDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceFavoriteDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceFavoriteDetail(S2C_GetAllianceFavoriteDetail other) : this() {
      name_ = other.name_;
      content_ = other.content_;
      createPlayerName_ = other.createPlayerName_;
      cretatPlayerId_ = other.cretatPlayerId_;
      cellId_ = other.cellId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceFavoriteDetail Clone() {
      return new S2C_GetAllianceFavoriteDetail(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createPlayerName" field.</summary>
    public const int CreatePlayerNameFieldNumber = 3;
    private string createPlayerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatePlayerName {
      get { return createPlayerName_; }
      set {
        createPlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cretatPlayerId" field.</summary>
    public const int CretatPlayerIdFieldNumber = 4;
    private long cretatPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CretatPlayerId {
      get { return cretatPlayerId_; }
      set {
        cretatPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 5;
    private int cellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetAllianceFavoriteDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetAllianceFavoriteDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Content != other.Content) return false;
      if (CreatePlayerName != other.CreatePlayerName) return false;
      if (CretatPlayerId != other.CretatPlayerId) return false;
      if (CellId != other.CellId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (CreatePlayerName.Length != 0) hash ^= CreatePlayerName.GetHashCode();
      if (CretatPlayerId != 0L) hash ^= CretatPlayerId.GetHashCode();
      if (CellId != 0) hash ^= CellId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (CreatePlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CreatePlayerName);
      }
      if (CretatPlayerId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CretatPlayerId);
      }
      if (CellId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CellId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (CreatePlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatePlayerName);
      }
      if (CretatPlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CretatPlayerId);
      }
      if (CellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetAllianceFavoriteDetail other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.CreatePlayerName.Length != 0) {
        CreatePlayerName = other.CreatePlayerName;
      }
      if (other.CretatPlayerId != 0L) {
        CretatPlayerId = other.CretatPlayerId;
      }
      if (other.CellId != 0) {
        CellId = other.CellId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            CreatePlayerName = input.ReadString();
            break;
          }
          case 32: {
            CretatPlayerId = input.ReadInt64();
            break;
          }
          case 40: {
            CellId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11047 获取军团捐献信息:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_GetAllianceDonationInfo : pb::IMessage<C2S_GetAllianceDonationInfo> {
    private static readonly pb::MessageParser<C2S_GetAllianceDonationInfo> _parser = new pb::MessageParser<C2S_GetAllianceDonationInfo>(() => new C2S_GetAllianceDonationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetAllianceDonationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceDonationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceDonationInfo(C2S_GetAllianceDonationInfo other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetAllianceDonationInfo Clone() {
      return new C2S_GetAllianceDonationInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetAllianceDonationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetAllianceDonationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetAllianceDonationInfo other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_GetAllianceDonationInfo : pb::IMessage<S2C_GetAllianceDonationInfo> {
    private static readonly pb::MessageParser<S2C_GetAllianceDonationInfo> _parser = new pb::MessageParser<S2C_GetAllianceDonationInfo>(() => new S2C_GetAllianceDonationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetAllianceDonationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceDonationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceDonationInfo(S2C_GetAllianceDonationInfo other) : this() {
      level_ = other.level_;
      currentScore_ = other.currentScore_;
      needScore_ = other.needScore_;
      allianceResMax_ = other.allianceResMax_;
      allianceRes1_ = other.allianceRes1_;
      allianceRes2_ = other.allianceRes2_;
      allianceRes3_ = other.allianceRes3_;
      allianceRes4_ = other.allianceRes4_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetAllianceDonationInfo Clone() {
      return new S2C_GetAllianceDonationInfo(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "currentScore" field.</summary>
    public const int CurrentScoreFieldNumber = 2;
    private int currentScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentScore {
      get { return currentScore_; }
      set {
        currentScore_ = value;
      }
    }

    /// <summary>Field number for the "needScore" field.</summary>
    public const int NeedScoreFieldNumber = 3;
    private int needScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedScore {
      get { return needScore_; }
      set {
        needScore_ = value;
      }
    }

    /// <summary>Field number for the "allianceResMax" field.</summary>
    public const int AllianceResMaxFieldNumber = 4;
    private int allianceResMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllianceResMax {
      get { return allianceResMax_; }
      set {
        allianceResMax_ = value;
      }
    }

    /// <summary>Field number for the "allianceRes1" field.</summary>
    public const int AllianceRes1FieldNumber = 5;
    private int allianceRes1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllianceRes1 {
      get { return allianceRes1_; }
      set {
        allianceRes1_ = value;
      }
    }

    /// <summary>Field number for the "allianceRes2" field.</summary>
    public const int AllianceRes2FieldNumber = 6;
    private int allianceRes2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllianceRes2 {
      get { return allianceRes2_; }
      set {
        allianceRes2_ = value;
      }
    }

    /// <summary>Field number for the "allianceRes3" field.</summary>
    public const int AllianceRes3FieldNumber = 7;
    private int allianceRes3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllianceRes3 {
      get { return allianceRes3_; }
      set {
        allianceRes3_ = value;
      }
    }

    /// <summary>Field number for the "allianceRes4" field.</summary>
    public const int AllianceRes4FieldNumber = 8;
    private int allianceRes4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllianceRes4 {
      get { return allianceRes4_; }
      set {
        allianceRes4_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetAllianceDonationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetAllianceDonationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (CurrentScore != other.CurrentScore) return false;
      if (NeedScore != other.NeedScore) return false;
      if (AllianceResMax != other.AllianceResMax) return false;
      if (AllianceRes1 != other.AllianceRes1) return false;
      if (AllianceRes2 != other.AllianceRes2) return false;
      if (AllianceRes3 != other.AllianceRes3) return false;
      if (AllianceRes4 != other.AllianceRes4) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (CurrentScore != 0) hash ^= CurrentScore.GetHashCode();
      if (NeedScore != 0) hash ^= NeedScore.GetHashCode();
      if (AllianceResMax != 0) hash ^= AllianceResMax.GetHashCode();
      if (AllianceRes1 != 0) hash ^= AllianceRes1.GetHashCode();
      if (AllianceRes2 != 0) hash ^= AllianceRes2.GetHashCode();
      if (AllianceRes3 != 0) hash ^= AllianceRes3.GetHashCode();
      if (AllianceRes4 != 0) hash ^= AllianceRes4.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (CurrentScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentScore);
      }
      if (NeedScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NeedScore);
      }
      if (AllianceResMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AllianceResMax);
      }
      if (AllianceRes1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AllianceRes1);
      }
      if (AllianceRes2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AllianceRes2);
      }
      if (AllianceRes3 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AllianceRes3);
      }
      if (AllianceRes4 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AllianceRes4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (CurrentScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentScore);
      }
      if (NeedScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedScore);
      }
      if (AllianceResMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllianceResMax);
      }
      if (AllianceRes1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllianceRes1);
      }
      if (AllianceRes2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllianceRes2);
      }
      if (AllianceRes3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllianceRes3);
      }
      if (AllianceRes4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllianceRes4);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetAllianceDonationInfo other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.CurrentScore != 0) {
        CurrentScore = other.CurrentScore;
      }
      if (other.NeedScore != 0) {
        NeedScore = other.NeedScore;
      }
      if (other.AllianceResMax != 0) {
        AllianceResMax = other.AllianceResMax;
      }
      if (other.AllianceRes1 != 0) {
        AllianceRes1 = other.AllianceRes1;
      }
      if (other.AllianceRes2 != 0) {
        AllianceRes2 = other.AllianceRes2;
      }
      if (other.AllianceRes3 != 0) {
        AllianceRes3 = other.AllianceRes3;
      }
      if (other.AllianceRes4 != 0) {
        AllianceRes4 = other.AllianceRes4;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentScore = input.ReadInt32();
            break;
          }
          case 24: {
            NeedScore = input.ReadInt32();
            break;
          }
          case 32: {
            AllianceResMax = input.ReadInt32();
            break;
          }
          case 40: {
            AllianceRes1 = input.ReadInt32();
            break;
          }
          case 48: {
            AllianceRes2 = input.ReadInt32();
            break;
          }
          case 56: {
            AllianceRes3 = input.ReadInt32();
            break;
          }
          case 64: {
            AllianceRes4 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11048 军团捐献:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AllianceDonation : pb::IMessage<C2S_AllianceDonation> {
    private static readonly pb::MessageParser<C2S_AllianceDonation> _parser = new pb::MessageParser<C2S_AllianceDonation>(() => new C2S_AllianceDonation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AllianceDonation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceDonation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceDonation(C2S_AllianceDonation other) : this() {
      res1_ = other.res1_;
      res2_ = other.res2_;
      res3_ = other.res3_;
      res4_ = other.res4_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceDonation Clone() {
      return new C2S_AllianceDonation(this);
    }

    /// <summary>Field number for the "res1" field.</summary>
    public const int Res1FieldNumber = 1;
    private int res1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res1 {
      get { return res1_; }
      set {
        res1_ = value;
      }
    }

    /// <summary>Field number for the "res2" field.</summary>
    public const int Res2FieldNumber = 2;
    private int res2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res2 {
      get { return res2_; }
      set {
        res2_ = value;
      }
    }

    /// <summary>Field number for the "res3" field.</summary>
    public const int Res3FieldNumber = 3;
    private int res3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res3 {
      get { return res3_; }
      set {
        res3_ = value;
      }
    }

    /// <summary>Field number for the "res4" field.</summary>
    public const int Res4FieldNumber = 4;
    private int res4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res4 {
      get { return res4_; }
      set {
        res4_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AllianceDonation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AllianceDonation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Res1 != other.Res1) return false;
      if (Res2 != other.Res2) return false;
      if (Res3 != other.Res3) return false;
      if (Res4 != other.Res4) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Res1 != 0) hash ^= Res1.GetHashCode();
      if (Res2 != 0) hash ^= Res2.GetHashCode();
      if (Res3 != 0) hash ^= Res3.GetHashCode();
      if (Res4 != 0) hash ^= Res4.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Res1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Res1);
      }
      if (Res2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Res2);
      }
      if (Res3 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Res3);
      }
      if (Res4 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Res4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Res1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res1);
      }
      if (Res2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res2);
      }
      if (Res3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res3);
      }
      if (Res4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res4);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AllianceDonation other) {
      if (other == null) {
        return;
      }
      if (other.Res1 != 0) {
        Res1 = other.Res1;
      }
      if (other.Res2 != 0) {
        Res2 = other.Res2;
      }
      if (other.Res3 != 0) {
        Res3 = other.Res3;
      }
      if (other.Res4 != 0) {
        Res4 = other.Res4;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Res1 = input.ReadInt32();
            break;
          }
          case 16: {
            Res2 = input.ReadInt32();
            break;
          }
          case 24: {
            Res3 = input.ReadInt32();
            break;
          }
          case 32: {
            Res4 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AllianceDonation : pb::IMessage<S2C_AllianceDonation> {
    private static readonly pb::MessageParser<S2C_AllianceDonation> _parser = new pb::MessageParser<S2C_AllianceDonation>(() => new S2C_AllianceDonation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AllianceDonation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceDonation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceDonation(S2C_AllianceDonation other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceDonation Clone() {
      return new S2C_AllianceDonation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AllianceDonation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AllianceDonation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AllianceDonation other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11049 设置军团关系:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_SetAllianceRelation : pb::IMessage<C2S_SetAllianceRelation> {
    private static readonly pb::MessageParser<C2S_SetAllianceRelation> _parser = new pb::MessageParser<C2S_SetAllianceRelation>(() => new C2S_SetAllianceRelation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_SetAllianceRelation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetAllianceRelation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetAllianceRelation(C2S_SetAllianceRelation other) : this() {
      allianceId_ = other.allianceId_;
      relation_ = other.relation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetAllianceRelation Clone() {
      return new C2S_SetAllianceRelation(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "relation" field.</summary>
    public const int RelationFieldNumber = 2;
    private int relation_;
    /// <summary>
    /// 关系 0-中立 1-友好 2-敌对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Relation {
      get { return relation_; }
      set {
        relation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_SetAllianceRelation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_SetAllianceRelation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (Relation != other.Relation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (Relation != 0) hash ^= Relation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (Relation != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Relation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (Relation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Relation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_SetAllianceRelation other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.Relation != 0) {
        Relation = other.Relation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 16: {
            Relation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_SetAllianceRelation : pb::IMessage<S2C_SetAllianceRelation> {
    private static readonly pb::MessageParser<S2C_SetAllianceRelation> _parser = new pb::MessageParser<S2C_SetAllianceRelation>(() => new S2C_SetAllianceRelation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SetAllianceRelation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetAllianceRelation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetAllianceRelation(S2C_SetAllianceRelation other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetAllianceRelation Clone() {
      return new S2C_SetAllianceRelation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SetAllianceRelation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SetAllianceRelation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SetAllianceRelation other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11050 军团关系列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AllianceRelationList : pb::IMessage<C2S_AllianceRelationList> {
    private static readonly pb::MessageParser<C2S_AllianceRelationList> _parser = new pb::MessageParser<C2S_AllianceRelationList>(() => new C2S_AllianceRelationList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AllianceRelationList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceRelationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceRelationList(C2S_AllianceRelationList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceRelationList Clone() {
      return new C2S_AllianceRelationList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AllianceRelationList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AllianceRelationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AllianceRelationList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_AllianceRelationList : pb::IMessage<S2C_AllianceRelationList> {
    private static readonly pb::MessageParser<S2C_AllianceRelationList> _parser = new pb::MessageParser<S2C_AllianceRelationList>(() => new S2C_AllianceRelationList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AllianceRelationList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceRelationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceRelationList(S2C_AllianceRelationList other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceRelationList Clone() {
      return new S2C_AllianceRelationList(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.AllianceRelationItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.AllianceRelationItem.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.AllianceRelationItem> items_ = new pbc::RepeatedField<global::NBSGame.PB.AllianceRelationItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.AllianceRelationItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AllianceRelationList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AllianceRelationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AllianceRelationList other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllianceRelationItem : pb::IMessage<AllianceRelationItem> {
    private static readonly pb::MessageParser<AllianceRelationItem> _parser = new pb::MessageParser<AllianceRelationItem>(() => new AllianceRelationItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllianceRelationItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceRelationItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceRelationItem(AllianceRelationItem other) : this() {
      allianceId_ = other.allianceId_;
      name_ = other.name_;
      level_ = other.level_;
      power_ = other.power_;
      memberCount_ = other.memberCount_;
      region_ = other.region_;
      relation_ = other.relation_;
      releveRemainingTime_ = other.releveRemainingTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceRelationItem Clone() {
      return new AllianceRelationItem(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 5;
    private int memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 6;
    private int region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "relation" field.</summary>
    public const int RelationFieldNumber = 7;
    private int relation_;
    /// <summary>
    /// 关系 0-中立 1-友好 2-敌对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Relation {
      get { return relation_; }
      set {
        relation_ = value;
      }
    }

    /// <summary>Field number for the "releveRemainingTime" field.</summary>
    public const int ReleveRemainingTimeFieldNumber = 8;
    private int releveRemainingTime_;
    /// <summary>
    /// 解除剩余时间，单位秒，若为-1则不处于解除状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReleveRemainingTime {
      get { return releveRemainingTime_; }
      set {
        releveRemainingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllianceRelationItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllianceRelationItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Power != other.Power) return false;
      if (MemberCount != other.MemberCount) return false;
      if (Region != other.Region) return false;
      if (Relation != other.Relation) return false;
      if (ReleveRemainingTime != other.ReleveRemainingTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (Relation != 0) hash ^= Relation.GetHashCode();
      if (ReleveRemainingTime != 0) hash ^= ReleveRemainingTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Power != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Power);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberCount);
      }
      if (Region != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Region);
      }
      if (Relation != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Relation);
      }
      if (ReleveRemainingTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReleveRemainingTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (Relation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Relation);
      }
      if (ReleveRemainingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleveRemainingTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllianceRelationItem other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      if (other.Relation != 0) {
        Relation = other.Relation;
      }
      if (other.ReleveRemainingTime != 0) {
        ReleveRemainingTime = other.ReleveRemainingTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Power = input.ReadInt32();
            break;
          }
          case 40: {
            MemberCount = input.ReadInt32();
            break;
          }
          case 48: {
            Region = input.ReadInt32();
            break;
          }
          case 56: {
            Relation = input.ReadInt32();
            break;
          }
          case 64: {
            ReleveRemainingTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11051 结盟请求列表:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AllianceAllyApplyList : pb::IMessage<C2S_AllianceAllyApplyList> {
    private static readonly pb::MessageParser<C2S_AllianceAllyApplyList> _parser = new pb::MessageParser<C2S_AllianceAllyApplyList>(() => new C2S_AllianceAllyApplyList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AllianceAllyApplyList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceAllyApplyList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceAllyApplyList(C2S_AllianceAllyApplyList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceAllyApplyList Clone() {
      return new C2S_AllianceAllyApplyList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AllianceAllyApplyList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AllianceAllyApplyList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AllianceAllyApplyList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class S2C_AllianceAllyApplyList : pb::IMessage<S2C_AllianceAllyApplyList> {
    private static readonly pb::MessageParser<S2C_AllianceAllyApplyList> _parser = new pb::MessageParser<S2C_AllianceAllyApplyList>(() => new S2C_AllianceAllyApplyList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AllianceAllyApplyList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceAllyApplyList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceAllyApplyList(S2C_AllianceAllyApplyList other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceAllyApplyList Clone() {
      return new S2C_AllianceAllyApplyList(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NBSGame.PB.AllianceAllyApplyItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::NBSGame.PB.AllianceAllyApplyItem.Parser);
    private readonly pbc::RepeatedField<global::NBSGame.PB.AllianceAllyApplyItem> items_ = new pbc::RepeatedField<global::NBSGame.PB.AllianceAllyApplyItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NBSGame.PB.AllianceAllyApplyItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AllianceAllyApplyList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AllianceAllyApplyList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AllianceAllyApplyList other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllianceAllyApplyItem : pb::IMessage<AllianceAllyApplyItem> {
    private static readonly pb::MessageParser<AllianceAllyApplyItem> _parser = new pb::MessageParser<AllianceAllyApplyItem>(() => new AllianceAllyApplyItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllianceAllyApplyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceAllyApplyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceAllyApplyItem(AllianceAllyApplyItem other) : this() {
      allianceId_ = other.allianceId_;
      name_ = other.name_;
      level_ = other.level_;
      power_ = other.power_;
      memberCount_ = other.memberCount_;
      region_ = other.region_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceAllyApplyItem Clone() {
      return new AllianceAllyApplyItem(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 5;
    private int memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 6;
    private int region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllianceAllyApplyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllianceAllyApplyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Power != other.Power) return false;
      if (MemberCount != other.MemberCount) return false;
      if (Region != other.Region) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Power != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Power);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberCount);
      }
      if (Region != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllianceAllyApplyItem other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Power = input.ReadInt32();
            break;
          }
          case 40: {
            MemberCount = input.ReadInt32();
            break;
          }
          case 48: {
            Region = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11052 结盟申请处理:------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_AllianceAllyApplyProcessor : pb::IMessage<C2S_AllianceAllyApplyProcessor> {
    private static readonly pb::MessageParser<C2S_AllianceAllyApplyProcessor> _parser = new pb::MessageParser<C2S_AllianceAllyApplyProcessor>(() => new C2S_AllianceAllyApplyProcessor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AllianceAllyApplyProcessor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceAllyApplyProcessor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceAllyApplyProcessor(C2S_AllianceAllyApplyProcessor other) : this() {
      allianceId_ = other.allianceId_;
      isAgree_ = other.isAgree_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AllianceAllyApplyProcessor Clone() {
      return new C2S_AllianceAllyApplyProcessor(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "isAgree" field.</summary>
    public const int IsAgreeFieldNumber = 2;
    private bool isAgree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AllianceAllyApplyProcessor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AllianceAllyApplyProcessor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (IsAgree != other.IsAgree) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (IsAgree != false) hash ^= IsAgree.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (IsAgree != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAgree);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AllianceAllyApplyProcessor other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.IsAgree != false) {
        IsAgree = other.IsAgree;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 16: {
            IsAgree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_AllianceAllyApplyProcessor : pb::IMessage<S2C_AllianceAllyApplyProcessor> {
    private static readonly pb::MessageParser<S2C_AllianceAllyApplyProcessor> _parser = new pb::MessageParser<S2C_AllianceAllyApplyProcessor>(() => new S2C_AllianceAllyApplyProcessor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AllianceAllyApplyProcessor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceAllyApplyProcessor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceAllyApplyProcessor(S2C_AllianceAllyApplyProcessor other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AllianceAllyApplyProcessor Clone() {
      return new S2C_AllianceAllyApplyProcessor(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AllianceAllyApplyProcessor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AllianceAllyApplyProcessor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AllianceAllyApplyProcessor other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// cmdId:11053 检查军团关系:该协议在11049前发送，若关系有问题则会给出错误提示，关系成立则成功返回------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class C2S_CheckAllianceRelation : pb::IMessage<C2S_CheckAllianceRelation> {
    private static readonly pb::MessageParser<C2S_CheckAllianceRelation> _parser = new pb::MessageParser<C2S_CheckAllianceRelation>(() => new C2S_CheckAllianceRelation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CheckAllianceRelation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckAllianceRelation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckAllianceRelation(C2S_CheckAllianceRelation other) : this() {
      allianceId_ = other.allianceId_;
      relation_ = other.relation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CheckAllianceRelation Clone() {
      return new C2S_CheckAllianceRelation(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private long allianceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "relation" field.</summary>
    public const int RelationFieldNumber = 2;
    private int relation_;
    /// <summary>
    /// 关系 0-中立 1-友好 2-敌对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Relation {
      get { return relation_; }
      set {
        relation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CheckAllianceRelation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CheckAllianceRelation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (Relation != other.Relation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0L) hash ^= AllianceId.GetHashCode();
      if (Relation != 0) hash ^= Relation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllianceId);
      }
      if (Relation != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Relation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllianceId);
      }
      if (Relation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Relation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CheckAllianceRelation other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0L) {
        AllianceId = other.AllianceId;
      }
      if (other.Relation != 0) {
        Relation = other.Relation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AllianceId = input.ReadInt64();
            break;
          }
          case 16: {
            Relation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_CheckAllianceRelation : pb::IMessage<S2C_CheckAllianceRelation> {
    private static readonly pb::MessageParser<S2C_CheckAllianceRelation> _parser = new pb::MessageParser<S2C_CheckAllianceRelation>(() => new S2C_CheckAllianceRelation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CheckAllianceRelation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NBSGame.PB.AllianceClient2ServerReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckAllianceRelation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckAllianceRelation(S2C_CheckAllianceRelation other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CheckAllianceRelation Clone() {
      return new S2C_CheckAllianceRelation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CheckAllianceRelation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CheckAllianceRelation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CheckAllianceRelation other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
