// UFramework Automatic.
// $Date$

using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using UnityEngine;
using UFramework.Core;
using Logger = Lockstep.Logger;

[System.Serializable]
public class $tableName$TableData
{
$variable$
}

[System.Serializable]
public class $tableName$TableDatas
{
    private List<$tableName$TableData> _datas = new List<$tableName$TableData>();
    
    public void AddData($tableName$TableData data)
    {
        _datas.Add(data);
    }
    
    public List<$tableName$TableData> GetDatas()
    {
        return _datas;
    }

    public static List<$tableName$TableData> Load()
    {
        var path = IOPath.PathCombine(UApplication.TableDirectory, $"$tableName$.bytes");
        var obj = TableSerialize.Deserialize<$tableName$TableDatas>(path);
        return obj._datas;
    }
}

public class $tableName$Table : Singleton<$tableName$Table>
{
    public string tableName => "$tableName$";
    public int maxCount => m_tableDatas.Length;
    
    public TableKeyFormat dataFormatOptions = TableKeyFormat.$keyFormat$;
    private $tableName$TableData[] m_tableDatas;
    private Dictionary<int, $tableName$TableData> m_tableDataIntDictionary;
    private Dictionary<string, $tableName$TableData> m_tableDataStringDictionary;
    private Dictionary<int, Dictionary<int, $tableName$TableData>> m_tableDataInt2IntDictionary;

    protected override void OnSingletonAwake()
    {
        var datas = $tableName$TableDatas.Load();
        switch (dataFormatOptions)
        {
            case TableKeyFormat.Default:
                m_tableDatas = datas.ToArray();
                break;
            case TableKeyFormat.IntKey:
                m_tableDataIntDictionary = new Dictionary<int, $tableName$TableData>();
                for (var i = 0; i < datas.Count; i++)
                {
                    var data = datas[i];
                    if (!m_tableDataIntDictionary.ContainsKey(data.$key1$))
                    {
                        m_tableDataIntDictionary.Add(data.$key1$, data);
                    }
                }

                break;
            case TableKeyFormat.StringKey:
                m_tableDataStringDictionary = new Dictionary<string, $tableName$TableData>();
                for (var i = 0; i < datas.Count; i++)
                {
                    var data = datas[i];
                    var id = data.$key1$.ToString();
                    if (!m_tableDataStringDictionary.ContainsKey(id))
                        m_tableDataStringDictionary.Add(id, data);
                }

                break;
            case TableKeyFormat.Int2Key:
                m_tableDataInt2IntDictionary = new Dictionary<int, Dictionary<int, $tableName$TableData>>();
                for (var i = 0; i < datas.Count; i++)
                {
                    var data = datas[i];
                    if (!m_tableDataInt2IntDictionary.ContainsKey(data.$key1$))
                        m_tableDataInt2IntDictionary.Add(data.$key1$, new Dictionary<int, $tableName$TableData>());

                    if (!m_tableDataInt2IntDictionary[data.$key1$].ContainsKey(data.$key2$))
                        m_tableDataInt2IntDictionary[data.$key1$].Add(data.$key2$, data);
                }

                break;
        }
    }

    private $tableName$TableData _GetWithIndex(int index)
    {
        if (dataFormatOptions == TableKeyFormat.Default)
        {
            if (index >= 0 && index < m_tableDatas.Length)
            {
                return m_tableDatas[index];
            }
        }
        else Logger.Error($"$tableName$ table get data error! key/index > {index}");
        return null;
    }

    private $tableName$TableData _GetWithKey(int key)
    {
        if (dataFormatOptions == TableKeyFormat.IntKey)
        {
            if (m_tableDataIntDictionary.TryGetValue(key, out var data))
                return data;
        }
        else Logger.Error($"$tableName$ table get data error! key/index > {key}");
        return null;
    }

    private $tableName$TableData _GetWithKey(string key)
    {
        if (dataFormatOptions == TableKeyFormat.StringKey)
        {
            if (m_tableDataStringDictionary.TryGetValue(key, out var data))
                return data;
        }
        else Logger.Error($"$tableName$ table get data error! key/index > {key}");
        return null;
    }

    private $tableName$TableData _GetWithKey(int key1, int key2)
    {
        if (dataFormatOptions == TableKeyFormat.Int2Key)
        {
            if (m_tableDataInt2IntDictionary.TryGetValue(key1, out var dictionary))
            {
                if (dictionary.TryGetValue(key2, out var data))
                    return data;
            }
        }
        else Logger.Error($"$tableName$ table get data error! key/index > {key1},{key2}");
        return null;
    }

    public static $tableName$TableData GetWithIndex(int index) { return Instance._GetWithIndex(index); }
    public static $tableName$TableData GetWithKey(int key) { return Instance._GetWithKey(key); }
    public static $tableName$TableData GetWithKey(string key) { return Instance._GetWithKey(key); }
    public static $tableName$TableData GetWithKey(int key1, int key2) { return Instance._GetWithKey(key1, key2); }
}
